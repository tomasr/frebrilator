using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IIS_TraceTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "IIS_Trace";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x3a2a4e84), unchecked((short) 0x4c21), unchecked((short) 0x4981), 0xae, 0x10, 0x3f, 0xda, 0x0d, 0x9b, 0x0f, 0x83);
        public enum Keywords : long
        {
        };

        public IIS_TraceTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs> IISGeneralCONFIG_CHANGE_NOTIFICATION
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralCONFIG_CHANGE_NOTIFICATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<IISGeneralFILE_CHANGE_NOTIFICATIONArgs> IISGeneralFILE_CHANGE_NOTIFICATION
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralFILE_CHANGE_NOTIFICATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_CGI_HANDLERArgs> IISGeneralGENERAL_CGI_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CGI_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_CHILD_REQUEST_ENDArgs> IISGeneralGENERAL_CHILD_REQUEST_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CHILD_REQUEST_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_CHILD_REQUEST_STARTArgs> IISGeneralGENERAL_CHILD_REQUEST_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CHILD_REQUEST_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_DAV_HANDLERArgs> IISGeneralGENERAL_DAV_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_DAV_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs> IISGeneralGENERAL_ENDPOINT_INFORMATION
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_ENDPOINT_INFORMATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs> IISGeneralGENERAL_FLUSH_RESPONSE_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_FLUSH_RESPONSE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs> IISGeneralGENERAL_FLUSH_RESPONSE_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_FLUSH_RESPONSE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_GET_URL_METADATAArgs> IISGeneralGENERAL_GET_URL_METADATA
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_GET_URL_METADATATemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_ISAPI_HANDLERArgs> IISGeneralGENERAL_ISAPI_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_ISAPI_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_MAP_HANDLERArgs> IISGeneralGENERAL_MAP_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_MAP_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs> IISGeneralGENERAL_MODULE_FACTORY_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_MODULE_FACTORY_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs> IISGeneralGENERAL_NOT_SEND_CUSTOM_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs> IISGeneralGENERAL_OOP_ISAPI_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_OOP_ISAPI_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_OPTIONS_HANDLERArgs> IISGeneralGENERAL_OPTIONS_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_OPTIONS_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_READ_ENTITY_ENDArgs> IISGeneralGENERAL_READ_ENTITY_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_READ_ENTITY_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_READ_ENTITY_STARTArgs> IISGeneralGENERAL_READ_ENTITY_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_READ_ENTITY_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_REDIRECTION_HANDLERArgs> IISGeneralGENERAL_REDIRECTION_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REDIRECTION_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_REQUEST_ENDArgs> IISGeneralGENERAL_REQUEST_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_REQUEST_ENTITYArgs> IISGeneralGENERAL_REQUEST_ENTITY
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_ENTITYTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_REQUEST_HEADERSArgs> IISGeneralGENERAL_REQUEST_HEADERS
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_HEADERSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_REQUEST_STARTArgs> IISGeneralGENERAL_REQUEST_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs> IISGeneralGENERAL_RESPONSE_ENTITY_BUFFER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs> IISGeneralGENERAL_RESPONSE_ENTITY_FILE
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_RESPONSE_ENTITY_FILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_RESPONSE_HEADERSArgs> IISGeneralGENERAL_RESPONSE_HEADERS
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_RESPONSE_HEADERSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs> IISGeneralGENERAL_SEND_CUSTOM_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_SEND_CUSTOM_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_SET_REQUEST_HEADERArgs> IISGeneralGENERAL_SET_REQUEST_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_SET_REQUEST_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_SET_RESPONSE_HEADERArgs> IISGeneralGENERAL_SET_RESPONSE_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_SET_RESPONSE_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_STATIC_FILE_HANDLERArgs> IISGeneralGENERAL_STATIC_FILE_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_STATIC_FILE_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<IISGeneralGENERAL_TRACE_HANDLERArgs> IISGeneralGENERAL_TRACE_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_TRACE_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<IISGeneralHANDLER_CHANGEDArgs> IISGeneralHANDLER_CHANGED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralHANDLER_CHANGEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs> IISGeneralHANDLER_PRECONDITION_NOT_MATCH
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralHANDLER_PRECONDITION_NOT_MATCHTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs> IISGeneralMODULE_PRECONDITION_NOT_MATCH
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralMODULE_PRECONDITION_NOT_MATCHTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<IISGeneralURL_CHANGEDArgs> IISGeneralURL_CHANGED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralURL_CHANGEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<IISGeneralUSER_SETArgs> IISGeneralUSER_SET
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralUSER_SETTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs> IISGeneralVIRTUAL_MODULE_UNRESOLVED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralVIRTUAL_MODULE_UNRESOLVEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<IISISAPIISAPI_ENDArgs> IISISAPIISAPI_END
        {
            add
            {
                source.RegisterEventTemplate(IISISAPIISAPI_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<IISISAPIISAPI_STARTArgs> IISISAPIISAPI_START
        {
            add
            {
                source.RegisterEventTemplate(IISISAPIISAPI_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs IISGeneralCONFIG_CHANGE_NOTIFICATIONTemplate(Action<IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs(action, 16, 1, "IISGeneral", Guid.Empty, 26, "CONFIG_CHANGE_NOTIFICATION", ProviderGuid, ProviderName );
        }
        static private IISGeneralFILE_CHANGE_NOTIFICATIONArgs IISGeneralFILE_CHANGE_NOTIFICATIONTemplate(Action<IISGeneralFILE_CHANGE_NOTIFICATIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralFILE_CHANGE_NOTIFICATIONArgs(action, 33, 1, "IISGeneral", Guid.Empty, 43, "FILE_CHANGE_NOTIFICATION", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_CGI_HANDLERArgs IISGeneralGENERAL_CGI_HANDLERTemplate(Action<IISGeneralGENERAL_CGI_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_CGI_HANDLERArgs(action, 0, 1, "IISGeneral", Guid.Empty, 10, "GENERAL_CGI_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_CHILD_REQUEST_ENDArgs IISGeneralGENERAL_CHILD_REQUEST_ENDTemplate(Action<IISGeneralGENERAL_CHILD_REQUEST_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_CHILD_REQUEST_ENDArgs(action, 30, 1, "IISGeneral", Guid.Empty, 40, "GENERAL_CHILD_REQUEST_END", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_CHILD_REQUEST_STARTArgs IISGeneralGENERAL_CHILD_REQUEST_STARTTemplate(Action<IISGeneralGENERAL_CHILD_REQUEST_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_CHILD_REQUEST_STARTArgs(action, 6, 1, "IISGeneral", Guid.Empty, 16, "GENERAL_CHILD_REQUEST_START", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_DAV_HANDLERArgs IISGeneralGENERAL_DAV_HANDLERTemplate(Action<IISGeneralGENERAL_DAV_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_DAV_HANDLERArgs(action, 2, 1, "IISGeneral", Guid.Empty, 12, "GENERAL_DAV_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs IISGeneralGENERAL_ENDPOINT_INFORMATIONTemplate(Action<IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs(action, 8, 1, "IISGeneral", Guid.Empty, 18, "GENERAL_ENDPOINT_INFORMATION", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs IISGeneralGENERAL_FLUSH_RESPONSE_ENDTemplate(Action<IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs(action, 23, 1, "IISGeneral", Guid.Empty, 33, "GENERAL_FLUSH_RESPONSE_END", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs IISGeneralGENERAL_FLUSH_RESPONSE_STARTTemplate(Action<IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs(action, 18, 1, "IISGeneral", Guid.Empty, 28, "GENERAL_FLUSH_RESPONSE_START", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_GET_URL_METADATAArgs IISGeneralGENERAL_GET_URL_METADATATemplate(Action<IISGeneralGENERAL_GET_URL_METADATAArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_GET_URL_METADATAArgs(action, 24, 1, "IISGeneral", Guid.Empty, 34, "GENERAL_GET_URL_METADATA", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_ISAPI_HANDLERArgs IISGeneralGENERAL_ISAPI_HANDLERTemplate(Action<IISGeneralGENERAL_ISAPI_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_ISAPI_HANDLERArgs(action, 36, 1, "IISGeneral", Guid.Empty, 46, "GENERAL_ISAPI_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_MAP_HANDLERArgs IISGeneralGENERAL_MAP_HANDLERTemplate(Action<IISGeneralGENERAL_MAP_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_MAP_HANDLERArgs(action, 20, 1, "IISGeneral", Guid.Empty, 30, "GENERAL_MAP_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs IISGeneralGENERAL_MODULE_FACTORY_FAILEDTemplate(Action<IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs(action, 28, 1, "IISGeneral", Guid.Empty, 38, "GENERAL_MODULE_FACTORY_FAILED", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORTemplate(Action<IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs(action, 10, 1, "IISGeneral", Guid.Empty, 20, "GENERAL_NOT_SEND_CUSTOM_ERROR", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs IISGeneralGENERAL_OOP_ISAPI_HANDLERTemplate(Action<IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs(action, 12, 1, "IISGeneral", Guid.Empty, 22, "GENERAL_OOP_ISAPI_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_OPTIONS_HANDLERArgs IISGeneralGENERAL_OPTIONS_HANDLERTemplate(Action<IISGeneralGENERAL_OPTIONS_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_OPTIONS_HANDLERArgs(action, 19, 1, "IISGeneral", Guid.Empty, 29, "GENERAL_OPTIONS_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_READ_ENTITY_ENDArgs IISGeneralGENERAL_READ_ENTITY_ENDTemplate(Action<IISGeneralGENERAL_READ_ENTITY_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_READ_ENTITY_ENDArgs(action, 11, 1, "IISGeneral", Guid.Empty, 21, "GENERAL_READ_ENTITY_END", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_READ_ENTITY_STARTArgs IISGeneralGENERAL_READ_ENTITY_STARTTemplate(Action<IISGeneralGENERAL_READ_ENTITY_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_READ_ENTITY_STARTArgs(action, 3, 1, "IISGeneral", Guid.Empty, 13, "GENERAL_READ_ENTITY_START", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_REDIRECTION_HANDLERArgs IISGeneralGENERAL_REDIRECTION_HANDLERTemplate(Action<IISGeneralGENERAL_REDIRECTION_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_REDIRECTION_HANDLERArgs(action, 9, 1, "IISGeneral", Guid.Empty, 19, "GENERAL_REDIRECTION_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_REQUEST_ENDArgs IISGeneralGENERAL_REQUEST_ENDTemplate(Action<IISGeneralGENERAL_REQUEST_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_REQUEST_ENDArgs(action, 27, 1, "IISGeneral", Guid.Empty, 37, "GENERAL_REQUEST_END", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_REQUEST_ENTITYArgs IISGeneralGENERAL_REQUEST_ENTITYTemplate(Action<IISGeneralGENERAL_REQUEST_ENTITYArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_REQUEST_ENTITYArgs(action, 22, 1, "IISGeneral", Guid.Empty, 32, "GENERAL_REQUEST_ENTITY", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_REQUEST_HEADERSArgs IISGeneralGENERAL_REQUEST_HEADERSTemplate(Action<IISGeneralGENERAL_REQUEST_HEADERSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_REQUEST_HEADERSArgs(action, 15, 1, "IISGeneral", Guid.Empty, 25, "GENERAL_REQUEST_HEADERS", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_REQUEST_STARTArgs IISGeneralGENERAL_REQUEST_STARTTemplate(Action<IISGeneralGENERAL_REQUEST_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_REQUEST_STARTArgs(action, 31, 1, "IISGeneral", Guid.Empty, 41, "GENERAL_REQUEST_START", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERTemplate(Action<IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs(action, 26, 1, "IISGeneral", Guid.Empty, 36, "GENERAL_RESPONSE_ENTITY_BUFFER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs IISGeneralGENERAL_RESPONSE_ENTITY_FILETemplate(Action<IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs(action, 4, 1, "IISGeneral", Guid.Empty, 14, "GENERAL_RESPONSE_ENTITY_FILE", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_RESPONSE_HEADERSArgs IISGeneralGENERAL_RESPONSE_HEADERSTemplate(Action<IISGeneralGENERAL_RESPONSE_HEADERSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_RESPONSE_HEADERSArgs(action, 35, 1, "IISGeneral", Guid.Empty, 45, "GENERAL_RESPONSE_HEADERS", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs IISGeneralGENERAL_SEND_CUSTOM_ERRORTemplate(Action<IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs(action, 34, 1, "IISGeneral", Guid.Empty, 44, "GENERAL_SEND_CUSTOM_ERROR", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_SET_REQUEST_HEADERArgs IISGeneralGENERAL_SET_REQUEST_HEADERTemplate(Action<IISGeneralGENERAL_SET_REQUEST_HEADERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_SET_REQUEST_HEADERArgs(action, 5, 1, "IISGeneral", Guid.Empty, 15, "GENERAL_SET_REQUEST_HEADER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_SET_RESPONSE_HEADERArgs IISGeneralGENERAL_SET_RESPONSE_HEADERTemplate(Action<IISGeneralGENERAL_SET_RESPONSE_HEADERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_SET_RESPONSE_HEADERArgs(action, 13, 1, "IISGeneral", Guid.Empty, 23, "GENERAL_SET_RESPONSE_HEADER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_STATIC_FILE_HANDLERArgs IISGeneralGENERAL_STATIC_FILE_HANDLERTemplate(Action<IISGeneralGENERAL_STATIC_FILE_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_STATIC_FILE_HANDLERArgs(action, 25, 1, "IISGeneral", Guid.Empty, 35, "GENERAL_STATIC_FILE_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralGENERAL_TRACE_HANDLERArgs IISGeneralGENERAL_TRACE_HANDLERTemplate(Action<IISGeneralGENERAL_TRACE_HANDLERArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralGENERAL_TRACE_HANDLERArgs(action, 21, 1, "IISGeneral", Guid.Empty, 31, "GENERAL_TRACE_HANDLER", ProviderGuid, ProviderName );
        }
        static private IISGeneralHANDLER_CHANGEDArgs IISGeneralHANDLER_CHANGEDTemplate(Action<IISGeneralHANDLER_CHANGEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralHANDLER_CHANGEDArgs(action, 1, 1, "IISGeneral", Guid.Empty, 11, "HANDLER_CHANGED", ProviderGuid, ProviderName );
        }
        static private IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs IISGeneralHANDLER_PRECONDITION_NOT_MATCHTemplate(Action<IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs(action, 29, 1, "IISGeneral", Guid.Empty, 39, "HANDLER_PRECONDITION_NOT_MATCH", ProviderGuid, ProviderName );
        }
        static private IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs IISGeneralMODULE_PRECONDITION_NOT_MATCHTemplate(Action<IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs(action, 14, 1, "IISGeneral", Guid.Empty, 24, "MODULE_PRECONDITION_NOT_MATCH", ProviderGuid, ProviderName );
        }
        static private IISGeneralURL_CHANGEDArgs IISGeneralURL_CHANGEDTemplate(Action<IISGeneralURL_CHANGEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralURL_CHANGEDArgs(action, 7, 1, "IISGeneral", Guid.Empty, 17, "URL_CHANGED", ProviderGuid, ProviderName );
        }
        static private IISGeneralUSER_SETArgs IISGeneralUSER_SETTemplate(Action<IISGeneralUSER_SETArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralUSER_SETArgs(action, 17, 1, "IISGeneral", Guid.Empty, 27, "USER_SET", ProviderGuid, ProviderName );
        }
        static private IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs IISGeneralVIRTUAL_MODULE_UNRESOLVEDTemplate(Action<IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs(action, 32, 1, "IISGeneral", Guid.Empty, 42, "VIRTUAL_MODULE_UNRESOLVED", ProviderGuid, ProviderName );
        }
        static private IISISAPIISAPI_ENDArgs IISISAPIISAPI_ENDTemplate(Action<IISISAPIISAPI_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISISAPIISAPI_ENDArgs(action, 37, 2, "IISISAPI", Guid.Empty, 47, "ISAPI_END", ProviderGuid, ProviderName );
        }
        static private IISISAPIISAPI_STARTArgs IISISAPIISAPI_STARTTemplate(Action<IISISAPIISAPI_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISISAPIISAPI_STARTArgs(action, 38, 2, "IISISAPI", Guid.Empty, 48, "ISAPI_START", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[39];
                templates[0] = IISGeneralGENERAL_CGI_HANDLERTemplate(null);
                templates[1] = IISGeneralHANDLER_CHANGEDTemplate(null);
                templates[2] = IISGeneralGENERAL_DAV_HANDLERTemplate(null);
                templates[3] = IISGeneralGENERAL_READ_ENTITY_STARTTemplate(null);
                templates[4] = IISGeneralGENERAL_RESPONSE_ENTITY_FILETemplate(null);
                templates[5] = IISGeneralGENERAL_SET_REQUEST_HEADERTemplate(null);
                templates[6] = IISGeneralGENERAL_CHILD_REQUEST_STARTTemplate(null);
                templates[7] = IISGeneralURL_CHANGEDTemplate(null);
                templates[8] = IISGeneralGENERAL_ENDPOINT_INFORMATIONTemplate(null);
                templates[9] = IISGeneralGENERAL_REDIRECTION_HANDLERTemplate(null);
                templates[10] = IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORTemplate(null);
                templates[11] = IISGeneralGENERAL_READ_ENTITY_ENDTemplate(null);
                templates[12] = IISGeneralGENERAL_OOP_ISAPI_HANDLERTemplate(null);
                templates[13] = IISGeneralGENERAL_SET_RESPONSE_HEADERTemplate(null);
                templates[14] = IISGeneralMODULE_PRECONDITION_NOT_MATCHTemplate(null);
                templates[15] = IISGeneralGENERAL_REQUEST_HEADERSTemplate(null);
                templates[16] = IISGeneralCONFIG_CHANGE_NOTIFICATIONTemplate(null);
                templates[17] = IISGeneralUSER_SETTemplate(null);
                templates[18] = IISGeneralGENERAL_FLUSH_RESPONSE_STARTTemplate(null);
                templates[19] = IISGeneralGENERAL_OPTIONS_HANDLERTemplate(null);
                templates[20] = IISGeneralGENERAL_MAP_HANDLERTemplate(null);
                templates[21] = IISGeneralGENERAL_TRACE_HANDLERTemplate(null);
                templates[22] = IISGeneralGENERAL_REQUEST_ENTITYTemplate(null);
                templates[23] = IISGeneralGENERAL_FLUSH_RESPONSE_ENDTemplate(null);
                templates[24] = IISGeneralGENERAL_GET_URL_METADATATemplate(null);
                templates[25] = IISGeneralGENERAL_STATIC_FILE_HANDLERTemplate(null);
                templates[26] = IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERTemplate(null);
                templates[27] = IISGeneralGENERAL_REQUEST_ENDTemplate(null);
                templates[28] = IISGeneralGENERAL_MODULE_FACTORY_FAILEDTemplate(null);
                templates[29] = IISGeneralHANDLER_PRECONDITION_NOT_MATCHTemplate(null);
                templates[30] = IISGeneralGENERAL_CHILD_REQUEST_ENDTemplate(null);
                templates[31] = IISGeneralGENERAL_REQUEST_STARTTemplate(null);
                templates[32] = IISGeneralVIRTUAL_MODULE_UNRESOLVEDTemplate(null);
                templates[33] = IISGeneralFILE_CHANGE_NOTIFICATIONTemplate(null);
                templates[34] = IISGeneralGENERAL_SEND_CUSTOM_ERRORTemplate(null);
                templates[35] = IISGeneralGENERAL_RESPONSE_HEADERSTemplate(null);
                templates[36] = IISGeneralGENERAL_ISAPI_HANDLERTemplate(null);
                templates[37] = IISISAPIISAPI_ENDTemplate(null);
                templates[38] = IISISAPIISAPI_STARTTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace
{
    public sealed class IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ConfigPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs(Action<IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ConfigPath", ConfigPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ConfigPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ConfigPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralCONFIG_CHANGE_NOTIFICATIONArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralFILE_CHANGE_NOTIFICATIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralFILE_CHANGE_NOTIFICATIONArgs(Action<IISGeneralFILE_CHANGE_NOTIFICATIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralFILE_CHANGE_NOTIFICATIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralFILE_CHANGE_NOTIFICATIONArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_CGI_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_CGI_HANDLERArgs(Action<IISGeneralGENERAL_CGI_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_CGI_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_CGI_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_CHILD_REQUEST_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int HttpStatus { get { return GetInt32At(20); } }
        public int HttpSubStatus { get { return GetInt16At(24); } }

        #region Private
        internal IISGeneralGENERAL_CHILD_REQUEST_ENDArgs(Action<IISGeneralGENERAL_CHILD_REQUEST_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 26));
            Debug.Assert(!(Version > 1 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_CHILD_REQUEST_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "HttpStatus", "HttpSubStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return HttpStatus;
                case 3:
                    return HttpSubStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_CHILD_REQUEST_ENDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_CHILD_REQUEST_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int SiteId { get { return GetInt32At(16); } }
        public string RequestURL { get { return GetUnicodeStringAt(20); } }
        public string RequestVerb { get { return GetUTF8StringAt(SkipUnicodeString(20)); } }
        public int RecursiveLevel { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(20))); } }

        #region Private
        internal IISGeneralGENERAL_CHILD_REQUEST_STARTArgs(Action<IISGeneralGENERAL_CHILD_REQUEST_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(20))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(20))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_CHILD_REQUEST_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SiteId", SiteId);
             XmlAttrib(sb, "RequestURL", RequestURL);
             XmlAttrib(sb, "RequestVerb", RequestVerb);
             XmlAttrib(sb, "RecursiveLevel", RecursiveLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SiteId", "RequestURL", "RequestVerb", "RecursiveLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SiteId;
                case 2:
                    return RequestURL;
                case 3:
                    return RequestVerb;
                case 4:
                    return RecursiveLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_CHILD_REQUEST_STARTArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_DAV_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_DAV_HANDLERArgs(Action<IISGeneralGENERAL_DAV_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_DAV_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_DAV_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RemoteAddress { get { return GetUTF8StringAt(16); } }
        public string RemotePort { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string LocalAddress { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string LocalPort { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }

        #region Private
        internal IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs(Action<IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RemoteAddress", RemoteAddress);
             XmlAttrib(sb, "RemotePort", RemotePort);
             XmlAttrib(sb, "LocalAddress", LocalAddress);
             XmlAttrib(sb, "LocalPort", LocalPort);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RemoteAddress", "RemotePort", "LocalAddress", "LocalPort"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RemoteAddress;
                case 2:
                    return RemotePort;
                case 3:
                    return LocalAddress;
                case 4:
                    return LocalPort;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_ENDPOINT_INFORMATIONArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int ErrorCode { get { return GetInt32At(20); } }

        #region Private
        internal IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs(Action<IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_FLUSH_RESPONSE_ENDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs(Action<IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_FLUSH_RESPONSE_STARTArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_GET_URL_METADATAArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUnicodeStringAt(16); } }
        public W3GeneralGetURLMetadataAccessPerms AccessPerms { get { return (W3GeneralGetURLMetadataAccessPerms)GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralGENERAL_GET_URL_METADATAArgs(Action<IISGeneralGENERAL_GET_URL_METADATAArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_GET_URL_METADATAArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PhysicalPath", PhysicalPath);
             XmlAttrib(sb, "AccessPerms", AccessPerms);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath", "AccessPerms"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                case 2:
                    return AccessPerms;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_GET_URL_METADATAArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_ISAPI_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_ISAPI_HANDLERArgs(Action<IISGeneralGENERAL_ISAPI_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_ISAPI_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_ISAPI_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_MAP_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_MAP_HANDLERArgs(Action<IISGeneralGENERAL_MAP_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_MAP_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_MAP_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs(Action<IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_MODULE_FACTORY_FAILEDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public W3GeneralNotSendCustomErrorReason Reason { get { return (W3GeneralNotSendCustomErrorReason)GetInt32At(16); } }

        #region Private
        internal IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs(Action<IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ProcessId { get { return GetInt32At(16); } }
        public int TotalReqs { get { return GetInt32At(20); } }
        public int CurrentReqs { get { return GetInt32At(24); } }

        #region Private
        internal IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs(Action<IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version > 1 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ProcessId", ProcessId);
             XmlAttrib(sb, "TotalReqs", TotalReqs);
             XmlAttrib(sb, "CurrentReqs", CurrentReqs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ProcessId", "TotalReqs", "CurrentReqs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ProcessId;
                case 2:
                    return TotalReqs;
                case 3:
                    return CurrentReqs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_OOP_ISAPI_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_OPTIONS_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_OPTIONS_HANDLERArgs(Action<IISGeneralGENERAL_OPTIONS_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_OPTIONS_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_OPTIONS_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_READ_ENTITY_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesReceived { get { return GetInt32At(16); } }
        public int ErrorCode { get { return GetInt32At(20); } }

        #region Private
        internal IISGeneralGENERAL_READ_ENTITY_ENDArgs(Action<IISGeneralGENERAL_READ_ENTITY_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_READ_ENTITY_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesReceived", BytesReceived);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesReceived", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesReceived;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_READ_ENTITY_ENDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_READ_ENTITY_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_READ_ENTITY_STARTArgs(Action<IISGeneralGENERAL_READ_ENTITY_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_READ_ENTITY_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_READ_ENTITY_STARTArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_REDIRECTION_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RedirectedURL { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_REDIRECTION_HANDLERArgs(Action<IISGeneralGENERAL_REDIRECTION_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_REDIRECTION_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RedirectedURL", RedirectedURL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RedirectedURL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RedirectedURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_REDIRECTION_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_REQUEST_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int BytesReceived { get { return GetInt32At(20); } }
        public int HttpStatus { get { return GetInt32At(24); } }
        public int HttpSubStatus { get { return GetInt16At(28); } }

        #region Private
        internal IISGeneralGENERAL_REQUEST_ENDArgs(Action<IISGeneralGENERAL_REQUEST_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 30));
            Debug.Assert(!(Version > 1 && EventDataLength < 30));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_REQUEST_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             XmlAttrib(sb, "BytesReceived", BytesReceived);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "BytesReceived", "HttpStatus", "HttpSubStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return BytesReceived;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpSubStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_REQUEST_ENDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_REQUEST_ENTITYArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Buffer { get { return GetUTF8StringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_REQUEST_ENTITYArgs(Action<IISGeneralGENERAL_REQUEST_ENTITYArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_REQUEST_ENTITYArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Buffer", Buffer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Buffer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_REQUEST_ENTITYArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_REQUEST_HEADERSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_REQUEST_HEADERSArgs(Action<IISGeneralGENERAL_REQUEST_HEADERSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_REQUEST_HEADERSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Headers", Headers);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_REQUEST_HEADERSArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_REQUEST_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int SiteId { get { return GetInt32At(16); } }
        public string AppPoolId { get { return GetUnicodeStringAt(20); } }
        public long ConnId { get { return GetInt64At(SkipUnicodeString(20)); } }
        public long RawConnId { get { return GetInt64At(SkipUnicodeString(20)+8); } }
        public string RequestURL { get { return GetUnicodeStringAt(SkipUnicodeString(20)+16); } }
        public string RequestVerb { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(20)+16)); } }

        #region Private
        internal IISGeneralGENERAL_REQUEST_STARTArgs(Action<IISGeneralGENERAL_REQUEST_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(20)+16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(SkipUnicodeString(20)+16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_REQUEST_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SiteId", SiteId);
             XmlAttrib(sb, "AppPoolId", AppPoolId);
             XmlAttrib(sb, "ConnId", ConnId);
             XmlAttrib(sb, "RawConnId", RawConnId);
             XmlAttrib(sb, "RequestURL", RequestURL);
             XmlAttrib(sb, "RequestVerb", RequestVerb);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SiteId", "AppPoolId", "ConnId", "RawConnId", "RequestURL", "RequestVerb"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SiteId;
                case 2:
                    return AppPoolId;
                case 3:
                    return ConnId;
                case 4:
                    return RawConnId;
                case 5:
                    return RequestURL;
                case 6:
                    return RequestVerb;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_REQUEST_STARTArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Buffer { get { return GetUTF8StringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs(Action<IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Buffer", Buffer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Buffer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public long Offset { get { return GetInt64At(SkipUnicodeString(16)); } }
        public long Size { get { return GetInt64At(SkipUnicodeString(16)+8); } }

        #region Private
        internal IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs(Action<IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "Offset", "Size"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return Offset;
                case 3:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_RESPONSE_ENTITY_FILEArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_RESPONSE_HEADERSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_RESPONSE_HEADERSArgs(Action<IISGeneralGENERAL_RESPONSE_HEADERSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_RESPONSE_HEADERSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Headers", Headers);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_RESPONSE_HEADERSArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int HttpStatus { get { return GetInt32At(16); } }
        public int HttpSubStatus { get { return GetInt16At(20); } }
        public string FileNameOrURL { get { return GetUnicodeStringAt(22); } }

        #region Private
        internal IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs(Action<IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(22)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(22)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             XmlAttrib(sb, "FileNameOrURL", FileNameOrURL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpStatus", "HttpSubStatus", "FileNameOrURL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpStatus;
                case 2:
                    return HttpSubStatus;
                case 3:
                    return FileNameOrURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_SEND_CUSTOM_ERRORArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_SET_REQUEST_HEADERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public bool Replace { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))) != 0; } }

        #region Private
        internal IISGeneralGENERAL_SET_REQUEST_HEADERArgs(Action<IISGeneralGENERAL_SET_REQUEST_HEADERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_SET_REQUEST_HEADERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             XmlAttrib(sb, "Replace", Replace);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue", "Replace"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                case 3:
                    return Replace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_SET_REQUEST_HEADERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_SET_RESPONSE_HEADERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public bool Replace { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))) != 0; } }

        #region Private
        internal IISGeneralGENERAL_SET_RESPONSE_HEADERArgs(Action<IISGeneralGENERAL_SET_RESPONSE_HEADERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_SET_RESPONSE_HEADERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             XmlAttrib(sb, "Replace", Replace);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue", "Replace"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                case 3:
                    return Replace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_SET_RESPONSE_HEADERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_STATIC_FILE_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralGENERAL_STATIC_FILE_HANDLERArgs(Action<IISGeneralGENERAL_STATIC_FILE_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_STATIC_FILE_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_STATIC_FILE_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralGENERAL_TRACE_HANDLERArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISGeneralGENERAL_TRACE_HANDLERArgs(Action<IISGeneralGENERAL_TRACE_HANDLERArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralGENERAL_TRACE_HANDLERArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralGENERAL_TRACE_HANDLERArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralHANDLER_CHANGEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OldHandlerName { get { return GetUnicodeStringAt(16); } }
        public string NewHandlerName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string NewHandlerModules { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public string NewHandlerScriptProcessor { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }
        public string NewHandlerType { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))))); } }

        #region Private
        internal IISGeneralHANDLER_CHANGEDArgs(Action<IISGeneralHANDLER_CHANGEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralHANDLER_CHANGEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OldHandlerName", OldHandlerName);
             XmlAttrib(sb, "NewHandlerName", NewHandlerName);
             XmlAttrib(sb, "NewHandlerModules", NewHandlerModules);
             XmlAttrib(sb, "NewHandlerScriptProcessor", NewHandlerScriptProcessor);
             XmlAttrib(sb, "NewHandlerType", NewHandlerType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OldHandlerName", "NewHandlerName", "NewHandlerModules", "NewHandlerScriptProcessor", "NewHandlerType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OldHandlerName;
                case 2:
                    return NewHandlerName;
                case 3:
                    return NewHandlerModules;
                case 4:
                    return NewHandlerScriptProcessor;
                case 5:
                    return NewHandlerType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralHANDLER_CHANGEDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Precondition { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs(Action<IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Precondition", Precondition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Precondition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Precondition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralHANDLER_PRECONDITION_NOT_MATCHArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Precondition { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs(Action<IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Precondition", Precondition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Precondition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Precondition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralMODULE_PRECONDITION_NOT_MATCHArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralURL_CHANGEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OldUrl { get { return GetUnicodeStringAt(16); } }
        public string NewUrl { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralURL_CHANGEDArgs(Action<IISGeneralURL_CHANGEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralURL_CHANGEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OldUrl", OldUrl);
             XmlAttrib(sb, "NewUrl", NewUrl);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OldUrl", "NewUrl"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OldUrl;
                case 2:
                    return NewUrl;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralURL_CHANGEDArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralUSER_SETArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string AuthType { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public bool SupportsIsInRole { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16))) != 0; } }

        #region Private
        internal IISGeneralUSER_SETArgs(Action<IISGeneralUSER_SETArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralUSER_SETArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "AuthType", AuthType);
             XmlAttrib(sb, "UserName", UserName);
             XmlAttrib(sb, "SupportsIsInRole", SupportsIsInRole);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthType", "UserName", "SupportsIsInRole"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthType;
                case 2:
                    return UserName;
                case 3:
                    return SupportsIsInRole;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralUSER_SETArgs> m_target;
        #endregion
    }
    public sealed class IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Type { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs(Action<IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralVIRTUAL_MODULE_UNRESOLVEDArgs> m_target;
        #endregion
    }
    public sealed class IISISAPIISAPI_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISISAPIISAPI_ENDArgs(Action<IISISAPIISAPI_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISISAPIISAPI_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISISAPIISAPI_ENDArgs> m_target;
        #endregion
    }
    public sealed class IISISAPIISAPI_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal IISISAPIISAPI_STARTArgs(Action<IISISAPIISAPI_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISISAPIISAPI_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISISAPIISAPI_STARTArgs> m_target;
        #endregion
    }
    public enum W3GeneralGetURLMetadataAccessPerms
    {
        Read = 0x1,
        Write = 0x2,
        Exec = 0x4,
        SSL = 0x8,
        Source = 0x10,
        CliCert = 0x20,
        ReqCliCert = 0x40,
        MapCliCert = 0x80,
        SSL128 = 0x100,
        Script = 0x200,
        NoRemoteWrite = 0x400,
        NoRemoteRead = 0x1000,
        NoRemoteExec = 0x2000,
        NoRemoteScript = 0x4000,
        NoPhysicalDir = 0x8000,
    }
    public enum W3GeneralNotSendCustomErrorReason
    {
        UNKNOWN = 0x0,
        SETSTATUS_SUCCESS = 0x1,
        SETSTATUS_TRYSKIP = 0x2,
        EXISTINGRESPONSE_PASSTHROUGH = 0x3,
        EXISTINGRESPONSE_AUTO = 0x4,
    }
}
