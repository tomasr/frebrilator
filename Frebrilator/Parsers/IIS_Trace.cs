using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IIS_TraceTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "IIS_Trace";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x3a2a4e84), unchecked((short) 0x4c21), unchecked((short) 0x4981), 0xae, 0x10, 0x3f, 0xda, 0x0d, 0x9b, 0x0f, 0x83);
        public enum Keywords : long
        {
            Authentication = 0x2,
            Security = 0x4,
            Filter = 0x8,
            Staticfile = 0x10,
            Cgi = 0x20,
            Compression = 0x40,
            Cache = 0x80,
            Requestnotifications = 0x100,
            Module = 0x200,
            Fastcgi = 0x1000,
            Websocket = 0x4000,
        };

        public IIS_TraceTraceEventParser(TraceEventSource source) : base(source) {}

        private static Guid IISGeneralTaskGuid = new Guid("{d42cf7ef-de92-473e-8b6c-621ea663113a}");
        private static Guid IISAuthenticationTaskGuid = new Guid("{c33bbe8f-985b-4080-81e6-005f1a06b9e2}");
        private static Guid IISSecurityTaskGuid = new Guid("{29347ffb-ba48-41e6-bffd-469c5e543ca5}");
        private static Guid IISFilterTaskGuid = new Guid("{00237f0d-73eb-4bcf-a232-126693595847}");
        private static Guid IISStaticFileTaskGuid = new Guid("{79b02104-0db9-4cda-a552-058d97c2ecfd}");
        private static Guid IISISAPITaskGuid = new Guid("{2e94e6c7-eda0-4b73-9010-2529edce1c27}");
        private static Guid IISCGITaskGuid = new Guid("{e2e55403-0d2e-4609-a470-be0da04013c0}");
        private static Guid IISFastCGITaskGuid = new Guid("{e3642acc-3627-42b0-8372-867baa033b07}");
        private static Guid IISWebSocketTaskGuid = new Guid("{2ce74327-08be-425c-bfc5-1534fe7fefa6}");
        private static Guid IISCompressionTaskGuid = new Guid("{e60cee96-4472-448d-a13c-2170b18220ec}");
        private static Guid IISCacheTaskGuid = new Guid("{ac1d69f1-bf33-4ca0-9313-bca13873e1dc}");
        private static Guid RequestNotificationsTaskGuid = new Guid("{002e91e3-e7ae-44ab-8e07-99230ffa6ade}");
        private static Guid IISModuleEventsTaskGuid = new Guid("{d79a948e-95f1-417b-a731-b7a79dec7ae5}");

        public event Action<AUTH_ANON_PASSWD_CHANGE_NEEDED> IISAuthenticationAUTH_ANON_PASSWD_CHANGE_NEEDED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_ANON_PASSWD_CHANGE_NEEDEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_BAD_BASIC_HEADER> IISAuthenticationAUTH_BAD_BASIC_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_BAD_BASIC_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_BASIC_LOGON_FAILED> IISAuthenticationAUTH_BASIC_LOGON_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_BASIC_LOGON_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_END> IISAuthenticationAUTH_END
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_IISDIGEST_LOGON_FAILED> IISAuthenticationAUTH_IISDIGEST_LOGON_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_IISDIGEST_LOGON_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_INVALID_ANON_ACCOUNT> IISAuthenticationAUTH_INVALID_ANON_ACCOUNT
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_INVALID_ANON_ACCOUNTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_KERBEROS_FAILED> IISAuthenticationAUTH_KERBEROS_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_KERBEROS_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_NTLM_NULL_SESSION> IISAuthenticationAUTH_NTLM_NULL_SESSION
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_NTLM_NULL_SESSIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_PASSPORT_LOGON_FAILED> IISAuthenticationAUTH_PASSPORT_LOGON_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_PASSPORT_LOGON_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_PASSWD_CHANGE_DISABLED> IISAuthenticationAUTH_PASSWD_CHANGE_DISABLED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_PASSWD_CHANGE_DISABLEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_PASSWD_CHANGE_NEEDED> IISAuthenticationAUTH_PASSWD_CHANGE_NEEDED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_PASSWD_CHANGE_NEEDEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_REQUEST_AUTH_TYPE> IISAuthenticationAUTH_REQUEST_AUTH_TYPE
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_REQUEST_AUTH_TYPETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_SSPI_CONTINUE_NEEDED> IISAuthenticationAUTH_SSPI_CONTINUE_NEEDED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_SSPI_CONTINUE_NEEDEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_SSPI_LOGON_FAILED> IISAuthenticationAUTH_SSPI_LOGON_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_SSPI_LOGON_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_START> IISAuthenticationAUTH_START
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_SUCCEEDED> IISAuthenticationAUTH_SUCCEEDED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_SUCCEEDEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_TYPE_NOT_SUPPORTED> IISAuthenticationAUTH_TYPE_NOT_SUPPORTED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_TYPE_NOT_SUPPORTEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<AUTH_WDIGEST_LOGON_FAILED> IISAuthenticationAUTH_WDIGEST_LOGON_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISAuthenticationAUTH_WDIGEST_LOGON_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILE_CACHE_ACCESS_END> IISCacheFILE_CACHE_ACCESS_END
        {
            add
            {
                source.RegisterEventTemplate(IISCacheFILE_CACHE_ACCESS_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILE_CACHE_ACCESS_START> IISCacheFILE_CACHE_ACCESS_START
        {
            add
            {
                source.RegisterEventTemplate(IISCacheFILE_CACHE_ACCESS_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILE_CACHE_CREATE_FILE> IISCacheFILE_CACHE_CREATE_FILE
        {
            add
            {
                source.RegisterEventTemplate(IISCacheFILE_CACHE_CREATE_FILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<HTTPSYS_CACHEABLE> IISCacheHTTPSYS_CACHEABLE
        {
            add
            {
                source.RegisterEventTemplate(IISCacheHTTPSYS_CACHEABLETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<OUTPUT_CACHE_DISABLED> IISCacheOUTPUT_CACHE_DISABLED
        {
            add
            {
                source.RegisterEventTemplate(IISCacheOUTPUT_CACHE_DISABLEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<OUTPUT_CACHE_LOOKUP_END> IISCacheOUTPUT_CACHE_LOOKUP_END
        {
            add
            {
                source.RegisterEventTemplate(IISCacheOUTPUT_CACHE_LOOKUP_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<OUTPUT_CACHE_LOOKUP_START> IISCacheOUTPUT_CACHE_LOOKUP_START
        {
            add
            {
                source.RegisterEventTemplate(IISCacheOUTPUT_CACHE_LOOKUP_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<OUTPUT_CACHE_UPDATE_END> IISCacheOUTPUT_CACHE_UPDATE_END
        {
            add
            {
                source.RegisterEventTemplate(IISCacheOUTPUT_CACHE_UPDATE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<OUTPUT_CACHE_UPDATE_START> IISCacheOUTPUT_CACHE_UPDATE_START
        {
            add
            {
                source.RegisterEventTemplate(IISCacheOUTPUT_CACHE_UPDATE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<URL_CACHE_ACCESS_END> IISCacheURL_CACHE_ACCESS_END
        {
            add
            {
                source.RegisterEventTemplate(IISCacheURL_CACHE_ACCESS_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<URL_CACHE_ACCESS_START> IISCacheURL_CACHE_ACCESS_START
        {
            add
            {
                source.RegisterEventTemplate(IISCacheURL_CACHE_ACCESS_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_END> IISCGICGI_END
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_HEADERS_RECEIVED> IISCGICGI_HEADERS_RECEIVED
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_HEADERS_RECEIVEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_LAUNCH> IISCGICGI_LAUNCH
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_LAUNCHTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_PREMATURE_TERMINATION> IISCGICGI_PREMATURE_TERMINATION
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_PREMATURE_TERMINATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_REQUEST_ENTITY_START> IISCGICGI_REQUEST_ENTITY_START
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_REQUEST_ENTITY_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_START> IISCGICGI_START
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGI_TIMEOUT> IISCGICGI_TIMEOUT
        {
            add
            {
                source.RegisterEventTemplate(IISCGICGI_TIMEOUTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<DYNAMIC_COMPRESSION_DO> IISCompressionDYNAMIC_COMPRESSION_DO
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionDYNAMIC_COMPRESSION_DOTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<DYNAMIC_COMPRESSION_END> IISCompressionDYNAMIC_COMPRESSION_END
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionDYNAMIC_COMPRESSION_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<DYNAMIC_COMPRESSION_NOT_SUCCESS> IISCompressionDYNAMIC_COMPRESSION_NOT_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionDYNAMIC_COMPRESSION_NOT_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<DYNAMIC_COMPRESSION_START> IISCompressionDYNAMIC_COMPRESSION_START
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionDYNAMIC_COMPRESSION_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<DYNAMIC_COMPRESSION_SUCCESS> IISCompressionDYNAMIC_COMPRESSION_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionDYNAMIC_COMPRESSION_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<STATIC_COMPRESSION_CREATE_END> IISCompressionSTATIC_COMPRESSION_CREATE_END
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionSTATIC_COMPRESSION_CREATE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<STATIC_COMPRESSION_CREATE_START> IISCompressionSTATIC_COMPRESSION_CREATE_START
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionSTATIC_COMPRESSION_CREATE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<STATIC_COMPRESSION_END> IISCompressionSTATIC_COMPRESSION_END
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionSTATIC_COMPRESSION_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<STATIC_COMPRESSION_NOT_SUCCESS> IISCompressionSTATIC_COMPRESSION_NOT_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionSTATIC_COMPRESSION_NOT_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<STATIC_COMPRESSION_START> IISCompressionSTATIC_COMPRESSION_START
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionSTATIC_COMPRESSION_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<STATIC_COMPRESSION_SUCCESS> IISCompressionSTATIC_COMPRESSION_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISCompressionSTATIC_COMPRESSION_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_ACTIVITY_TIMEOUT> IISFastCGICGIF_ACTIVITY_TIMEOUT
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_ACTIVITY_TIMEOUTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_ADD_JOB_OBJECT_FAIL> IISFastCGICGIF_ADD_JOB_OBJECT_FAIL
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_ADD_JOB_OBJECT_FAILTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_APPMGR_SHUTDOWN> IISFastCGICGIF_APPMGR_SHUTDOWN
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_APPMGR_SHUTDOWNTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_ASSIGN_PROCESS> IISFastCGICGIF_ASSIGN_PROCESS
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_ASSIGN_PROCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_END> IISFastCGICGIF_END
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_PATH_NOT_FOUND> IISFastCGICGIF_PATH_NOT_FOUND
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_PATH_NOT_FOUNDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_QUEUE_FULL> IISFastCGICGIF_QUEUE_FULL
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_QUEUE_FULLTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_QUEUE_REQUEST> IISFastCGICGIF_QUEUE_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_QUEUE_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_RAPID_FAILURE_PROTECTION> IISFastCGICGIF_RAPID_FAILURE_PROTECTION
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_RAPID_FAILURE_PROTECTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_REQUEST_TIMEOUT> IISFastCGICGIF_REQUEST_TIMEOUT
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_REQUEST_TIMEOUTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_RESPONSE_WRITTEN> IISFastCGICGIF_RESPONSE_WRITTEN
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_RESPONSE_WRITTENTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_SCRIPT_PROCESSOR_MISSING> IISFastCGICGIF_SCRIPT_PROCESSOR_MISSING
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_SCRIPT_PROCESSOR_MISSINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_START> IISFastCGICGIF_START
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_TRACE_ERROR> IISFastCGICGIF_TRACE_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_TRACE_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_TRACE_INFO> IISFastCGICGIF_TRACE_INFO
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_TRACE_INFOTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_TRACE_WARNING> IISFastCGICGIF_TRACE_WARNING
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_TRACE_WARNINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_UNEXPECTED_EXIT> IISFastCGICGIF_UNEXPECTED_EXIT
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_UNEXPECTED_EXITTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_UNKNOWN_ERROR> IISFastCGICGIF_UNKNOWN_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_UNKNOWN_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<CGIF_WAITING_FOR_RESPONSE> IISFastCGICGIF_WAITING_FOR_RESPONSE
        {
            add
            {
                source.RegisterEventTemplate(IISFastCGICGIF_WAITING_FOR_RESPONSETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_ACCESS_DENIED_END> IISFilterFILTER_ACCESS_DENIED_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_ACCESS_DENIED_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_ACCESS_DENIED_START> IISFilterFILTER_ACCESS_DENIED_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_ACCESS_DENIED_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_ADD_REQ_HEADER> IISFilterFILTER_ADD_REQ_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_ADD_REQ_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_ADD_RESP_HEADER> IISFilterFILTER_ADD_RESP_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_ADD_RESP_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_AUTH_COMPLETE_END> IISFilterFILTER_AUTH_COMPLETE_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_AUTH_COMPLETE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_AUTH_COMPLETE_START> IISFilterFILTER_AUTH_COMPLETE_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_AUTH_COMPLETE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_AUTHENTICATION_END> IISFilterFILTER_AUTHENTICATION_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_AUTHENTICATION_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_AUTHENTICATION_START> IISFilterFILTER_AUTHENTICATION_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_AUTHENTICATION_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_END> IISFilterFILTER_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_END_OF_REQUEST_END> IISFilterFILTER_END_OF_REQUEST_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_END_OF_REQUEST_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_END_OF_REQUEST_START> IISFilterFILTER_END_OF_REQUEST_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_END_OF_REQUEST_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_ERROR> IISFilterFILTER_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_LOG_END> IISFilterFILTER_LOG_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_LOG_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_LOG_START> IISFilterFILTER_LOG_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_LOG_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_PREPROC_HEADERS_END> IISFilterFILTER_PREPROC_HEADERS_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_PREPROC_HEADERS_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_PREPROC_HEADERS_START> IISFilterFILTER_PREPROC_HEADERS_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_PREPROC_HEADERS_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_SEND_RAW_DATA_END> IISFilterFILTER_SEND_RAW_DATA_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_SEND_RAW_DATA_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_SEND_RAW_DATA_START> IISFilterFILTER_SEND_RAW_DATA_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_SEND_RAW_DATA_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_SEND_RESPONSE_END> IISFilterFILTER_SEND_RESPONSE_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_SEND_RESPONSE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_SEND_RESPONSE_START> IISFilterFILTER_SEND_RESPONSE_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_SEND_RESPONSE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_SET_REQ_HEADER> IISFilterFILTER_SET_REQ_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_SET_REQ_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_SET_RESP_HEADER> IISFilterFILTER_SET_RESP_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_SET_RESP_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_START> IISFilterFILTER_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_URL_MAP_END> IISFilterFILTER_URL_MAP_END
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_URL_MAP_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<FILTER_URL_MAP_START> IISFilterFILTER_URL_MAP_START
        {
            add
            {
                source.RegisterEventTemplate(IISFilterFILTER_URL_MAP_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_CGI_HANDLER> IISGeneralGENERAL_CGI_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CGI_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_CHILD_REQUEST_END> IISGeneralGENERAL_CHILD_REQUEST_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CHILD_REQUEST_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_CHILD_REQUEST_START> IISGeneralGENERAL_CHILD_REQUEST_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CHILD_REQUEST_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_CONFIG_CHANGE_NOTIFICATION> IISGeneralGENERAL_CONFIG_CHANGE_NOTIFICATION
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_CONFIG_CHANGE_NOTIFICATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_DAV_HANDLER> IISGeneralGENERAL_DAV_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_DAV_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_ENDPOINT_INFORMATION> IISGeneralGENERAL_ENDPOINT_INFORMATION
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_ENDPOINT_INFORMATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_FILE_CHANGE_NOTIFICATION> IISGeneralGENERAL_FILE_CHANGE_NOTIFICATION
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_FILE_CHANGE_NOTIFICATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_FLUSH_RESPONSE_END> IISGeneralGENERAL_FLUSH_RESPONSE_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_FLUSH_RESPONSE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_FLUSH_RESPONSE_START> IISGeneralGENERAL_FLUSH_RESPONSE_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_FLUSH_RESPONSE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_GET_URL_METADATA> IISGeneralGENERAL_GET_URL_METADATA
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_GET_URL_METADATATemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_ISAPI_HANDLER> IISGeneralGENERAL_ISAPI_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_ISAPI_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_MAP_HANDLER> IISGeneralGENERAL_MAP_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_MAP_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_MODULE_FACTORY_FAILED> IISGeneralGENERAL_MODULE_FACTORY_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_MODULE_FACTORY_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_NOT_SEND_CUSTOM_ERROR> IISGeneralGENERAL_NOT_SEND_CUSTOM_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_OOP_ISAPI_HANDLER> IISGeneralGENERAL_OOP_ISAPI_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_OOP_ISAPI_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_OPTIONS_HANDLER> IISGeneralGENERAL_OPTIONS_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_OPTIONS_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_READ_ENTITY_END> IISGeneralGENERAL_READ_ENTITY_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_READ_ENTITY_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_READ_ENTITY_START> IISGeneralGENERAL_READ_ENTITY_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_READ_ENTITY_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_REDIRECTION_HANDLER> IISGeneralGENERAL_REDIRECTION_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REDIRECTION_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_REQUEST_END> IISGeneralGENERAL_REQUEST_END
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_REQUEST_ENTITY> IISGeneralGENERAL_REQUEST_ENTITY
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_ENTITYTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_REQUEST_HEADERS> IISGeneralGENERAL_REQUEST_HEADERS
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_HEADERSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_REQUEST_START> IISGeneralGENERAL_REQUEST_START
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_REQUEST_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_RESPONSE_ENTITY_BUFFER> IISGeneralGENERAL_RESPONSE_ENTITY_BUFFER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_RESPONSE_ENTITY_FILE> IISGeneralGENERAL_RESPONSE_ENTITY_FILE
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_RESPONSE_ENTITY_FILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_RESPONSE_HEADERS> IISGeneralGENERAL_RESPONSE_HEADERS
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_RESPONSE_HEADERSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_SEND_CUSTOM_ERROR> IISGeneralGENERAL_SEND_CUSTOM_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_SEND_CUSTOM_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_SET_REQUEST_HEADER> IISGeneralGENERAL_SET_REQUEST_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_SET_REQUEST_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_SET_RESPONSE_HEADER> IISGeneralGENERAL_SET_RESPONSE_HEADER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_SET_RESPONSE_HEADERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_STATIC_FILE_HANDLER> IISGeneralGENERAL_STATIC_FILE_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_STATIC_FILE_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_TRACE_HANDLER> IISGeneralGENERAL_TRACE_HANDLER
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_TRACE_HANDLERTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_URL_CHANGED> IISGeneralGENERAL_URL_CHANGED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_URL_CHANGEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<GENERAL_VIRTUAL_MODULE_UNRESOLVED> IISGeneralGENERAL_VIRTUAL_MODULE_UNRESOLVED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralGENERAL_VIRTUAL_MODULE_UNRESOLVEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<HANDLER_CHANGED> IISGeneralHANDLER_CHANGED
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralHANDLER_CHANGEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<HANDLER_PRECONDITION_NOT_MATCH> IISGeneralHANDLER_PRECONDITION_NOT_MATCH
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralHANDLER_PRECONDITION_NOT_MATCHTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_PRECONDITION_NOT_MATCH> IISGeneralMODULE_PRECONDITION_NOT_MATCH
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralMODULE_PRECONDITION_NOT_MATCHTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<USER_SET> IISGeneralUSER_SET
        {
            add
            {
                source.RegisterEventTemplate(IISGeneralUSER_SETTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ISAPI_END> IISISAPIISAPI_END
        {
            add
            {
                source.RegisterEventTemplate(IISISAPIISAPI_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ISAPI_START> IISISAPIISAPI_START
        {
            add
            {
                source.RegisterEventTemplate(IISISAPIISAPI_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_CRITICAL_ERROR> IISModuleEventsMODULE_EVENTS_MODULE_CRITICAL_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_CRITICAL_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_END> IISModuleEventsMODULE_EVENTS_MODULE_END
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_ERROR> IISModuleEventsMODULE_EVENTS_MODULE_ERROR
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_INFORMATION> IISModuleEventsMODULE_EVENTS_MODULE_INFORMATION
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_INFORMATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_START> IISModuleEventsMODULE_EVENTS_MODULE_START
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_VERBOSE> IISModuleEventsMODULE_EVENTS_MODULE_VERBOSE
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_VERBOSETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_EVENTS_MODULE_WARNING> IISModuleEventsMODULE_EVENTS_MODULE_WARNING
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsMODULE_EVENTS_MODULE_WARNINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_DENIED_BY_ACCESS_FLAGS> IISSecuritySEC_DENIED_BY_ACCESS_FLAGS
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_DENIED_BY_ACCESS_FLAGSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_DENIED_BY_CGI_RESTRICTION> IISSecuritySEC_DENIED_BY_CGI_RESTRICTION
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_DENIED_BY_CGI_RESTRICTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_DENIED_BY_ISAPI_RESTRICTION> IISSecuritySEC_DENIED_BY_ISAPI_RESTRICTION
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_DENIED_BY_ISAPI_RESTRICTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_DENIED_BY_MIMEMAP> IISSecuritySEC_DENIED_BY_MIMEMAP
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_DENIED_BY_MIMEMAPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_FILE_ACCESS_DENIED> IISSecuritySEC_FILE_ACCESS_DENIED
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_FILE_ACCESS_DENIEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_ILLEGAL_SHORT_FILENAME> IISSecuritySEC_ILLEGAL_SHORT_FILENAME
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_ILLEGAL_SHORT_FILENAMETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_REJECTED_HOSTNAME> IISSecuritySEC_REJECTED_HOSTNAME
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_REJECTED_HOSTNAMETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_REJECTED_IP> IISSecuritySEC_REJECTED_IP
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_REJECTED_IPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<SEC_REQUIRE_SSL_128> IISSecuritySEC_REQUIRE_SSL_128
        {
            add
            {
                source.RegisterEventTemplate(IISSecuritySEC_REQUIRE_SSL_128Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_APPLICATION_CLOSE_CONNECTION> IISWebSocketWEBSOCKET_APPLICATION_CLOSE_CONNECTION
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_APPLICATION_CLOSE_CONNECTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_CLOSE_RECEIVED> IISWebSocketWEBSOCKET_CLOSE_RECEIVED
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_CLOSE_RECEIVEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_CLOSE_SEND_FAILURE> IISWebSocketWEBSOCKET_CLOSE_SEND_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_CLOSE_SEND_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_CLOSE_SEND_START> IISWebSocketWEBSOCKET_CLOSE_SEND_START
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_CLOSE_SEND_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_CLOSE_SEND_SUCCESS> IISWebSocketWEBSOCKET_CLOSE_SEND_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_CLOSE_SEND_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_END_FAILURE> IISWebSocketWEBSOCKET_END_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_END_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_END_SUCCESS> IISWebSocketWEBSOCKET_END_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_END_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_INITIALIZE_NOT_SUCCESS> IISWebSocketWEBSOCKET_INITIALIZE_NOT_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_INITIALIZE_NOT_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_MODULE_CLOSE_CONNECTION> IISWebSocketWEBSOCKET_MODULE_CLOSE_CONNECTION
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_MODULE_CLOSE_CONNECTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_READ_FRAGMENT_END_FAILURE> IISWebSocketWEBSOCKET_READ_FRAGMENT_END_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_READ_FRAGMENT_END_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_READ_FRAGMENT_END_PENDING> IISWebSocketWEBSOCKET_READ_FRAGMENT_END_PENDING
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_READ_FRAGMENT_END_PENDINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_READ_FRAGMENT_END_SUCCESS> IISWebSocketWEBSOCKET_READ_FRAGMENT_END_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_READ_FRAGMENT_END_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_READ_FRAGMENT_START> IISWebSocketWEBSOCKET_READ_FRAGMENT_START
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_READ_FRAGMENT_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_READ_IO_FAILED> IISWebSocketWEBSOCKET_READ_IO_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_READ_IO_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_START> IISWebSocketWEBSOCKET_START
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_WRITE_FRAGMENT_END_FAILURE> IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_WRITE_FRAGMENT_END_PENDING> IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_PENDING
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_PENDINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS> IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_WRITE_FRAGMENT_START> IISWebSocketWEBSOCKET_WRITE_FRAGMENT_START
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_WRITE_FRAGMENT_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<WEBSOCKET_WRITE_IO_FAILED> IISWebSocketWEBSOCKET_WRITE_IO_FAILED
        {
            add
            {
                source.RegisterEventTemplate(IISWebSocketWEBSOCKET_WRITE_IO_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<MODULE_SET_RESPONSE_ERROR_STATUS> RequestNotificationsMODULE_SET_RESPONSE_ERROR_STATUS
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsMODULE_SET_RESPONSE_ERROR_STATUSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<NOTIFY_MODULE_COMPLETION> RequestNotificationsNOTIFY_MODULE_COMPLETION
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsNOTIFY_MODULE_COMPLETIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<NOTIFY_MODULE_END> RequestNotificationsNOTIFY_MODULE_END
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsNOTIFY_MODULE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<NOTIFY_MODULE_START> RequestNotificationsNOTIFY_MODULE_START
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsNOTIFY_MODULE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<PRE_BEGIN_REQUEST_END> RequestNotificationsPRE_BEGIN_REQUEST_END
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsPRE_BEGIN_REQUEST_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<PRE_BEGIN_REQUEST_START> RequestNotificationsPRE_BEGIN_REQUEST_START
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsPRE_BEGIN_REQUEST_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<REQUEST_NOTIFICATION_EVENTS_ERROR> RequestNotificationsREQUEST_NOTIFICATION_EVENTS_ERROR
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsREQUEST_NOTIFICATION_EVENTS_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION> RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS> RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS
        {
            add
            {
                source.RegisterEventTemplate(RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AUTH_ANON_PASSWD_CHANGE_NEEDED IISAuthenticationAUTH_ANON_PASSWD_CHANGE_NEEDEDTemplate(Action<AUTH_ANON_PASSWD_CHANGE_NEEDED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_ANON_PASSWD_CHANGE_NEEDED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 24, "AUTH_ANON_PASSWD_CHANGE_NEEDED", ProviderGuid, ProviderName );
        }
        static private AUTH_BAD_BASIC_HEADER IISAuthenticationAUTH_BAD_BASIC_HEADERTemplate(Action<AUTH_BAD_BASIC_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_BAD_BASIC_HEADER(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 16, "AUTH_BAD_BASIC_HEADER", ProviderGuid, ProviderName );
        }
        static private AUTH_BASIC_LOGON_FAILED IISAuthenticationAUTH_BASIC_LOGON_FAILEDTemplate(Action<AUTH_BASIC_LOGON_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_BASIC_LOGON_FAILED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 17, "AUTH_BASIC_LOGON_FAILED", ProviderGuid, ProviderName );
        }
        static private AUTH_END IISAuthenticationAUTH_ENDTemplate(Action<AUTH_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_END(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 28, "AUTH_END", ProviderGuid, ProviderName );
        }
        static private AUTH_IISDIGEST_LOGON_FAILED IISAuthenticationAUTH_IISDIGEST_LOGON_FAILEDTemplate(Action<AUTH_IISDIGEST_LOGON_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_IISDIGEST_LOGON_FAILED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 19, "AUTH_IISDIGEST_LOGON_FAILED", ProviderGuid, ProviderName );
        }
        static private AUTH_INVALID_ANON_ACCOUNT IISAuthenticationAUTH_INVALID_ANON_ACCOUNTTemplate(Action<AUTH_INVALID_ANON_ACCOUNT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_INVALID_ANON_ACCOUNT(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 13, "AUTH_INVALID_ANON_ACCOUNT", ProviderGuid, ProviderName );
        }
        static private AUTH_KERBEROS_FAILED IISAuthenticationAUTH_KERBEROS_FAILEDTemplate(Action<AUTH_KERBEROS_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_KERBEROS_FAILED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 55, "AUTH_KERBEROS_FAILED", ProviderGuid, ProviderName );
        }
        static private AUTH_NTLM_NULL_SESSION IISAuthenticationAUTH_NTLM_NULL_SESSIONTemplate(Action<AUTH_NTLM_NULL_SESSION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_NTLM_NULL_SESSION(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 22, "AUTH_NTLM_NULL_SESSION", ProviderGuid, ProviderName );
        }
        static private AUTH_PASSPORT_LOGON_FAILED IISAuthenticationAUTH_PASSPORT_LOGON_FAILEDTemplate(Action<AUTH_PASSPORT_LOGON_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_PASSPORT_LOGON_FAILED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 20, "AUTH_PASSPORT_LOGON_FAILED", ProviderGuid, ProviderName );
        }
        static private AUTH_PASSWD_CHANGE_DISABLED IISAuthenticationAUTH_PASSWD_CHANGE_DISABLEDTemplate(Action<AUTH_PASSWD_CHANGE_DISABLED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_PASSWD_CHANGE_DISABLED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 15, "AUTH_PASSWD_CHANGE_DISABLED", ProviderGuid, ProviderName );
        }
        static private AUTH_PASSWD_CHANGE_NEEDED IISAuthenticationAUTH_PASSWD_CHANGE_NEEDEDTemplate(Action<AUTH_PASSWD_CHANGE_NEEDED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_PASSWD_CHANGE_NEEDED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 14, "AUTH_PASSWD_CHANGE_NEEDED", ProviderGuid, ProviderName );
        }
        static private AUTH_REQUEST_AUTH_TYPE IISAuthenticationAUTH_REQUEST_AUTH_TYPETemplate(Action<AUTH_REQUEST_AUTH_TYPE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_REQUEST_AUTH_TYPE(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 27, "AUTH_REQUEST_AUTH_TYPE", ProviderGuid, ProviderName );
        }
        static private AUTH_SSPI_CONTINUE_NEEDED IISAuthenticationAUTH_SSPI_CONTINUE_NEEDEDTemplate(Action<AUTH_SSPI_CONTINUE_NEEDED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_SSPI_CONTINUE_NEEDED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 23, "AUTH_SSPI_CONTINUE_NEEDED", ProviderGuid, ProviderName );
        }
        static private AUTH_SSPI_LOGON_FAILED IISAuthenticationAUTH_SSPI_LOGON_FAILEDTemplate(Action<AUTH_SSPI_LOGON_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_SSPI_LOGON_FAILED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 21, "AUTH_SSPI_LOGON_FAILED", ProviderGuid, ProviderName );
        }
        static private AUTH_START IISAuthenticationAUTH_STARTTemplate(Action<AUTH_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_START(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 10, "AUTH_START", ProviderGuid, ProviderName );
        }
        static private AUTH_SUCCEEDED IISAuthenticationAUTH_SUCCEEDEDTemplate(Action<AUTH_SUCCEEDED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_SUCCEEDED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 11, "AUTH_SUCCEEDED", ProviderGuid, ProviderName );
        }
        static private AUTH_TYPE_NOT_SUPPORTED IISAuthenticationAUTH_TYPE_NOT_SUPPORTEDTemplate(Action<AUTH_TYPE_NOT_SUPPORTED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_TYPE_NOT_SUPPORTED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 12, "AUTH_TYPE_NOT_SUPPORTED", ProviderGuid, ProviderName );
        }
        static private AUTH_WDIGEST_LOGON_FAILED IISAuthenticationAUTH_WDIGEST_LOGON_FAILEDTemplate(Action<AUTH_WDIGEST_LOGON_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AUTH_WDIGEST_LOGON_FAILED(action, 65535, 1, "IISAuthentication", IISAuthenticationTaskGuid, 18, "AUTH_WDIGEST_LOGON_FAILED", ProviderGuid, ProviderName );
        }
        static private FILE_CACHE_ACCESS_END IISCacheFILE_CACHE_ACCESS_ENDTemplate(Action<FILE_CACHE_ACCESS_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILE_CACHE_ACCESS_END(action, 65535, 10, "IISCache", IISCacheTaskGuid, 11, "FILE_CACHE_ACCESS_END", ProviderGuid, ProviderName );
        }
        static private FILE_CACHE_ACCESS_START IISCacheFILE_CACHE_ACCESS_STARTTemplate(Action<FILE_CACHE_ACCESS_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILE_CACHE_ACCESS_START(action, 65535, 10, "IISCache", IISCacheTaskGuid, 10, "FILE_CACHE_ACCESS_START", ProviderGuid, ProviderName );
        }
        static private FILE_CACHE_CREATE_FILE IISCacheFILE_CACHE_CREATE_FILETemplate(Action<FILE_CACHE_CREATE_FILE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILE_CACHE_CREATE_FILE(action, 65535, 10, "IISCache", IISCacheTaskGuid, 20, "FILE_CACHE_CREATE_FILE", ProviderGuid, ProviderName );
        }
        static private HTTPSYS_CACHEABLE IISCacheHTTPSYS_CACHEABLETemplate(Action<HTTPSYS_CACHEABLE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HTTPSYS_CACHEABLE(action, 65535, 10, "IISCache", IISCacheTaskGuid, 14, "HTTPSYS_CACHEABLE", ProviderGuid, ProviderName );
        }
        static private OUTPUT_CACHE_DISABLED IISCacheOUTPUT_CACHE_DISABLEDTemplate(Action<OUTPUT_CACHE_DISABLED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OUTPUT_CACHE_DISABLED(action, 65535, 10, "IISCache", IISCacheTaskGuid, 19, "OUTPUT_CACHE_DISABLED", ProviderGuid, ProviderName );
        }
        static private OUTPUT_CACHE_LOOKUP_END IISCacheOUTPUT_CACHE_LOOKUP_ENDTemplate(Action<OUTPUT_CACHE_LOOKUP_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OUTPUT_CACHE_LOOKUP_END(action, 65535, 10, "IISCache", IISCacheTaskGuid, 16, "OUTPUT_CACHE_LOOKUP_END", ProviderGuid, ProviderName );
        }
        static private OUTPUT_CACHE_LOOKUP_START IISCacheOUTPUT_CACHE_LOOKUP_STARTTemplate(Action<OUTPUT_CACHE_LOOKUP_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OUTPUT_CACHE_LOOKUP_START(action, 65535, 10, "IISCache", IISCacheTaskGuid, 15, "OUTPUT_CACHE_LOOKUP_START", ProviderGuid, ProviderName );
        }
        static private OUTPUT_CACHE_UPDATE_END IISCacheOUTPUT_CACHE_UPDATE_ENDTemplate(Action<OUTPUT_CACHE_UPDATE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OUTPUT_CACHE_UPDATE_END(action, 65535, 10, "IISCache", IISCacheTaskGuid, 18, "OUTPUT_CACHE_UPDATE_END", ProviderGuid, ProviderName );
        }
        static private OUTPUT_CACHE_UPDATE_START IISCacheOUTPUT_CACHE_UPDATE_STARTTemplate(Action<OUTPUT_CACHE_UPDATE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new OUTPUT_CACHE_UPDATE_START(action, 65535, 10, "IISCache", IISCacheTaskGuid, 17, "OUTPUT_CACHE_UPDATE_START", ProviderGuid, ProviderName );
        }
        static private URL_CACHE_ACCESS_END IISCacheURL_CACHE_ACCESS_ENDTemplate(Action<URL_CACHE_ACCESS_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URL_CACHE_ACCESS_END(action, 65535, 10, "IISCache", IISCacheTaskGuid, 13, "URL_CACHE_ACCESS_END", ProviderGuid, ProviderName );
        }
        static private URL_CACHE_ACCESS_START IISCacheURL_CACHE_ACCESS_STARTTemplate(Action<URL_CACHE_ACCESS_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new URL_CACHE_ACCESS_START(action, 65535, 10, "IISCache", IISCacheTaskGuid, 12, "URL_CACHE_ACCESS_START", ProviderGuid, ProviderName );
        }
        static private CGI_END IISCGICGI_ENDTemplate(Action<CGI_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_END(action, 65535, 6, "IISCGI", IISCGITaskGuid, 2, "CGI_END", ProviderGuid, ProviderName );
        }
        static private CGI_HEADERS_RECEIVED IISCGICGI_HEADERS_RECEIVEDTemplate(Action<CGI_HEADERS_RECEIVED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_HEADERS_RECEIVED(action, 65535, 6, "IISCGI", IISCGITaskGuid, 7, "CGI_HEADERS_RECEIVED", ProviderGuid, ProviderName );
        }
        static private CGI_LAUNCH IISCGICGI_LAUNCHTemplate(Action<CGI_LAUNCH> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_LAUNCH(action, 65535, 6, "IISCGI", IISCGITaskGuid, 3, "CGI_LAUNCH", ProviderGuid, ProviderName );
        }
        static private CGI_PREMATURE_TERMINATION IISCGICGI_PREMATURE_TERMINATIONTemplate(Action<CGI_PREMATURE_TERMINATION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_PREMATURE_TERMINATION(action, 65535, 6, "IISCGI", IISCGITaskGuid, 5, "CGI_PREMATURE_TERMINATION", ProviderGuid, ProviderName );
        }
        static private CGI_REQUEST_ENTITY_START IISCGICGI_REQUEST_ENTITY_STARTTemplate(Action<CGI_REQUEST_ENTITY_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_REQUEST_ENTITY_START(action, 65535, 6, "IISCGI", IISCGITaskGuid, 6, "CGI_REQUEST_ENTITY_START", ProviderGuid, ProviderName );
        }
        static private CGI_START IISCGICGI_STARTTemplate(Action<CGI_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_START(action, 65535, 6, "IISCGI", IISCGITaskGuid, 1, "CGI_START", ProviderGuid, ProviderName );
        }
        static private CGI_TIMEOUT IISCGICGI_TIMEOUTTemplate(Action<CGI_TIMEOUT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGI_TIMEOUT(action, 65535, 6, "IISCGI", IISCGITaskGuid, 4, "CGI_TIMEOUT", ProviderGuid, ProviderName );
        }
        static private DYNAMIC_COMPRESSION_DO IISCompressionDYNAMIC_COMPRESSION_DOTemplate(Action<DYNAMIC_COMPRESSION_DO> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DYNAMIC_COMPRESSION_DO(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 9, "DYNAMIC_COMPRESSION_DO", ProviderGuid, ProviderName );
        }
        static private DYNAMIC_COMPRESSION_END IISCompressionDYNAMIC_COMPRESSION_ENDTemplate(Action<DYNAMIC_COMPRESSION_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DYNAMIC_COMPRESSION_END(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 10, "DYNAMIC_COMPRESSION_END", ProviderGuid, ProviderName );
        }
        static private DYNAMIC_COMPRESSION_NOT_SUCCESS IISCompressionDYNAMIC_COMPRESSION_NOT_SUCCESSTemplate(Action<DYNAMIC_COMPRESSION_NOT_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DYNAMIC_COMPRESSION_NOT_SUCCESS(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 8, "DYNAMIC_COMPRESSION_NOT_SUCCESS", ProviderGuid, ProviderName );
        }
        static private DYNAMIC_COMPRESSION_START IISCompressionDYNAMIC_COMPRESSION_STARTTemplate(Action<DYNAMIC_COMPRESSION_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DYNAMIC_COMPRESSION_START(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 6, "DYNAMIC_COMPRESSION_START", ProviderGuid, ProviderName );
        }
        static private DYNAMIC_COMPRESSION_SUCCESS IISCompressionDYNAMIC_COMPRESSION_SUCCESSTemplate(Action<DYNAMIC_COMPRESSION_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DYNAMIC_COMPRESSION_SUCCESS(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 7, "DYNAMIC_COMPRESSION_SUCCESS", ProviderGuid, ProviderName );
        }
        static private STATIC_COMPRESSION_CREATE_END IISCompressionSTATIC_COMPRESSION_CREATE_ENDTemplate(Action<STATIC_COMPRESSION_CREATE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new STATIC_COMPRESSION_CREATE_END(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 5, "STATIC_COMPRESSION_CREATE_END", ProviderGuid, ProviderName );
        }
        static private STATIC_COMPRESSION_CREATE_START IISCompressionSTATIC_COMPRESSION_CREATE_STARTTemplate(Action<STATIC_COMPRESSION_CREATE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new STATIC_COMPRESSION_CREATE_START(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 4, "STATIC_COMPRESSION_CREATE_START", ProviderGuid, ProviderName );
        }
        static private STATIC_COMPRESSION_END IISCompressionSTATIC_COMPRESSION_ENDTemplate(Action<STATIC_COMPRESSION_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new STATIC_COMPRESSION_END(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 11, "STATIC_COMPRESSION_END", ProviderGuid, ProviderName );
        }
        static private STATIC_COMPRESSION_NOT_SUCCESS IISCompressionSTATIC_COMPRESSION_NOT_SUCCESSTemplate(Action<STATIC_COMPRESSION_NOT_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new STATIC_COMPRESSION_NOT_SUCCESS(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 3, "STATIC_COMPRESSION_NOT_SUCCESS", ProviderGuid, ProviderName );
        }
        static private STATIC_COMPRESSION_START IISCompressionSTATIC_COMPRESSION_STARTTemplate(Action<STATIC_COMPRESSION_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new STATIC_COMPRESSION_START(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 1, "STATIC_COMPRESSION_START", ProviderGuid, ProviderName );
        }
        static private STATIC_COMPRESSION_SUCCESS IISCompressionSTATIC_COMPRESSION_SUCCESSTemplate(Action<STATIC_COMPRESSION_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new STATIC_COMPRESSION_SUCCESS(action, 65535, 9, "IISCompression", IISCompressionTaskGuid, 2, "STATIC_COMPRESSION_SUCCESS", ProviderGuid, ProviderName );
        }
        static private CGIF_ACTIVITY_TIMEOUT IISFastCGICGIF_ACTIVITY_TIMEOUTTemplate(Action<CGIF_ACTIVITY_TIMEOUT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_ACTIVITY_TIMEOUT(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 1, "CGIF_ACTIVITY_TIMEOUT", ProviderGuid, ProviderName );
        }
        static private CGIF_ADD_JOB_OBJECT_FAIL IISFastCGICGIF_ADD_JOB_OBJECT_FAILTemplate(Action<CGIF_ADD_JOB_OBJECT_FAIL> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_ADD_JOB_OBJECT_FAIL(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 7, "CGIF_ADD_JOB_OBJECT_FAIL", ProviderGuid, ProviderName );
        }
        static private CGIF_APPMGR_SHUTDOWN IISFastCGICGIF_APPMGR_SHUTDOWNTemplate(Action<CGIF_APPMGR_SHUTDOWN> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_APPMGR_SHUTDOWN(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 8, "CGIF_APPMGR_SHUTDOWN", ProviderGuid, ProviderName );
        }
        static private CGIF_ASSIGN_PROCESS IISFastCGICGIF_ASSIGN_PROCESSTemplate(Action<CGIF_ASSIGN_PROCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_ASSIGN_PROCESS(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 17, "CGIF_ASSIGN_PROCESS", ProviderGuid, ProviderName );
        }
        static private CGIF_END IISFastCGICGIF_ENDTemplate(Action<CGIF_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_END(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 19, "CGIF_END", ProviderGuid, ProviderName );
        }
        static private CGIF_PATH_NOT_FOUND IISFastCGICGIF_PATH_NOT_FOUNDTemplate(Action<CGIF_PATH_NOT_FOUND> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_PATH_NOT_FOUND(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 5, "CGIF_PATH_NOT_FOUND", ProviderGuid, ProviderName );
        }
        static private CGIF_QUEUE_FULL IISFastCGICGIF_QUEUE_FULLTemplate(Action<CGIF_QUEUE_FULL> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_QUEUE_FULL(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 9, "CGIF_QUEUE_FULL", ProviderGuid, ProviderName );
        }
        static private CGIF_QUEUE_REQUEST IISFastCGICGIF_QUEUE_REQUESTTemplate(Action<CGIF_QUEUE_REQUEST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_QUEUE_REQUEST(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 16, "CGIF_QUEUE_REQUEST", ProviderGuid, ProviderName );
        }
        static private CGIF_RAPID_FAILURE_PROTECTION IISFastCGICGIF_RAPID_FAILURE_PROTECTIONTemplate(Action<CGIF_RAPID_FAILURE_PROTECTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_RAPID_FAILURE_PROTECTION(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 4, "CGIF_RAPID_FAILURE_PROTECTION", ProviderGuid, ProviderName );
        }
        static private CGIF_REQUEST_TIMEOUT IISFastCGICGIF_REQUEST_TIMEOUTTemplate(Action<CGIF_REQUEST_TIMEOUT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_REQUEST_TIMEOUT(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 2, "CGIF_REQUEST_TIMEOUT", ProviderGuid, ProviderName );
        }
        static private CGIF_RESPONSE_WRITTEN IISFastCGICGIF_RESPONSE_WRITTENTemplate(Action<CGIF_RESPONSE_WRITTEN> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_RESPONSE_WRITTEN(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 11, "CGIF_RESPONSE_WRITTEN", ProviderGuid, ProviderName );
        }
        static private CGIF_SCRIPT_PROCESSOR_MISSING IISFastCGICGIF_SCRIPT_PROCESSOR_MISSINGTemplate(Action<CGIF_SCRIPT_PROCESSOR_MISSING> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_SCRIPT_PROCESSOR_MISSING(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 6, "CGIF_SCRIPT_PROCESSOR_MISSING", ProviderGuid, ProviderName );
        }
        static private CGIF_START IISFastCGICGIF_STARTTemplate(Action<CGIF_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_START(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 18, "CGIF_START", ProviderGuid, ProviderName );
        }
        static private CGIF_TRACE_ERROR IISFastCGICGIF_TRACE_ERRORTemplate(Action<CGIF_TRACE_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_TRACE_ERROR(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 13, "CGIF_TRACE_ERROR", ProviderGuid, ProviderName );
        }
        static private CGIF_TRACE_INFO IISFastCGICGIF_TRACE_INFOTemplate(Action<CGIF_TRACE_INFO> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_TRACE_INFO(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 15, "CGIF_TRACE_INFO", ProviderGuid, ProviderName );
        }
        static private CGIF_TRACE_WARNING IISFastCGICGIF_TRACE_WARNINGTemplate(Action<CGIF_TRACE_WARNING> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_TRACE_WARNING(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 14, "CGIF_TRACE_WARNING", ProviderGuid, ProviderName );
        }
        static private CGIF_UNEXPECTED_EXIT IISFastCGICGIF_UNEXPECTED_EXITTemplate(Action<CGIF_UNEXPECTED_EXIT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_UNEXPECTED_EXIT(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 3, "CGIF_UNEXPECTED_EXIT", ProviderGuid, ProviderName );
        }
        static private CGIF_UNKNOWN_ERROR IISFastCGICGIF_UNKNOWN_ERRORTemplate(Action<CGIF_UNKNOWN_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_UNKNOWN_ERROR(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 10, "CGIF_UNKNOWN_ERROR", ProviderGuid, ProviderName );
        }
        static private CGIF_WAITING_FOR_RESPONSE IISFastCGICGIF_WAITING_FOR_RESPONSETemplate(Action<CGIF_WAITING_FOR_RESPONSE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new CGIF_WAITING_FOR_RESPONSE(action, 65535, 7, "IISFastCGI", IISFastCGITaskGuid, 12, "CGIF_WAITING_FOR_RESPONSE", ProviderGuid, ProviderName );
        }
        static private FILTER_ACCESS_DENIED_END IISFilterFILTER_ACCESS_DENIED_ENDTemplate(Action<FILTER_ACCESS_DENIED_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_ACCESS_DENIED_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 30, "FILTER_ACCESS_DENIED_END", ProviderGuid, ProviderName );
        }
        static private FILTER_ACCESS_DENIED_START IISFilterFILTER_ACCESS_DENIED_STARTTemplate(Action<FILTER_ACCESS_DENIED_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_ACCESS_DENIED_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 29, "FILTER_ACCESS_DENIED_START", ProviderGuid, ProviderName );
        }
        static private FILTER_ADD_REQ_HEADER IISFilterFILTER_ADD_REQ_HEADERTemplate(Action<FILTER_ADD_REQ_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_ADD_REQ_HEADER(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 32, "FILTER_ADD_REQ_HEADER", ProviderGuid, ProviderName );
        }
        static private FILTER_ADD_RESP_HEADER IISFilterFILTER_ADD_RESP_HEADERTemplate(Action<FILTER_ADD_RESP_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_ADD_RESP_HEADER(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 34, "FILTER_ADD_RESP_HEADER", ProviderGuid, ProviderName );
        }
        static private FILTER_AUTH_COMPLETE_END IISFilterFILTER_AUTH_COMPLETE_ENDTemplate(Action<FILTER_AUTH_COMPLETE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_AUTH_COMPLETE_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 20, "FILTER_AUTH_COMPLETE_END", ProviderGuid, ProviderName );
        }
        static private FILTER_AUTH_COMPLETE_START IISFilterFILTER_AUTH_COMPLETE_STARTTemplate(Action<FILTER_AUTH_COMPLETE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_AUTH_COMPLETE_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 19, "FILTER_AUTH_COMPLETE_START", ProviderGuid, ProviderName );
        }
        static private FILTER_AUTHENTICATION_END IISFilterFILTER_AUTHENTICATION_ENDTemplate(Action<FILTER_AUTHENTICATION_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_AUTHENTICATION_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 18, "FILTER_AUTHENTICATION_END", ProviderGuid, ProviderName );
        }
        static private FILTER_AUTHENTICATION_START IISFilterFILTER_AUTHENTICATION_STARTTemplate(Action<FILTER_AUTHENTICATION_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_AUTHENTICATION_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 17, "FILTER_AUTHENTICATION_START", ProviderGuid, ProviderName );
        }
        static private FILTER_END IISFilterFILTER_ENDTemplate(Action<FILTER_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 2, "FILTER_END", ProviderGuid, ProviderName );
        }
        static private FILTER_END_OF_REQUEST_END IISFilterFILTER_END_OF_REQUEST_ENDTemplate(Action<FILTER_END_OF_REQUEST_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_END_OF_REQUEST_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 24, "FILTER_END_OF_REQUEST_END", ProviderGuid, ProviderName );
        }
        static private FILTER_END_OF_REQUEST_START IISFilterFILTER_END_OF_REQUEST_STARTTemplate(Action<FILTER_END_OF_REQUEST_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_END_OF_REQUEST_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 23, "FILTER_END_OF_REQUEST_START", ProviderGuid, ProviderName );
        }
        static private FILTER_ERROR IISFilterFILTER_ERRORTemplate(Action<FILTER_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_ERROR(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 12, "FILTER_ERROR", ProviderGuid, ProviderName );
        }
        static private FILTER_LOG_END IISFilterFILTER_LOG_ENDTemplate(Action<FILTER_LOG_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_LOG_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 26, "FILTER_LOG_END", ProviderGuid, ProviderName );
        }
        static private FILTER_LOG_START IISFilterFILTER_LOG_STARTTemplate(Action<FILTER_LOG_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_LOG_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 25, "FILTER_LOG_START", ProviderGuid, ProviderName );
        }
        static private FILTER_PREPROC_HEADERS_END IISFilterFILTER_PREPROC_HEADERS_ENDTemplate(Action<FILTER_PREPROC_HEADERS_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_PREPROC_HEADERS_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 14, "FILTER_PREPROC_HEADERS_END", ProviderGuid, ProviderName );
        }
        static private FILTER_PREPROC_HEADERS_START IISFilterFILTER_PREPROC_HEADERS_STARTTemplate(Action<FILTER_PREPROC_HEADERS_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_PREPROC_HEADERS_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 13, "FILTER_PREPROC_HEADERS_START", ProviderGuid, ProviderName );
        }
        static private FILTER_SEND_RAW_DATA_END IISFilterFILTER_SEND_RAW_DATA_ENDTemplate(Action<FILTER_SEND_RAW_DATA_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_SEND_RAW_DATA_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 28, "FILTER_SEND_RAW_DATA_END", ProviderGuid, ProviderName );
        }
        static private FILTER_SEND_RAW_DATA_START IISFilterFILTER_SEND_RAW_DATA_STARTTemplate(Action<FILTER_SEND_RAW_DATA_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_SEND_RAW_DATA_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 27, "FILTER_SEND_RAW_DATA_START", ProviderGuid, ProviderName );
        }
        static private FILTER_SEND_RESPONSE_END IISFilterFILTER_SEND_RESPONSE_ENDTemplate(Action<FILTER_SEND_RESPONSE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_SEND_RESPONSE_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 22, "FILTER_SEND_RESPONSE_END", ProviderGuid, ProviderName );
        }
        static private FILTER_SEND_RESPONSE_START IISFilterFILTER_SEND_RESPONSE_STARTTemplate(Action<FILTER_SEND_RESPONSE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_SEND_RESPONSE_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 21, "FILTER_SEND_RESPONSE_START", ProviderGuid, ProviderName );
        }
        static private FILTER_SET_REQ_HEADER IISFilterFILTER_SET_REQ_HEADERTemplate(Action<FILTER_SET_REQ_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_SET_REQ_HEADER(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 31, "FILTER_SET_REQ_HEADER", ProviderGuid, ProviderName );
        }
        static private FILTER_SET_RESP_HEADER IISFilterFILTER_SET_RESP_HEADERTemplate(Action<FILTER_SET_RESP_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_SET_RESP_HEADER(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 33, "FILTER_SET_RESP_HEADER", ProviderGuid, ProviderName );
        }
        static private FILTER_START IISFilterFILTER_STARTTemplate(Action<FILTER_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 1, "FILTER_START", ProviderGuid, ProviderName );
        }
        static private FILTER_URL_MAP_END IISFilterFILTER_URL_MAP_ENDTemplate(Action<FILTER_URL_MAP_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_URL_MAP_END(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 16, "FILTER_URL_MAP_END", ProviderGuid, ProviderName );
        }
        static private FILTER_URL_MAP_START IISFilterFILTER_URL_MAP_STARTTemplate(Action<FILTER_URL_MAP_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new FILTER_URL_MAP_START(action, 65535, 3, "IISFilter", IISFilterTaskGuid, 15, "FILTER_URL_MAP_START", ProviderGuid, ProviderName );
        }
        static private GENERAL_CGI_HANDLER IISGeneralGENERAL_CGI_HANDLERTemplate(Action<GENERAL_CGI_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_CGI_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 11, "GENERAL_CGI_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_CHILD_REQUEST_END IISGeneralGENERAL_CHILD_REQUEST_ENDTemplate(Action<GENERAL_CHILD_REQUEST_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_CHILD_REQUEST_END(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 32, "GENERAL_CHILD_REQUEST_END", ProviderGuid, ProviderName );
        }
        static private GENERAL_CHILD_REQUEST_START IISGeneralGENERAL_CHILD_REQUEST_STARTTemplate(Action<GENERAL_CHILD_REQUEST_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_CHILD_REQUEST_START(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 31, "GENERAL_CHILD_REQUEST_START", ProviderGuid, ProviderName );
        }
        static private GENERAL_CONFIG_CHANGE_NOTIFICATION IISGeneralGENERAL_CONFIG_CHANGE_NOTIFICATIONTemplate(Action<GENERAL_CONFIG_CHANGE_NOTIFICATION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_CONFIG_CHANGE_NOTIFICATION(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 40, "GENERAL_CONFIG_CHANGE_NOTIFICATION", ProviderGuid, ProviderName );
        }
        static private GENERAL_DAV_HANDLER IISGeneralGENERAL_DAV_HANDLERTemplate(Action<GENERAL_DAV_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_DAV_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 15, "GENERAL_DAV_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_ENDPOINT_INFORMATION IISGeneralGENERAL_ENDPOINT_INFORMATIONTemplate(Action<GENERAL_ENDPOINT_INFORMATION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_ENDPOINT_INFORMATION(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 55, "GENERAL_ENDPOINT_INFORMATION", ProviderGuid, ProviderName );
        }
        static private GENERAL_FILE_CHANGE_NOTIFICATION IISGeneralGENERAL_FILE_CHANGE_NOTIFICATIONTemplate(Action<GENERAL_FILE_CHANGE_NOTIFICATION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_FILE_CHANGE_NOTIFICATION(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 39, "GENERAL_FILE_CHANGE_NOTIFICATION", ProviderGuid, ProviderName );
        }
        static private GENERAL_FLUSH_RESPONSE_END IISGeneralGENERAL_FLUSH_RESPONSE_ENDTemplate(Action<GENERAL_FLUSH_RESPONSE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_FLUSH_RESPONSE_END(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 36, "GENERAL_FLUSH_RESPONSE_END", ProviderGuid, ProviderName );
        }
        static private GENERAL_FLUSH_RESPONSE_START IISGeneralGENERAL_FLUSH_RESPONSE_STARTTemplate(Action<GENERAL_FLUSH_RESPONSE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_FLUSH_RESPONSE_START(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 35, "GENERAL_FLUSH_RESPONSE_START", ProviderGuid, ProviderName );
        }
        static private GENERAL_GET_URL_METADATA IISGeneralGENERAL_GET_URL_METADATATemplate(Action<GENERAL_GET_URL_METADATA> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_GET_URL_METADATA(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 30, "GENERAL_GET_URL_METADATA", ProviderGuid, ProviderName );
        }
        static private GENERAL_ISAPI_HANDLER IISGeneralGENERAL_ISAPI_HANDLERTemplate(Action<GENERAL_ISAPI_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_ISAPI_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 12, "GENERAL_ISAPI_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_MAP_HANDLER IISGeneralGENERAL_MAP_HANDLERTemplate(Action<GENERAL_MAP_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_MAP_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 34, "GENERAL_MAP_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_MODULE_FACTORY_FAILED IISGeneralGENERAL_MODULE_FACTORY_FAILEDTemplate(Action<GENERAL_MODULE_FACTORY_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_MODULE_FACTORY_FAILED(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 54, "GENERAL_MODULE_FACTORY_FAILED", ProviderGuid, ProviderName );
        }
        static private GENERAL_NOT_SEND_CUSTOM_ERROR IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORTemplate(Action<GENERAL_NOT_SEND_CUSTOM_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_NOT_SEND_CUSTOM_ERROR(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 52, "GENERAL_NOT_SEND_CUSTOM_ERROR", ProviderGuid, ProviderName );
        }
        static private GENERAL_OOP_ISAPI_HANDLER IISGeneralGENERAL_OOP_ISAPI_HANDLERTemplate(Action<GENERAL_OOP_ISAPI_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_OOP_ISAPI_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 13, "GENERAL_OOP_ISAPI_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_OPTIONS_HANDLER IISGeneralGENERAL_OPTIONS_HANDLERTemplate(Action<GENERAL_OPTIONS_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_OPTIONS_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 16, "GENERAL_OPTIONS_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_READ_ENTITY_END IISGeneralGENERAL_READ_ENTITY_ENDTemplate(Action<GENERAL_READ_ENTITY_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_READ_ENTITY_END(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 38, "GENERAL_READ_ENTITY_END", ProviderGuid, ProviderName );
        }
        static private GENERAL_READ_ENTITY_START IISGeneralGENERAL_READ_ENTITY_STARTTemplate(Action<GENERAL_READ_ENTITY_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_READ_ENTITY_START(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 37, "GENERAL_READ_ENTITY_START", ProviderGuid, ProviderName );
        }
        static private GENERAL_REDIRECTION_HANDLER IISGeneralGENERAL_REDIRECTION_HANDLERTemplate(Action<GENERAL_REDIRECTION_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_REDIRECTION_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 14, "GENERAL_REDIRECTION_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_REQUEST_END IISGeneralGENERAL_REQUEST_ENDTemplate(Action<GENERAL_REQUEST_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_REQUEST_END(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 2, "GENERAL_REQUEST_END", ProviderGuid, ProviderName );
        }
        static private GENERAL_REQUEST_ENTITY IISGeneralGENERAL_REQUEST_ENTITYTemplate(Action<GENERAL_REQUEST_ENTITY> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_REQUEST_ENTITY(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 51, "GENERAL_REQUEST_ENTITY", ProviderGuid, ProviderName );
        }
        static private GENERAL_REQUEST_HEADERS IISGeneralGENERAL_REQUEST_HEADERSTemplate(Action<GENERAL_REQUEST_HEADERS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_REQUEST_HEADERS(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 50, "GENERAL_REQUEST_HEADERS", ProviderGuid, ProviderName );
        }
        static private GENERAL_REQUEST_START IISGeneralGENERAL_REQUEST_STARTTemplate(Action<GENERAL_REQUEST_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_REQUEST_START(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 1, "GENERAL_REQUEST_START", ProviderGuid, ProviderName );
        }
        static private GENERAL_RESPONSE_ENTITY_BUFFER IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERTemplate(Action<GENERAL_RESPONSE_ENTITY_BUFFER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_RESPONSE_ENTITY_BUFFER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 49, "GENERAL_RESPONSE_ENTITY_BUFFER", ProviderGuid, ProviderName );
        }
        static private GENERAL_RESPONSE_ENTITY_FILE IISGeneralGENERAL_RESPONSE_ENTITY_FILETemplate(Action<GENERAL_RESPONSE_ENTITY_FILE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_RESPONSE_ENTITY_FILE(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 48, "GENERAL_RESPONSE_ENTITY_FILE", ProviderGuid, ProviderName );
        }
        static private GENERAL_RESPONSE_HEADERS IISGeneralGENERAL_RESPONSE_HEADERSTemplate(Action<GENERAL_RESPONSE_HEADERS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_RESPONSE_HEADERS(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 47, "GENERAL_RESPONSE_HEADERS", ProviderGuid, ProviderName );
        }
        static private GENERAL_SEND_CUSTOM_ERROR IISGeneralGENERAL_SEND_CUSTOM_ERRORTemplate(Action<GENERAL_SEND_CUSTOM_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_SEND_CUSTOM_ERROR(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 33, "GENERAL_SEND_CUSTOM_ERROR", ProviderGuid, ProviderName );
        }
        static private GENERAL_SET_REQUEST_HEADER IISGeneralGENERAL_SET_REQUEST_HEADERTemplate(Action<GENERAL_SET_REQUEST_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_SET_REQUEST_HEADER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 53, "GENERAL_SET_REQUEST_HEADER", ProviderGuid, ProviderName );
        }
        static private GENERAL_SET_RESPONSE_HEADER IISGeneralGENERAL_SET_RESPONSE_HEADERTemplate(Action<GENERAL_SET_RESPONSE_HEADER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_SET_RESPONSE_HEADER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 56, "GENERAL_SET_RESPONSE_HEADER", ProviderGuid, ProviderName );
        }
        static private GENERAL_STATIC_FILE_HANDLER IISGeneralGENERAL_STATIC_FILE_HANDLERTemplate(Action<GENERAL_STATIC_FILE_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_STATIC_FILE_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 10, "GENERAL_STATIC_FILE_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_TRACE_HANDLER IISGeneralGENERAL_TRACE_HANDLERTemplate(Action<GENERAL_TRACE_HANDLER> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_TRACE_HANDLER(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 17, "GENERAL_TRACE_HANDLER", ProviderGuid, ProviderName );
        }
        static private GENERAL_URL_CHANGED IISGeneralGENERAL_URL_CHANGEDTemplate(Action<GENERAL_URL_CHANGED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_URL_CHANGED(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 42, "GENERAL_URL_CHANGED", ProviderGuid, ProviderName );
        }
        static private GENERAL_VIRTUAL_MODULE_UNRESOLVED IISGeneralGENERAL_VIRTUAL_MODULE_UNRESOLVEDTemplate(Action<GENERAL_VIRTUAL_MODULE_UNRESOLVED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new GENERAL_VIRTUAL_MODULE_UNRESOLVED(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 41, "GENERAL_VIRTUAL_MODULE_UNRESOLVED", ProviderGuid, ProviderName );
        }
        static private HANDLER_CHANGED IISGeneralHANDLER_CHANGEDTemplate(Action<HANDLER_CHANGED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HANDLER_CHANGED(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 43, "HANDLER_CHANGED", ProviderGuid, ProviderName );
        }
        static private HANDLER_PRECONDITION_NOT_MATCH IISGeneralHANDLER_PRECONDITION_NOT_MATCHTemplate(Action<HANDLER_PRECONDITION_NOT_MATCH> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new HANDLER_PRECONDITION_NOT_MATCH(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 46, "HANDLER_PRECONDITION_NOT_MATCH", ProviderGuid, ProviderName );
        }
        static private MODULE_PRECONDITION_NOT_MATCH IISGeneralMODULE_PRECONDITION_NOT_MATCHTemplate(Action<MODULE_PRECONDITION_NOT_MATCH> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_PRECONDITION_NOT_MATCH(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 45, "MODULE_PRECONDITION_NOT_MATCH", ProviderGuid, ProviderName );
        }
        static private USER_SET IISGeneralUSER_SETTemplate(Action<USER_SET> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new USER_SET(action, 65535, 0, "IISGeneral", IISGeneralTaskGuid, 44, "USER_SET", ProviderGuid, ProviderName );
        }
        static private ISAPI_END IISISAPIISAPI_ENDTemplate(Action<ISAPI_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ISAPI_END(action, 65535, 5, "IISISAPI", IISISAPITaskGuid, 2, "ISAPI_END", ProviderGuid, ProviderName );
        }
        static private ISAPI_START IISISAPIISAPI_STARTTemplate(Action<ISAPI_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ISAPI_START(action, 65535, 5, "IISISAPI", IISISAPITaskGuid, 1, "ISAPI_START", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_CRITICAL_ERROR IISModuleEventsMODULE_EVENTS_MODULE_CRITICAL_ERRORTemplate(Action<MODULE_EVENTS_MODULE_CRITICAL_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_CRITICAL_ERROR(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 3, "MODULE_EVENTS_MODULE_CRITICAL_ERROR", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_END IISModuleEventsMODULE_EVENTS_MODULE_ENDTemplate(Action<MODULE_EVENTS_MODULE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_END(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 2, "MODULE_EVENTS_MODULE_END", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_ERROR IISModuleEventsMODULE_EVENTS_MODULE_ERRORTemplate(Action<MODULE_EVENTS_MODULE_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_ERROR(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 4, "MODULE_EVENTS_MODULE_ERROR", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_INFORMATION IISModuleEventsMODULE_EVENTS_MODULE_INFORMATIONTemplate(Action<MODULE_EVENTS_MODULE_INFORMATION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_INFORMATION(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 6, "MODULE_EVENTS_MODULE_INFORMATION", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_START IISModuleEventsMODULE_EVENTS_MODULE_STARTTemplate(Action<MODULE_EVENTS_MODULE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_START(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 1, "MODULE_EVENTS_MODULE_START", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_VERBOSE IISModuleEventsMODULE_EVENTS_MODULE_VERBOSETemplate(Action<MODULE_EVENTS_MODULE_VERBOSE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_VERBOSE(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 7, "MODULE_EVENTS_MODULE_VERBOSE", ProviderGuid, ProviderName );
        }
        static private MODULE_EVENTS_MODULE_WARNING IISModuleEventsMODULE_EVENTS_MODULE_WARNINGTemplate(Action<MODULE_EVENTS_MODULE_WARNING> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_EVENTS_MODULE_WARNING(action, 65535, 12, "IISModuleEvents", IISModuleEventsTaskGuid, 5, "MODULE_EVENTS_MODULE_WARNING", ProviderGuid, ProviderName );
        }
        static private SEC_DENIED_BY_ACCESS_FLAGS IISSecuritySEC_DENIED_BY_ACCESS_FLAGSTemplate(Action<SEC_DENIED_BY_ACCESS_FLAGS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_DENIED_BY_ACCESS_FLAGS(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 18, "SEC_DENIED_BY_ACCESS_FLAGS", ProviderGuid, ProviderName );
        }
        static private SEC_DENIED_BY_CGI_RESTRICTION IISSecuritySEC_DENIED_BY_CGI_RESTRICTIONTemplate(Action<SEC_DENIED_BY_CGI_RESTRICTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_DENIED_BY_CGI_RESTRICTION(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 17, "SEC_DENIED_BY_CGI_RESTRICTION", ProviderGuid, ProviderName );
        }
        static private SEC_DENIED_BY_ISAPI_RESTRICTION IISSecuritySEC_DENIED_BY_ISAPI_RESTRICTIONTemplate(Action<SEC_DENIED_BY_ISAPI_RESTRICTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_DENIED_BY_ISAPI_RESTRICTION(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 16, "SEC_DENIED_BY_ISAPI_RESTRICTION", ProviderGuid, ProviderName );
        }
        static private SEC_DENIED_BY_MIMEMAP IISSecuritySEC_DENIED_BY_MIMEMAPTemplate(Action<SEC_DENIED_BY_MIMEMAP> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_DENIED_BY_MIMEMAP(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 15, "SEC_DENIED_BY_MIMEMAP", ProviderGuid, ProviderName );
        }
        static private SEC_FILE_ACCESS_DENIED IISSecuritySEC_FILE_ACCESS_DENIEDTemplate(Action<SEC_FILE_ACCESS_DENIED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_FILE_ACCESS_DENIED(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 14, "SEC_FILE_ACCESS_DENIED", ProviderGuid, ProviderName );
        }
        static private SEC_ILLEGAL_SHORT_FILENAME IISSecuritySEC_ILLEGAL_SHORT_FILENAMETemplate(Action<SEC_ILLEGAL_SHORT_FILENAME> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_ILLEGAL_SHORT_FILENAME(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 10, "SEC_ILLEGAL_SHORT_FILENAME", ProviderGuid, ProviderName );
        }
        static private SEC_REJECTED_HOSTNAME IISSecuritySEC_REJECTED_HOSTNAMETemplate(Action<SEC_REJECTED_HOSTNAME> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_REJECTED_HOSTNAME(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 12, "SEC_REJECTED_HOSTNAME", ProviderGuid, ProviderName );
        }
        static private SEC_REJECTED_IP IISSecuritySEC_REJECTED_IPTemplate(Action<SEC_REJECTED_IP> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_REJECTED_IP(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 11, "SEC_REJECTED_IP", ProviderGuid, ProviderName );
        }
        static private SEC_REQUIRE_SSL_128 IISSecuritySEC_REQUIRE_SSL_128Template(Action<SEC_REQUIRE_SSL_128> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new SEC_REQUIRE_SSL_128(action, 65535, 2, "IISSecurity", IISSecurityTaskGuid, 13, "SEC_REQUIRE_SSL_128", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_APPLICATION_CLOSE_CONNECTION IISWebSocketWEBSOCKET_APPLICATION_CLOSE_CONNECTIONTemplate(Action<WEBSOCKET_APPLICATION_CLOSE_CONNECTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_APPLICATION_CLOSE_CONNECTION(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 13, "WEBSOCKET_APPLICATION_CLOSE_CONNECTION", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_CLOSE_RECEIVED IISWebSocketWEBSOCKET_CLOSE_RECEIVEDTemplate(Action<WEBSOCKET_CLOSE_RECEIVED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_CLOSE_RECEIVED(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 17, "WEBSOCKET_CLOSE_RECEIVED", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_CLOSE_SEND_FAILURE IISWebSocketWEBSOCKET_CLOSE_SEND_FAILURETemplate(Action<WEBSOCKET_CLOSE_SEND_FAILURE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_CLOSE_SEND_FAILURE(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 20, "WEBSOCKET_CLOSE_SEND_FAILURE", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_CLOSE_SEND_START IISWebSocketWEBSOCKET_CLOSE_SEND_STARTTemplate(Action<WEBSOCKET_CLOSE_SEND_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_CLOSE_SEND_START(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 18, "WEBSOCKET_CLOSE_SEND_START", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_CLOSE_SEND_SUCCESS IISWebSocketWEBSOCKET_CLOSE_SEND_SUCCESSTemplate(Action<WEBSOCKET_CLOSE_SEND_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_CLOSE_SEND_SUCCESS(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 19, "WEBSOCKET_CLOSE_SEND_SUCCESS", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_END_FAILURE IISWebSocketWEBSOCKET_END_FAILURETemplate(Action<WEBSOCKET_END_FAILURE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_END_FAILURE(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 4, "WEBSOCKET_END_FAILURE", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_END_SUCCESS IISWebSocketWEBSOCKET_END_SUCCESSTemplate(Action<WEBSOCKET_END_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_END_SUCCESS(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 3, "WEBSOCKET_END_SUCCESS", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_INITIALIZE_NOT_SUCCESS IISWebSocketWEBSOCKET_INITIALIZE_NOT_SUCCESSTemplate(Action<WEBSOCKET_INITIALIZE_NOT_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_INITIALIZE_NOT_SUCCESS(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 1, "WEBSOCKET_INITIALIZE_NOT_SUCCESS", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_MODULE_CLOSE_CONNECTION IISWebSocketWEBSOCKET_MODULE_CLOSE_CONNECTIONTemplate(Action<WEBSOCKET_MODULE_CLOSE_CONNECTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_MODULE_CLOSE_CONNECTION(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 14, "WEBSOCKET_MODULE_CLOSE_CONNECTION", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_READ_FRAGMENT_END_FAILURE IISWebSocketWEBSOCKET_READ_FRAGMENT_END_FAILURETemplate(Action<WEBSOCKET_READ_FRAGMENT_END_FAILURE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_READ_FRAGMENT_END_FAILURE(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 8, "WEBSOCKET_READ_FRAGMENT_END_FAILURE", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_READ_FRAGMENT_END_PENDING IISWebSocketWEBSOCKET_READ_FRAGMENT_END_PENDINGTemplate(Action<WEBSOCKET_READ_FRAGMENT_END_PENDING> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_READ_FRAGMENT_END_PENDING(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 6, "WEBSOCKET_READ_FRAGMENT_END_PENDING", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_READ_FRAGMENT_END_SUCCESS IISWebSocketWEBSOCKET_READ_FRAGMENT_END_SUCCESSTemplate(Action<WEBSOCKET_READ_FRAGMENT_END_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_READ_FRAGMENT_END_SUCCESS(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 7, "WEBSOCKET_READ_FRAGMENT_END_SUCCESS", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_READ_FRAGMENT_START IISWebSocketWEBSOCKET_READ_FRAGMENT_STARTTemplate(Action<WEBSOCKET_READ_FRAGMENT_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_READ_FRAGMENT_START(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 5, "WEBSOCKET_READ_FRAGMENT_START", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_READ_IO_FAILED IISWebSocketWEBSOCKET_READ_IO_FAILEDTemplate(Action<WEBSOCKET_READ_IO_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_READ_IO_FAILED(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 15, "WEBSOCKET_READ_IO_FAILED", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_START IISWebSocketWEBSOCKET_STARTTemplate(Action<WEBSOCKET_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_START(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 2, "WEBSOCKET_START", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_WRITE_FRAGMENT_END_FAILURE IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_FAILURETemplate(Action<WEBSOCKET_WRITE_FRAGMENT_END_FAILURE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_WRITE_FRAGMENT_END_FAILURE(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 12, "WEBSOCKET_WRITE_FRAGMENT_END_FAILURE", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_WRITE_FRAGMENT_END_PENDING IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_PENDINGTemplate(Action<WEBSOCKET_WRITE_FRAGMENT_END_PENDING> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_WRITE_FRAGMENT_END_PENDING(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 10, "WEBSOCKET_WRITE_FRAGMENT_END_PENDING", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_SUCCESSTemplate(Action<WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 11, "WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_WRITE_FRAGMENT_START IISWebSocketWEBSOCKET_WRITE_FRAGMENT_STARTTemplate(Action<WEBSOCKET_WRITE_FRAGMENT_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_WRITE_FRAGMENT_START(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 9, "WEBSOCKET_WRITE_FRAGMENT_START", ProviderGuid, ProviderName );
        }
        static private WEBSOCKET_WRITE_IO_FAILED IISWebSocketWEBSOCKET_WRITE_IO_FAILEDTemplate(Action<WEBSOCKET_WRITE_IO_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new WEBSOCKET_WRITE_IO_FAILED(action, 65535, 8, "IISWebSocket", IISWebSocketTaskGuid, 16, "WEBSOCKET_WRITE_IO_FAILED", ProviderGuid, ProviderName );
        }
        static private MODULE_SET_RESPONSE_ERROR_STATUS RequestNotificationsMODULE_SET_RESPONSE_ERROR_STATUSTemplate(Action<MODULE_SET_RESPONSE_ERROR_STATUS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new MODULE_SET_RESPONSE_ERROR_STATUS(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 16, "MODULE_SET_RESPONSE_ERROR_STATUS", ProviderGuid, ProviderName );
        }
        static private NOTIFY_MODULE_COMPLETION RequestNotificationsNOTIFY_MODULE_COMPLETIONTemplate(Action<NOTIFY_MODULE_COMPLETION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NOTIFY_MODULE_COMPLETION(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 3, "NOTIFY_MODULE_COMPLETION", ProviderGuid, ProviderName );
        }
        static private NOTIFY_MODULE_END RequestNotificationsNOTIFY_MODULE_ENDTemplate(Action<NOTIFY_MODULE_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NOTIFY_MODULE_END(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 2, "NOTIFY_MODULE_END", ProviderGuid, ProviderName );
        }
        static private NOTIFY_MODULE_START RequestNotificationsNOTIFY_MODULE_STARTTemplate(Action<NOTIFY_MODULE_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new NOTIFY_MODULE_START(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 1, "NOTIFY_MODULE_START", ProviderGuid, ProviderName );
        }
        static private PRE_BEGIN_REQUEST_END RequestNotificationsPRE_BEGIN_REQUEST_ENDTemplate(Action<PRE_BEGIN_REQUEST_END> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PRE_BEGIN_REQUEST_END(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 5, "PRE_BEGIN_REQUEST_END", ProviderGuid, ProviderName );
        }
        static private PRE_BEGIN_REQUEST_START RequestNotificationsPRE_BEGIN_REQUEST_STARTTemplate(Action<PRE_BEGIN_REQUEST_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new PRE_BEGIN_REQUEST_START(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 4, "PRE_BEGIN_REQUEST_START", ProviderGuid, ProviderName );
        }
        static private REQUEST_NOTIFICATION_EVENTS_ERROR RequestNotificationsREQUEST_NOTIFICATION_EVENTS_ERRORTemplate(Action<REQUEST_NOTIFICATION_EVENTS_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new REQUEST_NOTIFICATION_EVENTS_ERROR(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 15, "REQUEST_NOTIFICATION_EVENTS_ERROR", ProviderGuid, ProviderName );
        }
        static private REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTIONTemplate(Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 18, "REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION", ProviderGuid, ProviderName );
        }
        static private REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUSTemplate(Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS(action, 65535, 11, "RequestNotifications", RequestNotificationsTaskGuid, 17, "REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[175];
                templates[0] = IISGeneralGENERAL_REQUEST_STARTTemplate(null);
                templates[1] = IISGeneralGENERAL_REQUEST_ENDTemplate(null);
                templates[2] = IISGeneralGENERAL_STATIC_FILE_HANDLERTemplate(null);
                templates[3] = IISGeneralGENERAL_CGI_HANDLERTemplate(null);
                templates[4] = IISGeneralGENERAL_ISAPI_HANDLERTemplate(null);
                templates[5] = IISGeneralGENERAL_OOP_ISAPI_HANDLERTemplate(null);
                templates[6] = IISGeneralGENERAL_REDIRECTION_HANDLERTemplate(null);
                templates[7] = IISGeneralGENERAL_DAV_HANDLERTemplate(null);
                templates[8] = IISGeneralGENERAL_OPTIONS_HANDLERTemplate(null);
                templates[9] = IISGeneralGENERAL_TRACE_HANDLERTemplate(null);
                templates[10] = IISGeneralGENERAL_GET_URL_METADATATemplate(null);
                templates[11] = IISGeneralGENERAL_CHILD_REQUEST_STARTTemplate(null);
                templates[12] = IISGeneralGENERAL_CHILD_REQUEST_ENDTemplate(null);
                templates[13] = IISGeneralGENERAL_SEND_CUSTOM_ERRORTemplate(null);
                templates[14] = IISGeneralGENERAL_MAP_HANDLERTemplate(null);
                templates[15] = IISGeneralGENERAL_FLUSH_RESPONSE_STARTTemplate(null);
                templates[16] = IISGeneralGENERAL_FLUSH_RESPONSE_ENDTemplate(null);
                templates[17] = IISGeneralGENERAL_READ_ENTITY_STARTTemplate(null);
                templates[18] = IISGeneralGENERAL_READ_ENTITY_ENDTemplate(null);
                templates[19] = IISGeneralGENERAL_FILE_CHANGE_NOTIFICATIONTemplate(null);
                templates[20] = IISGeneralGENERAL_CONFIG_CHANGE_NOTIFICATIONTemplate(null);
                templates[21] = IISGeneralGENERAL_VIRTUAL_MODULE_UNRESOLVEDTemplate(null);
                templates[22] = IISGeneralGENERAL_URL_CHANGEDTemplate(null);
                templates[23] = IISGeneralHANDLER_CHANGEDTemplate(null);
                templates[24] = IISGeneralUSER_SETTemplate(null);
                templates[25] = IISGeneralMODULE_PRECONDITION_NOT_MATCHTemplate(null);
                templates[26] = IISGeneralHANDLER_PRECONDITION_NOT_MATCHTemplate(null);
                templates[27] = IISGeneralGENERAL_RESPONSE_HEADERSTemplate(null);
                templates[28] = IISGeneralGENERAL_RESPONSE_ENTITY_FILETemplate(null);
                templates[29] = IISGeneralGENERAL_RESPONSE_ENTITY_BUFFERTemplate(null);
                templates[30] = IISGeneralGENERAL_REQUEST_HEADERSTemplate(null);
                templates[31] = IISGeneralGENERAL_REQUEST_ENTITYTemplate(null);
                templates[32] = IISGeneralGENERAL_NOT_SEND_CUSTOM_ERRORTemplate(null);
                templates[33] = IISGeneralGENERAL_SET_REQUEST_HEADERTemplate(null);
                templates[34] = IISGeneralGENERAL_MODULE_FACTORY_FAILEDTemplate(null);
                templates[35] = IISGeneralGENERAL_ENDPOINT_INFORMATIONTemplate(null);
                templates[36] = IISGeneralGENERAL_SET_RESPONSE_HEADERTemplate(null);
                templates[37] = IISAuthenticationAUTH_STARTTemplate(null);
                templates[38] = IISAuthenticationAUTH_SUCCEEDEDTemplate(null);
                templates[39] = IISAuthenticationAUTH_TYPE_NOT_SUPPORTEDTemplate(null);
                templates[40] = IISAuthenticationAUTH_INVALID_ANON_ACCOUNTTemplate(null);
                templates[41] = IISAuthenticationAUTH_PASSWD_CHANGE_NEEDEDTemplate(null);
                templates[42] = IISAuthenticationAUTH_PASSWD_CHANGE_DISABLEDTemplate(null);
                templates[43] = IISAuthenticationAUTH_BAD_BASIC_HEADERTemplate(null);
                templates[44] = IISAuthenticationAUTH_BASIC_LOGON_FAILEDTemplate(null);
                templates[45] = IISAuthenticationAUTH_WDIGEST_LOGON_FAILEDTemplate(null);
                templates[46] = IISAuthenticationAUTH_IISDIGEST_LOGON_FAILEDTemplate(null);
                templates[47] = IISAuthenticationAUTH_PASSPORT_LOGON_FAILEDTemplate(null);
                templates[48] = IISAuthenticationAUTH_SSPI_LOGON_FAILEDTemplate(null);
                templates[49] = IISAuthenticationAUTH_NTLM_NULL_SESSIONTemplate(null);
                templates[50] = IISAuthenticationAUTH_SSPI_CONTINUE_NEEDEDTemplate(null);
                templates[51] = IISAuthenticationAUTH_KERBEROS_FAILEDTemplate(null);
                templates[52] = IISAuthenticationAUTH_ANON_PASSWD_CHANGE_NEEDEDTemplate(null);
                templates[53] = IISAuthenticationAUTH_REQUEST_AUTH_TYPETemplate(null);
                templates[54] = IISAuthenticationAUTH_ENDTemplate(null);
                templates[55] = IISSecuritySEC_ILLEGAL_SHORT_FILENAMETemplate(null);
                templates[56] = IISSecuritySEC_REJECTED_IPTemplate(null);
                templates[57] = IISSecuritySEC_REJECTED_HOSTNAMETemplate(null);
                templates[58] = IISSecuritySEC_REQUIRE_SSL_128Template(null);
                templates[59] = IISSecuritySEC_FILE_ACCESS_DENIEDTemplate(null);
                templates[60] = IISSecuritySEC_DENIED_BY_MIMEMAPTemplate(null);
                templates[61] = IISSecuritySEC_DENIED_BY_ISAPI_RESTRICTIONTemplate(null);
                templates[62] = IISSecuritySEC_DENIED_BY_CGI_RESTRICTIONTemplate(null);
                templates[63] = IISSecuritySEC_DENIED_BY_ACCESS_FLAGSTemplate(null);
                templates[64] = IISFilterFILTER_STARTTemplate(null);
                templates[65] = IISFilterFILTER_ENDTemplate(null);
                templates[66] = IISFilterFILTER_ERRORTemplate(null);
                templates[67] = IISFilterFILTER_PREPROC_HEADERS_STARTTemplate(null);
                templates[68] = IISFilterFILTER_PREPROC_HEADERS_ENDTemplate(null);
                templates[69] = IISFilterFILTER_URL_MAP_STARTTemplate(null);
                templates[70] = IISFilterFILTER_URL_MAP_ENDTemplate(null);
                templates[71] = IISFilterFILTER_AUTHENTICATION_STARTTemplate(null);
                templates[72] = IISFilterFILTER_AUTHENTICATION_ENDTemplate(null);
                templates[73] = IISFilterFILTER_AUTH_COMPLETE_STARTTemplate(null);
                templates[74] = IISFilterFILTER_AUTH_COMPLETE_ENDTemplate(null);
                templates[75] = IISFilterFILTER_SEND_RESPONSE_STARTTemplate(null);
                templates[76] = IISFilterFILTER_SEND_RESPONSE_ENDTemplate(null);
                templates[77] = IISFilterFILTER_END_OF_REQUEST_STARTTemplate(null);
                templates[78] = IISFilterFILTER_END_OF_REQUEST_ENDTemplate(null);
                templates[79] = IISFilterFILTER_LOG_STARTTemplate(null);
                templates[80] = IISFilterFILTER_LOG_ENDTemplate(null);
                templates[81] = IISFilterFILTER_SEND_RAW_DATA_STARTTemplate(null);
                templates[82] = IISFilterFILTER_SEND_RAW_DATA_ENDTemplate(null);
                templates[83] = IISFilterFILTER_ACCESS_DENIED_STARTTemplate(null);
                templates[84] = IISFilterFILTER_ACCESS_DENIED_ENDTemplate(null);
                templates[85] = IISFilterFILTER_SET_REQ_HEADERTemplate(null);
                templates[86] = IISFilterFILTER_ADD_REQ_HEADERTemplate(null);
                templates[87] = IISFilterFILTER_SET_RESP_HEADERTemplate(null);
                templates[88] = IISFilterFILTER_ADD_RESP_HEADERTemplate(null);
                templates[89] = IISISAPIISAPI_STARTTemplate(null);
                templates[90] = IISISAPIISAPI_ENDTemplate(null);
                templates[91] = IISCGICGI_STARTTemplate(null);
                templates[92] = IISCGICGI_ENDTemplate(null);
                templates[93] = IISCGICGI_LAUNCHTemplate(null);
                templates[94] = IISCGICGI_TIMEOUTTemplate(null);
                templates[95] = IISCGICGI_PREMATURE_TERMINATIONTemplate(null);
                templates[96] = IISCGICGI_REQUEST_ENTITY_STARTTemplate(null);
                templates[97] = IISCGICGI_HEADERS_RECEIVEDTemplate(null);
                templates[98] = IISFastCGICGIF_ACTIVITY_TIMEOUTTemplate(null);
                templates[99] = IISFastCGICGIF_REQUEST_TIMEOUTTemplate(null);
                templates[100] = IISFastCGICGIF_UNEXPECTED_EXITTemplate(null);
                templates[101] = IISFastCGICGIF_RAPID_FAILURE_PROTECTIONTemplate(null);
                templates[102] = IISFastCGICGIF_PATH_NOT_FOUNDTemplate(null);
                templates[103] = IISFastCGICGIF_SCRIPT_PROCESSOR_MISSINGTemplate(null);
                templates[104] = IISFastCGICGIF_ADD_JOB_OBJECT_FAILTemplate(null);
                templates[105] = IISFastCGICGIF_APPMGR_SHUTDOWNTemplate(null);
                templates[106] = IISFastCGICGIF_QUEUE_FULLTemplate(null);
                templates[107] = IISFastCGICGIF_UNKNOWN_ERRORTemplate(null);
                templates[108] = IISFastCGICGIF_RESPONSE_WRITTENTemplate(null);
                templates[109] = IISFastCGICGIF_WAITING_FOR_RESPONSETemplate(null);
                templates[110] = IISFastCGICGIF_TRACE_ERRORTemplate(null);
                templates[111] = IISFastCGICGIF_TRACE_WARNINGTemplate(null);
                templates[112] = IISFastCGICGIF_TRACE_INFOTemplate(null);
                templates[113] = IISFastCGICGIF_QUEUE_REQUESTTemplate(null);
                templates[114] = IISFastCGICGIF_ASSIGN_PROCESSTemplate(null);
                templates[115] = IISFastCGICGIF_STARTTemplate(null);
                templates[116] = IISFastCGICGIF_ENDTemplate(null);
                templates[117] = IISWebSocketWEBSOCKET_INITIALIZE_NOT_SUCCESSTemplate(null);
                templates[118] = IISWebSocketWEBSOCKET_STARTTemplate(null);
                templates[119] = IISWebSocketWEBSOCKET_END_SUCCESSTemplate(null);
                templates[120] = IISWebSocketWEBSOCKET_END_FAILURETemplate(null);
                templates[121] = IISWebSocketWEBSOCKET_READ_FRAGMENT_STARTTemplate(null);
                templates[122] = IISWebSocketWEBSOCKET_READ_FRAGMENT_END_PENDINGTemplate(null);
                templates[123] = IISWebSocketWEBSOCKET_READ_FRAGMENT_END_SUCCESSTemplate(null);
                templates[124] = IISWebSocketWEBSOCKET_READ_FRAGMENT_END_FAILURETemplate(null);
                templates[125] = IISWebSocketWEBSOCKET_WRITE_FRAGMENT_STARTTemplate(null);
                templates[126] = IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_PENDINGTemplate(null);
                templates[127] = IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_SUCCESSTemplate(null);
                templates[128] = IISWebSocketWEBSOCKET_WRITE_FRAGMENT_END_FAILURETemplate(null);
                templates[129] = IISWebSocketWEBSOCKET_APPLICATION_CLOSE_CONNECTIONTemplate(null);
                templates[130] = IISWebSocketWEBSOCKET_MODULE_CLOSE_CONNECTIONTemplate(null);
                templates[131] = IISWebSocketWEBSOCKET_READ_IO_FAILEDTemplate(null);
                templates[132] = IISWebSocketWEBSOCKET_WRITE_IO_FAILEDTemplate(null);
                templates[133] = IISWebSocketWEBSOCKET_CLOSE_RECEIVEDTemplate(null);
                templates[134] = IISWebSocketWEBSOCKET_CLOSE_SEND_STARTTemplate(null);
                templates[135] = IISWebSocketWEBSOCKET_CLOSE_SEND_SUCCESSTemplate(null);
                templates[136] = IISWebSocketWEBSOCKET_CLOSE_SEND_FAILURETemplate(null);
                templates[137] = IISCompressionSTATIC_COMPRESSION_STARTTemplate(null);
                templates[138] = IISCompressionSTATIC_COMPRESSION_SUCCESSTemplate(null);
                templates[139] = IISCompressionSTATIC_COMPRESSION_NOT_SUCCESSTemplate(null);
                templates[140] = IISCompressionSTATIC_COMPRESSION_CREATE_STARTTemplate(null);
                templates[141] = IISCompressionSTATIC_COMPRESSION_CREATE_ENDTemplate(null);
                templates[142] = IISCompressionDYNAMIC_COMPRESSION_STARTTemplate(null);
                templates[143] = IISCompressionDYNAMIC_COMPRESSION_SUCCESSTemplate(null);
                templates[144] = IISCompressionDYNAMIC_COMPRESSION_NOT_SUCCESSTemplate(null);
                templates[145] = IISCompressionDYNAMIC_COMPRESSION_DOTemplate(null);
                templates[146] = IISCompressionDYNAMIC_COMPRESSION_ENDTemplate(null);
                templates[147] = IISCompressionSTATIC_COMPRESSION_ENDTemplate(null);
                templates[148] = IISCacheFILE_CACHE_ACCESS_STARTTemplate(null);
                templates[149] = IISCacheFILE_CACHE_ACCESS_ENDTemplate(null);
                templates[150] = IISCacheURL_CACHE_ACCESS_STARTTemplate(null);
                templates[151] = IISCacheURL_CACHE_ACCESS_ENDTemplate(null);
                templates[152] = IISCacheHTTPSYS_CACHEABLETemplate(null);
                templates[153] = IISCacheOUTPUT_CACHE_LOOKUP_STARTTemplate(null);
                templates[154] = IISCacheOUTPUT_CACHE_LOOKUP_ENDTemplate(null);
                templates[155] = IISCacheOUTPUT_CACHE_UPDATE_STARTTemplate(null);
                templates[156] = IISCacheOUTPUT_CACHE_UPDATE_ENDTemplate(null);
                templates[157] = IISCacheOUTPUT_CACHE_DISABLEDTemplate(null);
                templates[158] = IISCacheFILE_CACHE_CREATE_FILETemplate(null);
                templates[159] = RequestNotificationsNOTIFY_MODULE_STARTTemplate(null);
                templates[160] = RequestNotificationsNOTIFY_MODULE_ENDTemplate(null);
                templates[161] = RequestNotificationsNOTIFY_MODULE_COMPLETIONTemplate(null);
                templates[162] = RequestNotificationsPRE_BEGIN_REQUEST_STARTTemplate(null);
                templates[163] = RequestNotificationsPRE_BEGIN_REQUEST_ENDTemplate(null);
                templates[164] = RequestNotificationsREQUEST_NOTIFICATION_EVENTS_ERRORTemplate(null);
                templates[165] = RequestNotificationsMODULE_SET_RESPONSE_ERROR_STATUSTemplate(null);
                templates[166] = RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUSTemplate(null);
                templates[167] = RequestNotificationsREQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTIONTemplate(null);
                templates[168] = IISModuleEventsMODULE_EVENTS_MODULE_STARTTemplate(null);
                templates[169] = IISModuleEventsMODULE_EVENTS_MODULE_ENDTemplate(null);
                templates[170] = IISModuleEventsMODULE_EVENTS_MODULE_CRITICAL_ERRORTemplate(null);
                templates[171] = IISModuleEventsMODULE_EVENTS_MODULE_ERRORTemplate(null);
                templates[172] = IISModuleEventsMODULE_EVENTS_MODULE_WARNINGTemplate(null);
                templates[173] = IISModuleEventsMODULE_EVENTS_MODULE_INFORMATIONTemplate(null);
                templates[174] = IISModuleEventsMODULE_EVENTS_MODULE_VERBOSETemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace
{
    public sealed class AUTH_ANON_PASSWD_CHANGE_NEEDED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_ANON_PASSWD_CHANGE_NEEDED(Action<AUTH_ANON_PASSWD_CHANGE_NEEDED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_ANON_PASSWD_CHANGE_NEEDED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_ANON_PASSWD_CHANGE_NEEDED> m_target;
        #endregion
    }
    public sealed class AUTH_BAD_BASIC_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_BAD_BASIC_HEADER(Action<AUTH_BAD_BASIC_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_BAD_BASIC_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_BAD_BASIC_HEADER> m_target;
        #endregion
    }
    public sealed class AUTH_BASIC_LOGON_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AUTH_BASIC_LOGON_FAILED(Action<AUTH_BASIC_LOGON_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_BASIC_LOGON_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_BASIC_LOGON_FAILED> m_target;
        #endregion
    }
    public sealed class AUTH_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_END(Action<AUTH_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_END> m_target;
        #endregion
    }
    public sealed class AUTH_IISDIGEST_LOGON_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AUTH_IISDIGEST_LOGON_FAILED(Action<AUTH_IISDIGEST_LOGON_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_IISDIGEST_LOGON_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_IISDIGEST_LOGON_FAILED> m_target;
        #endregion
    }
    public sealed class AUTH_INVALID_ANON_ACCOUNT : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AUTH_INVALID_ANON_ACCOUNT(Action<AUTH_INVALID_ANON_ACCOUNT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_INVALID_ANON_ACCOUNT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_INVALID_ANON_ACCOUNT> m_target;
        #endregion
    }
    public sealed class AUTH_KERBEROS_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public bool KMUsed { get { return GetInt32At(16) != 0; } }
        public string APUserName { get { return GetUnicodeStringAt(20); } }
        public string SPNName { get { return GetUnicodeStringAt(SkipUnicodeString(20)); } }
        public bool ADConfigIsOK { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(20))) != 0; } }
        public string KerberosInfo { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(20))+4); } }

        #region Private
        internal AUTH_KERBEROS_FAILED(Action<AUTH_KERBEROS_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(20))+4)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(20))+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_KERBEROS_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "KMUsed", KMUsed);
             XmlAttrib(sb, "APUserName", APUserName);
             XmlAttrib(sb, "SPNName", SPNName);
             XmlAttrib(sb, "ADConfigIsOK", ADConfigIsOK);
             XmlAttrib(sb, "KerberosInfo", KerberosInfo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "KMUsed", "APUserName", "SPNName", "ADConfigIsOK", "KerberosInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return KMUsed;
                case 2:
                    return APUserName;
                case 3:
                    return SPNName;
                case 4:
                    return ADConfigIsOK;
                case 5:
                    return KerberosInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_KERBEROS_FAILED> m_target;
        #endregion
    }
    public sealed class AUTH_NTLM_NULL_SESSION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_NTLM_NULL_SESSION(Action<AUTH_NTLM_NULL_SESSION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_NTLM_NULL_SESSION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_NTLM_NULL_SESSION> m_target;
        #endregion
    }
    public sealed class AUTH_PASSPORT_LOGON_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AUTH_PASSPORT_LOGON_FAILED(Action<AUTH_PASSPORT_LOGON_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_PASSPORT_LOGON_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_PASSPORT_LOGON_FAILED> m_target;
        #endregion
    }
    public sealed class AUTH_PASSWD_CHANGE_DISABLED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_PASSWD_CHANGE_DISABLED(Action<AUTH_PASSWD_CHANGE_DISABLED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_PASSWD_CHANGE_DISABLED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_PASSWD_CHANGE_DISABLED> m_target;
        #endregion
    }
    public sealed class AUTH_PASSWD_CHANGE_NEEDED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_PASSWD_CHANGE_NEEDED(Action<AUTH_PASSWD_CHANGE_NEEDED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_PASSWD_CHANGE_NEEDED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_PASSWD_CHANGE_NEEDED> m_target;
        #endregion
    }
    public sealed class AUTH_REQUEST_AUTH_TYPE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public AUTH_REQUEST_AUTH_TYPERequestAuthType RequestAuthType { get { return (AUTH_REQUEST_AUTH_TYPERequestAuthType)GetInt32At(16); } }

        #region Private
        internal AUTH_REQUEST_AUTH_TYPE(Action<AUTH_REQUEST_AUTH_TYPE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_REQUEST_AUTH_TYPE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RequestAuthType", RequestAuthType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestAuthType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestAuthType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_REQUEST_AUTH_TYPE> m_target;
        #endregion
    }
    public sealed class AUTH_SSPI_CONTINUE_NEEDED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PackageName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AUTH_SSPI_CONTINUE_NEEDED(Action<AUTH_SSPI_CONTINUE_NEEDED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_SSPI_CONTINUE_NEEDED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PackageName", PackageName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PackageName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PackageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_SSPI_CONTINUE_NEEDED> m_target;
        #endregion
    }
    public sealed class AUTH_SSPI_LOGON_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AUTH_SSPI_LOGON_FAILED(Action<AUTH_SSPI_LOGON_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_SSPI_LOGON_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_SSPI_LOGON_FAILED> m_target;
        #endregion
    }
    public sealed class AUTH_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public AUTH_STARTAuthTypeSupported AuthTypeSupported { get { return (AUTH_STARTAuthTypeSupported)GetInt32At(16); } }

        #region Private
        internal AUTH_START(Action<AUTH_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "AuthTypeSupported", AuthTypeSupported);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthTypeSupported"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthTypeSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_START> m_target;
        #endregion
    }
    public sealed class AUTH_SUCCEEDED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public AUTH_SUCCEEDEDAuthType AuthType { get { return (AUTH_SUCCEEDEDAuthType)GetInt32At(16); } }
        public bool NTLMUsed { get { return GetInt32At(20) != 0; } }
        public string RemoteUserName { get { return GetUnicodeStringAt(24); } }
        public string AuthUserName { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public AUTH_SUCCEEDEDTokenImpersonationLevel TokenImpersonationLevel { get { return (AUTH_SUCCEEDEDTokenImpersonationLevel)GetInt32At(SkipUnicodeString(SkipUnicodeString(24))); } }

        #region Private
        internal AUTH_SUCCEEDED(Action<AUTH_SUCCEEDED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_SUCCEEDED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "AuthType", AuthType);
             XmlAttrib(sb, "NTLMUsed", NTLMUsed);
             XmlAttrib(sb, "RemoteUserName", RemoteUserName);
             XmlAttrib(sb, "AuthUserName", AuthUserName);
             XmlAttrib(sb, "TokenImpersonationLevel", TokenImpersonationLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthType", "NTLMUsed", "RemoteUserName", "AuthUserName", "TokenImpersonationLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthType;
                case 2:
                    return NTLMUsed;
                case 3:
                    return RemoteUserName;
                case 4:
                    return AuthUserName;
                case 5:
                    return TokenImpersonationLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_SUCCEEDED> m_target;
        #endregion
    }
    public sealed class AUTH_TYPE_NOT_SUPPORTED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AUTH_TYPE_NOT_SUPPORTED(Action<AUTH_TYPE_NOT_SUPPORTED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_TYPE_NOT_SUPPORTED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_TYPE_NOT_SUPPORTED> m_target;
        #endregion
    }
    public sealed class AUTH_WDIGEST_LOGON_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AUTH_WDIGEST_LOGON_FAILED(Action<AUTH_WDIGEST_LOGON_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AUTH_WDIGEST_LOGON_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AUTH_WDIGEST_LOGON_FAILED> m_target;
        #endregion
    }
    public sealed class FILE_CACHE_ACCESS_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public bool Successful { get { return GetInt32At(16) != 0; } }
        public bool FileFromCache { get { return GetInt32At(20) != 0; } }
        public bool FileAddedToCache { get { return GetInt32At(24) != 0; } }
        public bool FileDirmoned { get { return GetInt32At(28) != 0; } }
        public bool LastModCheckErrorIgnored { get { return GetInt32At(32) != 0; } }
        public int ErrorCode { get { return GetInt32At(36); } }
        public string LastModifiedTime { get { return GetUTF8StringAt(40); } }

        #region Private
        internal FILE_CACHE_ACCESS_END(Action<FILE_CACHE_ACCESS_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(40)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(40)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILE_CACHE_ACCESS_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Successful", Successful);
             XmlAttrib(sb, "FileFromCache", FileFromCache);
             XmlAttrib(sb, "FileAddedToCache", FileAddedToCache);
             XmlAttrib(sb, "FileDirmoned", FileDirmoned);
             XmlAttrib(sb, "LastModCheckErrorIgnored", LastModCheckErrorIgnored);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "LastModifiedTime", LastModifiedTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Successful", "FileFromCache", "FileAddedToCache", "FileDirmoned", "LastModCheckErrorIgnored", "ErrorCode", "LastModifiedTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Successful;
                case 2:
                    return FileFromCache;
                case 3:
                    return FileAddedToCache;
                case 4:
                    return FileDirmoned;
                case 5:
                    return LastModCheckErrorIgnored;
                case 6:
                    return ErrorCode;
                case 7:
                    return LastModifiedTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILE_CACHE_ACCESS_END> m_target;
        #endregion
    }
    public sealed class FILE_CACHE_ACCESS_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string DomainName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal FILE_CACHE_ACCESS_START(Action<FILE_CACHE_ACCESS_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILE_CACHE_ACCESS_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "UserName", UserName);
             XmlAttrib(sb, "DomainName", DomainName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "UserName", "DomainName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return UserName;
                case 3:
                    return DomainName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILE_CACHE_ACCESS_START> m_target;
        #endregion
    }
    public sealed class FILE_CACHE_CREATE_FILE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string DomainName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal FILE_CACHE_CREATE_FILE(Action<FILE_CACHE_CREATE_FILE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILE_CACHE_CREATE_FILE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "UserName", UserName);
             XmlAttrib(sb, "DomainName", DomainName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "UserName", "DomainName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return UserName;
                case 3:
                    return DomainName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILE_CACHE_CREATE_FILE> m_target;
        #endregion
    }
    public sealed class HTTPSYS_CACHEABLE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public bool HttpsysCacheable { get { return GetInt32At(16) != 0; } }
        public HTTPSYS_CACHEABLEReason Reason { get { return (HTTPSYS_CACHEABLEReason)GetInt32At(20); } }
        public HTTPSYS_CACHEABLECachePolicy CachePolicy { get { return (HTTPSYS_CACHEABLECachePolicy)GetInt32At(24); } }
        public int TimeToLive { get { return GetInt32At(28); } }

        #region Private
        internal HTTPSYS_CACHEABLE(Action<HTTPSYS_CACHEABLE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HTTPSYS_CACHEABLE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HttpsysCacheable", HttpsysCacheable);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "CachePolicy", CachePolicy);
             XmlAttrib(sb, "TimeToLive", TimeToLive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpsysCacheable", "Reason", "CachePolicy", "TimeToLive"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpsysCacheable;
                case 2:
                    return Reason;
                case 3:
                    return CachePolicy;
                case 4:
                    return TimeToLive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HTTPSYS_CACHEABLE> m_target;
        #endregion
    }
    public sealed class OUTPUT_CACHE_DISABLED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal OUTPUT_CACHE_DISABLED(Action<OUTPUT_CACHE_DISABLED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OUTPUT_CACHE_DISABLED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OUTPUT_CACHE_DISABLED> m_target;
        #endregion
    }
    public sealed class OUTPUT_CACHE_LOOKUP_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public OUTPUT_CACHE_LOOKUP_ENDResult Result { get { return (OUTPUT_CACHE_LOOKUP_ENDResult)GetInt32At(16); } }

        #region Private
        internal OUTPUT_CACHE_LOOKUP_END(Action<OUTPUT_CACHE_LOOKUP_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OUTPUT_CACHE_LOOKUP_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OUTPUT_CACHE_LOOKUP_END> m_target;
        #endregion
    }
    public sealed class OUTPUT_CACHE_LOOKUP_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal OUTPUT_CACHE_LOOKUP_START(Action<OUTPUT_CACHE_LOOKUP_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OUTPUT_CACHE_LOOKUP_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OUTPUT_CACHE_LOOKUP_START> m_target;
        #endregion
    }
    public sealed class OUTPUT_CACHE_UPDATE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public OUTPUT_CACHE_UPDATE_ENDResult Result { get { return (OUTPUT_CACHE_UPDATE_ENDResult)GetInt32At(16); } }

        #region Private
        internal OUTPUT_CACHE_UPDATE_END(Action<OUTPUT_CACHE_UPDATE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OUTPUT_CACHE_UPDATE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OUTPUT_CACHE_UPDATE_END> m_target;
        #endregion
    }
    public sealed class OUTPUT_CACHE_UPDATE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public OUTPUT_CACHE_UPDATE_STARTCachePolicy CachePolicy { get { return (OUTPUT_CACHE_UPDATE_STARTCachePolicy)GetInt32At(16); } }
        public int TimeToLive { get { return GetInt32At(20); } }

        #region Private
        internal OUTPUT_CACHE_UPDATE_START(Action<OUTPUT_CACHE_UPDATE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<OUTPUT_CACHE_UPDATE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "CachePolicy", CachePolicy);
             XmlAttrib(sb, "TimeToLive", TimeToLive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CachePolicy", "TimeToLive"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CachePolicy;
                case 2:
                    return TimeToLive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OUTPUT_CACHE_UPDATE_START> m_target;
        #endregion
    }
    public sealed class URL_CACHE_ACCESS_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUnicodeStringAt(16); } }
        public bool URLInfoFromCache { get { return GetInt32At(SkipUnicodeString(16)) != 0; } }
        public bool URLInfoAddedToCache { get { return GetInt32At(SkipUnicodeString(16)+4) != 0; } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)+8); } }

        #region Private
        internal URL_CACHE_ACCESS_END(Action<URL_CACHE_ACCESS_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<URL_CACHE_ACCESS_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PhysicalPath", PhysicalPath);
             XmlAttrib(sb, "URLInfoFromCache", URLInfoFromCache);
             XmlAttrib(sb, "URLInfoAddedToCache", URLInfoAddedToCache);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath", "URLInfoFromCache", "URLInfoAddedToCache", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                case 2:
                    return URLInfoFromCache;
                case 3:
                    return URLInfoAddedToCache;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<URL_CACHE_ACCESS_END> m_target;
        #endregion
    }
    public sealed class URL_CACHE_ACCESS_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RequestURL { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal URL_CACHE_ACCESS_START(Action<URL_CACHE_ACCESS_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<URL_CACHE_ACCESS_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RequestURL", RequestURL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestURL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<URL_CACHE_ACCESS_START> m_target;
        #endregion
    }
    public sealed class CGI_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGI_END(Action<CGI_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_END> m_target;
        #endregion
    }
    public sealed class CGI_HEADERS_RECEIVED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGI_HEADERS_RECEIVED(Action<CGI_HEADERS_RECEIVED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_HEADERS_RECEIVED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_HEADERS_RECEIVED> m_target;
        #endregion
    }
    public sealed class CGI_LAUNCH : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string CommandLine { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(16)+4); } }

        #region Private
        internal CGI_LAUNCH(Action<CGI_LAUNCH> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_LAUNCH>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "CommandLine", CommandLine);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "ProcessId", ProcessId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CommandLine", "ErrorCode", "ProcessId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CommandLine;
                case 2:
                    return ErrorCode;
                case 3:
                    return ProcessId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_LAUNCH> m_target;
        #endregion
    }
    public sealed class CGI_PREMATURE_TERMINATION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal CGI_PREMATURE_TERMINATION(Action<CGI_PREMATURE_TERMINATION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_PREMATURE_TERMINATION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Headers", Headers);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_PREMATURE_TERMINATION> m_target;
        #endregion
    }
    public sealed class CGI_REQUEST_ENTITY_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGI_REQUEST_ENTITY_START(Action<CGI_REQUEST_ENTITY_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_REQUEST_ENTITY_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_REQUEST_ENTITY_START> m_target;
        #endregion
    }
    public sealed class CGI_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGI_START(Action<CGI_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_START> m_target;
        #endregion
    }
    public sealed class CGI_TIMEOUT : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal CGI_TIMEOUT(Action<CGI_TIMEOUT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGI_TIMEOUT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Headers", Headers);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGI_TIMEOUT> m_target;
        #endregion
    }
    public sealed class DYNAMIC_COMPRESSION_DO : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int OriginalSize { get { return GetInt32At(16); } }
        public int CompressedSize { get { return GetInt32At(20); } }

        #region Private
        internal DYNAMIC_COMPRESSION_DO(Action<DYNAMIC_COMPRESSION_DO> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DYNAMIC_COMPRESSION_DO>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OriginalSize", OriginalSize);
             XmlAttrib(sb, "CompressedSize", CompressedSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OriginalSize", "CompressedSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OriginalSize;
                case 2:
                    return CompressedSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DYNAMIC_COMPRESSION_DO> m_target;
        #endregion
    }
    public sealed class DYNAMIC_COMPRESSION_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal DYNAMIC_COMPRESSION_END(Action<DYNAMIC_COMPRESSION_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DYNAMIC_COMPRESSION_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DYNAMIC_COMPRESSION_END> m_target;
        #endregion
    }
    public sealed class DYNAMIC_COMPRESSION_NOT_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public DYNAMIC_COMPRESSION_NOT_SUCCESSReason Reason { get { return (DYNAMIC_COMPRESSION_NOT_SUCCESSReason)GetInt32At(16); } }

        #region Private
        internal DYNAMIC_COMPRESSION_NOT_SUCCESS(Action<DYNAMIC_COMPRESSION_NOT_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DYNAMIC_COMPRESSION_NOT_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DYNAMIC_COMPRESSION_NOT_SUCCESS> m_target;
        #endregion
    }
    public sealed class DYNAMIC_COMPRESSION_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal DYNAMIC_COMPRESSION_START(Action<DYNAMIC_COMPRESSION_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DYNAMIC_COMPRESSION_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DYNAMIC_COMPRESSION_START> m_target;
        #endregion
    }
    public sealed class DYNAMIC_COMPRESSION_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal DYNAMIC_COMPRESSION_SUCCESS(Action<DYNAMIC_COMPRESSION_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DYNAMIC_COMPRESSION_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DYNAMIC_COMPRESSION_SUCCESS> m_target;
        #endregion
    }
    public sealed class STATIC_COMPRESSION_CREATE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }
        public string OriginalFileName { get { return GetUnicodeStringAt(20); } }
        public int OriginalFileSize { get { return GetInt32At(SkipUnicodeString(20)); } }
        public string CompressedFileName { get { return GetUnicodeStringAt(SkipUnicodeString(20)+4); } }
        public int CompressedFileSize { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(20)+4)); } }

        #region Private
        internal STATIC_COMPRESSION_CREATE_END(Action<STATIC_COMPRESSION_CREATE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(20)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(20)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<STATIC_COMPRESSION_CREATE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "OriginalFileName", OriginalFileName);
             XmlAttrib(sb, "OriginalFileSize", OriginalFileSize);
             XmlAttrib(sb, "CompressedFileName", CompressedFileName);
             XmlAttrib(sb, "CompressedFileSize", CompressedFileSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode", "OriginalFileName", "OriginalFileSize", "CompressedFileName", "CompressedFileSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                case 2:
                    return OriginalFileName;
                case 3:
                    return OriginalFileSize;
                case 4:
                    return CompressedFileName;
                case 5:
                    return CompressedFileSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<STATIC_COMPRESSION_CREATE_END> m_target;
        #endregion
    }
    public sealed class STATIC_COMPRESSION_CREATE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OriginalFileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal STATIC_COMPRESSION_CREATE_START(Action<STATIC_COMPRESSION_CREATE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<STATIC_COMPRESSION_CREATE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OriginalFileName", OriginalFileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OriginalFileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OriginalFileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<STATIC_COMPRESSION_CREATE_START> m_target;
        #endregion
    }
    public sealed class STATIC_COMPRESSION_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal STATIC_COMPRESSION_END(Action<STATIC_COMPRESSION_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<STATIC_COMPRESSION_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<STATIC_COMPRESSION_END> m_target;
        #endregion
    }
    public sealed class STATIC_COMPRESSION_NOT_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public STATIC_COMPRESSION_NOT_SUCCESSReason Reason { get { return (STATIC_COMPRESSION_NOT_SUCCESSReason)GetInt32At(16); } }

        #region Private
        internal STATIC_COMPRESSION_NOT_SUCCESS(Action<STATIC_COMPRESSION_NOT_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<STATIC_COMPRESSION_NOT_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<STATIC_COMPRESSION_NOT_SUCCESS> m_target;
        #endregion
    }
    public sealed class STATIC_COMPRESSION_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal STATIC_COMPRESSION_START(Action<STATIC_COMPRESSION_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<STATIC_COMPRESSION_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<STATIC_COMPRESSION_START> m_target;
        #endregion
    }
    public sealed class STATIC_COMPRESSION_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal STATIC_COMPRESSION_SUCCESS(Action<STATIC_COMPRESSION_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<STATIC_COMPRESSION_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<STATIC_COMPRESSION_SUCCESS> m_target;
        #endregion
    }
    public sealed class CGIF_ACTIVITY_TIMEOUT : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_ACTIVITY_TIMEOUT(Action<CGIF_ACTIVITY_TIMEOUT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_ACTIVITY_TIMEOUT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_ACTIVITY_TIMEOUT> m_target;
        #endregion
    }
    public sealed class CGIF_ADD_JOB_OBJECT_FAIL : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_ADD_JOB_OBJECT_FAIL(Action<CGIF_ADD_JOB_OBJECT_FAIL> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_ADD_JOB_OBJECT_FAIL>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_ADD_JOB_OBJECT_FAIL> m_target;
        #endregion
    }
    public sealed class CGIF_APPMGR_SHUTDOWN : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_APPMGR_SHUTDOWN(Action<CGIF_APPMGR_SHUTDOWN> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_APPMGR_SHUTDOWN>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_APPMGR_SHUTDOWN> m_target;
        #endregion
    }
    public sealed class CGIF_ASSIGN_PROCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string CommandLine { get { return GetUnicodeStringAt(16); } }
        public bool IsNewProcess { get { return GetInt32At(SkipUnicodeString(16)) != 0; } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(16)+4); } }
        public int RequestNumber { get { return GetInt32At(SkipUnicodeString(16)+8); } }

        #region Private
        internal CGIF_ASSIGN_PROCESS(Action<CGIF_ASSIGN_PROCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_ASSIGN_PROCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "CommandLine", CommandLine);
             XmlAttrib(sb, "IsNewProcess", IsNewProcess);
             XmlAttrib(sb, "ProcessId", ProcessId);
             XmlAttrib(sb, "RequestNumber", RequestNumber);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CommandLine", "IsNewProcess", "ProcessId", "RequestNumber"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CommandLine;
                case 2:
                    return IsNewProcess;
                case 3:
                    return ProcessId;
                case 4:
                    return RequestNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_ASSIGN_PROCESS> m_target;
        #endregion
    }
    public sealed class CGIF_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_END(Action<CGIF_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_END> m_target;
        #endregion
    }
    public sealed class CGIF_PATH_NOT_FOUND : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_PATH_NOT_FOUND(Action<CGIF_PATH_NOT_FOUND> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_PATH_NOT_FOUND>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_PATH_NOT_FOUND> m_target;
        #endregion
    }
    public sealed class CGIF_QUEUE_FULL : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_QUEUE_FULL(Action<CGIF_QUEUE_FULL> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_QUEUE_FULL>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_QUEUE_FULL> m_target;
        #endregion
    }
    public sealed class CGIF_QUEUE_REQUEST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int PositionInQueue { get { return GetInt32At(16); } }
        public int MaxInstances { get { return GetInt32At(20); } }

        #region Private
        internal CGIF_QUEUE_REQUEST(Action<CGIF_QUEUE_REQUEST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_QUEUE_REQUEST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PositionInQueue", PositionInQueue);
             XmlAttrib(sb, "MaxInstances", MaxInstances);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PositionInQueue", "MaxInstances"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PositionInQueue;
                case 2:
                    return MaxInstances;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_QUEUE_REQUEST> m_target;
        #endregion
    }
    public sealed class CGIF_RAPID_FAILURE_PROTECTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_RAPID_FAILURE_PROTECTION(Action<CGIF_RAPID_FAILURE_PROTECTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_RAPID_FAILURE_PROTECTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_RAPID_FAILURE_PROTECTION> m_target;
        #endregion
    }
    public sealed class CGIF_REQUEST_TIMEOUT : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_REQUEST_TIMEOUT(Action<CGIF_REQUEST_TIMEOUT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_REQUEST_TIMEOUT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_REQUEST_TIMEOUT> m_target;
        #endregion
    }
    public sealed class CGIF_RESPONSE_WRITTEN : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_RESPONSE_WRITTEN(Action<CGIF_RESPONSE_WRITTEN> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_RESPONSE_WRITTEN>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_RESPONSE_WRITTEN> m_target;
        #endregion
    }
    public sealed class CGIF_SCRIPT_PROCESSOR_MISSING : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_SCRIPT_PROCESSOR_MISSING(Action<CGIF_SCRIPT_PROCESSOR_MISSING> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_SCRIPT_PROCESSOR_MISSING>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_SCRIPT_PROCESSOR_MISSING> m_target;
        #endregion
    }
    public sealed class CGIF_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_START(Action<CGIF_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_START> m_target;
        #endregion
    }
    public sealed class CGIF_TRACE_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Message { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal CGIF_TRACE_ERROR(Action<CGIF_TRACE_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_TRACE_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_TRACE_ERROR> m_target;
        #endregion
    }
    public sealed class CGIF_TRACE_INFO : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Message { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal CGIF_TRACE_INFO(Action<CGIF_TRACE_INFO> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_TRACE_INFO>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_TRACE_INFO> m_target;
        #endregion
    }
    public sealed class CGIF_TRACE_WARNING : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Message { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal CGIF_TRACE_WARNING(Action<CGIF_TRACE_WARNING> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_TRACE_WARNING>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_TRACE_WARNING> m_target;
        #endregion
    }
    public sealed class CGIF_UNEXPECTED_EXIT : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_UNEXPECTED_EXIT(Action<CGIF_UNEXPECTED_EXIT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_UNEXPECTED_EXIT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_UNEXPECTED_EXIT> m_target;
        #endregion
    }
    public sealed class CGIF_UNKNOWN_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal CGIF_UNKNOWN_ERROR(Action<CGIF_UNKNOWN_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_UNKNOWN_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_UNKNOWN_ERROR> m_target;
        #endregion
    }
    public sealed class CGIF_WAITING_FOR_RESPONSE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal CGIF_WAITING_FOR_RESPONSE(Action<CGIF_WAITING_FOR_RESPONSE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<CGIF_WAITING_FOR_RESPONSE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CGIF_WAITING_FOR_RESPONSE> m_target;
        #endregion
    }
    public sealed class FILTER_ACCESS_DENIED_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_ACCESS_DENIED_END(Action<FILTER_ACCESS_DENIED_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_ACCESS_DENIED_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_ACCESS_DENIED_END> m_target;
        #endregion
    }
    public sealed class FILTER_ACCESS_DENIED_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RequestedURL { get { return GetUTF8StringAt(16); } }
        public string PhysicalPath { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public int DenialReason { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))); } }

        #region Private
        internal FILTER_ACCESS_DENIED_START(Action<FILTER_ACCESS_DENIED_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_ACCESS_DENIED_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RequestedURL", RequestedURL);
             XmlAttrib(sb, "PhysicalPath", PhysicalPath);
             XmlAttrib(sb, "DenialReason", DenialReason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestedURL", "PhysicalPath", "DenialReason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestedURL;
                case 2:
                    return PhysicalPath;
                case 3:
                    return DenialReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_ACCESS_DENIED_START> m_target;
        #endregion
    }
    public sealed class FILTER_ADD_REQ_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal FILTER_ADD_REQ_HEADER(Action<FILTER_ADD_REQ_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_ADD_REQ_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_ADD_REQ_HEADER> m_target;
        #endregion
    }
    public sealed class FILTER_ADD_RESP_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal FILTER_ADD_RESP_HEADER(Action<FILTER_ADD_RESP_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_ADD_RESP_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_ADD_RESP_HEADER> m_target;
        #endregion
    }
    public sealed class FILTER_AUTH_COMPLETE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_AUTH_COMPLETE_END(Action<FILTER_AUTH_COMPLETE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_AUTH_COMPLETE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_AUTH_COMPLETE_END> m_target;
        #endregion
    }
    public sealed class FILTER_AUTH_COMPLETE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_AUTH_COMPLETE_START(Action<FILTER_AUTH_COMPLETE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_AUTH_COMPLETE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_AUTH_COMPLETE_START> m_target;
        #endregion
    }
    public sealed class FILTER_AUTHENTICATION_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FinalUserName { get { return GetUTF8StringAt(16); } }
        public bool PasswordChanged { get { return GetInt32At(SkipUTF8String(16)) != 0; } }

        #region Private
        internal FILTER_AUTHENTICATION_END(Action<FILTER_AUTHENTICATION_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_AUTHENTICATION_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FinalUserName", FinalUserName);
             XmlAttrib(sb, "PasswordChanged", PasswordChanged);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FinalUserName", "PasswordChanged"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FinalUserName;
                case 2:
                    return PasswordChanged;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_AUTHENTICATION_END> m_target;
        #endregion
    }
    public sealed class FILTER_AUTHENTICATION_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OrigUserName { get { return GetUTF8StringAt(16); } }

        #region Private
        internal FILTER_AUTHENTICATION_START(Action<FILTER_AUTHENTICATION_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_AUTHENTICATION_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OrigUserName", OrigUserName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OrigUserName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OrigUserName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_AUTHENTICATION_START> m_target;
        #endregion
    }
    public sealed class FILTER_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public FILTER_ENDNotificationStatus NotificationStatus { get { return (FILTER_ENDNotificationStatus)GetInt32At(16); } }

        #region Private
        internal FILTER_END(Action<FILTER_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "NotificationStatus", NotificationStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "NotificationStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return NotificationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_END> m_target;
        #endregion
    }
    public sealed class FILTER_END_OF_REQUEST_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_END_OF_REQUEST_END(Action<FILTER_END_OF_REQUEST_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_END_OF_REQUEST_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_END_OF_REQUEST_END> m_target;
        #endregion
    }
    public sealed class FILTER_END_OF_REQUEST_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_END_OF_REQUEST_START(Action<FILTER_END_OF_REQUEST_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_END_OF_REQUEST_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_END_OF_REQUEST_START> m_target;
        #endregion
    }
    public sealed class FILTER_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal FILTER_ERROR(Action<FILTER_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_ERROR> m_target;
        #endregion
    }
    public sealed class FILTER_LOG_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FinalClientHostName { get { return GetUTF8StringAt(16); } }
        public string FinalClientUserName { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string FinalServerName { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string FinalOperation { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }
        public string FinalTarget { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))); } }
        public string FinalParameters { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))); } }
        public int FinalHttpStatus { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))); } }
        public int FinalWin32Status { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))+4); } }

        #region Private
        internal FILTER_LOG_END(Action<FILTER_LOG_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_LOG_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FinalClientHostName", FinalClientHostName);
             XmlAttrib(sb, "FinalClientUserName", FinalClientUserName);
             XmlAttrib(sb, "FinalServerName", FinalServerName);
             XmlAttrib(sb, "FinalOperation", FinalOperation);
             XmlAttrib(sb, "FinalTarget", FinalTarget);
             XmlAttrib(sb, "FinalParameters", FinalParameters);
             XmlAttrib(sb, "FinalHttpStatus", FinalHttpStatus);
             XmlAttrib(sb, "FinalWin32Status", FinalWin32Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FinalClientHostName", "FinalClientUserName", "FinalServerName", "FinalOperation", "FinalTarget", "FinalParameters", "FinalHttpStatus", "FinalWin32Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FinalClientHostName;
                case 2:
                    return FinalClientUserName;
                case 3:
                    return FinalServerName;
                case 4:
                    return FinalOperation;
                case 5:
                    return FinalTarget;
                case 6:
                    return FinalParameters;
                case 7:
                    return FinalHttpStatus;
                case 8:
                    return FinalWin32Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_LOG_END> m_target;
        #endregion
    }
    public sealed class FILTER_LOG_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OrigClientHostName { get { return GetUTF8StringAt(16); } }
        public string OrigClientUserName { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string OrigServerName { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string OrigOperation { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }
        public string OrigTarget { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))); } }
        public string OrigParameters { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))); } }
        public int OrigHttpStatus { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))); } }
        public int OrigWin32Status { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))+4); } }

        #region Private
        internal FILTER_LOG_START(Action<FILTER_LOG_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_LOG_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OrigClientHostName", OrigClientHostName);
             XmlAttrib(sb, "OrigClientUserName", OrigClientUserName);
             XmlAttrib(sb, "OrigServerName", OrigServerName);
             XmlAttrib(sb, "OrigOperation", OrigOperation);
             XmlAttrib(sb, "OrigTarget", OrigTarget);
             XmlAttrib(sb, "OrigParameters", OrigParameters);
             XmlAttrib(sb, "OrigHttpStatus", OrigHttpStatus);
             XmlAttrib(sb, "OrigWin32Status", OrigWin32Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OrigClientHostName", "OrigClientUserName", "OrigServerName", "OrigOperation", "OrigTarget", "OrigParameters", "OrigHttpStatus", "OrigWin32Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OrigClientHostName;
                case 2:
                    return OrigClientUserName;
                case 3:
                    return OrigServerName;
                case 4:
                    return OrigOperation;
                case 5:
                    return OrigTarget;
                case 6:
                    return OrigParameters;
                case 7:
                    return OrigHttpStatus;
                case 8:
                    return OrigWin32Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_LOG_START> m_target;
        #endregion
    }
    public sealed class FILTER_PREPROC_HEADERS_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_PREPROC_HEADERS_END(Action<FILTER_PREPROC_HEADERS_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_PREPROC_HEADERS_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_PREPROC_HEADERS_END> m_target;
        #endregion
    }
    public sealed class FILTER_PREPROC_HEADERS_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_PREPROC_HEADERS_START(Action<FILTER_PREPROC_HEADERS_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_PREPROC_HEADERS_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_PREPROC_HEADERS_START> m_target;
        #endregion
    }
    public sealed class FILTER_SEND_RAW_DATA_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_SEND_RAW_DATA_END(Action<FILTER_SEND_RAW_DATA_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_SEND_RAW_DATA_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_SEND_RAW_DATA_END> m_target;
        #endregion
    }
    public sealed class FILTER_SEND_RAW_DATA_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_SEND_RAW_DATA_START(Action<FILTER_SEND_RAW_DATA_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_SEND_RAW_DATA_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_SEND_RAW_DATA_START> m_target;
        #endregion
    }
    public sealed class FILTER_SEND_RESPONSE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal FILTER_SEND_RESPONSE_END(Action<FILTER_SEND_RESPONSE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_SEND_RESPONSE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_SEND_RESPONSE_END> m_target;
        #endregion
    }
    public sealed class FILTER_SEND_RESPONSE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int HttpStatus { get { return GetInt32At(16); } }

        #region Private
        internal FILTER_SEND_RESPONSE_START(Action<FILTER_SEND_RESPONSE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_SEND_RESPONSE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_SEND_RESPONSE_START> m_target;
        #endregion
    }
    public sealed class FILTER_SET_REQ_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal FILTER_SET_REQ_HEADER(Action<FILTER_SET_REQ_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_SET_REQ_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_SET_REQ_HEADER> m_target;
        #endregion
    }
    public sealed class FILTER_SET_RESP_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal FILTER_SET_RESP_HEADER(Action<FILTER_SET_RESP_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_SET_RESP_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_SET_RESP_HEADER> m_target;
        #endregion
    }
    public sealed class FILTER_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilterName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal FILTER_START(Action<FILTER_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilterName", FilterName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilterName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilterName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_START> m_target;
        #endregion
    }
    public sealed class FILTER_URL_MAP_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FinalURL { get { return GetUTF8StringAt(16); } }
        public string FinalPath { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public int AccessPerms { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))); } }
        public int MatchingPath { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))+4); } }
        public int MatchingURL { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))+8); } }
        public string ScriptMapEntry { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))+12); } }

        #region Private
        internal FILTER_URL_MAP_END(Action<FILTER_URL_MAP_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(16))+12)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(16))+12)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_URL_MAP_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FinalURL", FinalURL);
             XmlAttrib(sb, "FinalPath", FinalPath);
             XmlAttrib(sb, "AccessPerms", AccessPerms);
             XmlAttrib(sb, "MatchingPath", MatchingPath);
             XmlAttrib(sb, "MatchingURL", MatchingURL);
             XmlAttrib(sb, "ScriptMapEntry", ScriptMapEntry);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FinalURL", "FinalPath", "AccessPerms", "MatchingPath", "MatchingURL", "ScriptMapEntry"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FinalURL;
                case 2:
                    return FinalPath;
                case 3:
                    return AccessPerms;
                case 4:
                    return MatchingPath;
                case 5:
                    return MatchingURL;
                case 6:
                    return ScriptMapEntry;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_URL_MAP_END> m_target;
        #endregion
    }
    public sealed class FILTER_URL_MAP_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OrigURL { get { return GetUTF8StringAt(16); } }
        public string OrigPath { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public int AccessPerms { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))); } }
        public int MatchingPath { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))+4); } }
        public int MatchingURL { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))+8); } }
        public string ScriptMapEntry { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))+12); } }

        #region Private
        internal FILTER_URL_MAP_START(Action<FILTER_URL_MAP_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(16))+12)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(16))+12)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<FILTER_URL_MAP_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OrigURL", OrigURL);
             XmlAttrib(sb, "OrigPath", OrigPath);
             XmlAttrib(sb, "AccessPerms", AccessPerms);
             XmlAttrib(sb, "MatchingPath", MatchingPath);
             XmlAttrib(sb, "MatchingURL", MatchingURL);
             XmlAttrib(sb, "ScriptMapEntry", ScriptMapEntry);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OrigURL", "OrigPath", "AccessPerms", "MatchingPath", "MatchingURL", "ScriptMapEntry"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OrigURL;
                case 2:
                    return OrigPath;
                case 3:
                    return AccessPerms;
                case 4:
                    return MatchingPath;
                case 5:
                    return MatchingURL;
                case 6:
                    return ScriptMapEntry;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FILTER_URL_MAP_START> m_target;
        #endregion
    }
    public sealed class GENERAL_CGI_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_CGI_HANDLER(Action<GENERAL_CGI_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_CGI_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_CGI_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_CHILD_REQUEST_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int HttpStatus { get { return GetInt32At(20); } }
        public int HttpSubStatus { get { return GetInt16At(24); } }

        #region Private
        internal GENERAL_CHILD_REQUEST_END(Action<GENERAL_CHILD_REQUEST_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 26));
            Debug.Assert(!(Version > 1 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_CHILD_REQUEST_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "HttpStatus", "HttpSubStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return HttpStatus;
                case 3:
                    return HttpSubStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_CHILD_REQUEST_END> m_target;
        #endregion
    }
    public sealed class GENERAL_CHILD_REQUEST_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int SiteId { get { return GetInt32At(16); } }
        public string RequestURL { get { return GetUnicodeStringAt(20); } }
        public string RequestVerb { get { return GetUTF8StringAt(SkipUnicodeString(20)); } }
        public int RecursiveLevel { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(20))); } }

        #region Private
        internal GENERAL_CHILD_REQUEST_START(Action<GENERAL_CHILD_REQUEST_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(20))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(20))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_CHILD_REQUEST_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SiteId", SiteId);
             XmlAttrib(sb, "RequestURL", RequestURL);
             XmlAttrib(sb, "RequestVerb", RequestVerb);
             XmlAttrib(sb, "RecursiveLevel", RecursiveLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SiteId", "RequestURL", "RequestVerb", "RecursiveLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SiteId;
                case 2:
                    return RequestURL;
                case 3:
                    return RequestVerb;
                case 4:
                    return RecursiveLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_CHILD_REQUEST_START> m_target;
        #endregion
    }
    public sealed class GENERAL_CONFIG_CHANGE_NOTIFICATION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ConfigPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal GENERAL_CONFIG_CHANGE_NOTIFICATION(Action<GENERAL_CONFIG_CHANGE_NOTIFICATION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_CONFIG_CHANGE_NOTIFICATION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ConfigPath", ConfigPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ConfigPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ConfigPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_CONFIG_CHANGE_NOTIFICATION> m_target;
        #endregion
    }
    public sealed class GENERAL_DAV_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal GENERAL_DAV_HANDLER(Action<GENERAL_DAV_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_DAV_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_DAV_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_ENDPOINT_INFORMATION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RemoteAddress { get { return GetUTF8StringAt(16); } }
        public string RemotePort { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string LocalAddress { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string LocalPort { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }

        #region Private
        internal GENERAL_ENDPOINT_INFORMATION(Action<GENERAL_ENDPOINT_INFORMATION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_ENDPOINT_INFORMATION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RemoteAddress", RemoteAddress);
             XmlAttrib(sb, "RemotePort", RemotePort);
             XmlAttrib(sb, "LocalAddress", LocalAddress);
             XmlAttrib(sb, "LocalPort", LocalPort);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RemoteAddress", "RemotePort", "LocalAddress", "LocalPort"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RemoteAddress;
                case 2:
                    return RemotePort;
                case 3:
                    return LocalAddress;
                case 4:
                    return LocalPort;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_ENDPOINT_INFORMATION> m_target;
        #endregion
    }
    public sealed class GENERAL_FILE_CHANGE_NOTIFICATION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal GENERAL_FILE_CHANGE_NOTIFICATION(Action<GENERAL_FILE_CHANGE_NOTIFICATION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_FILE_CHANGE_NOTIFICATION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_FILE_CHANGE_NOTIFICATION> m_target;
        #endregion
    }
    public sealed class GENERAL_FLUSH_RESPONSE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int ErrorCode { get { return GetInt32At(20); } }

        #region Private
        internal GENERAL_FLUSH_RESPONSE_END(Action<GENERAL_FLUSH_RESPONSE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_FLUSH_RESPONSE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_FLUSH_RESPONSE_END> m_target;
        #endregion
    }
    public sealed class GENERAL_FLUSH_RESPONSE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_FLUSH_RESPONSE_START(Action<GENERAL_FLUSH_RESPONSE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_FLUSH_RESPONSE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_FLUSH_RESPONSE_START> m_target;
        #endregion
    }
    public sealed class GENERAL_GET_URL_METADATA : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUnicodeStringAt(16); } }
        public GENERAL_GET_URL_METADATAAccessPerms AccessPerms { get { return (GENERAL_GET_URL_METADATAAccessPerms)GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal GENERAL_GET_URL_METADATA(Action<GENERAL_GET_URL_METADATA> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_GET_URL_METADATA>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PhysicalPath", PhysicalPath);
             XmlAttrib(sb, "AccessPerms", AccessPerms);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath", "AccessPerms"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                case 2:
                    return AccessPerms;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_GET_URL_METADATA> m_target;
        #endregion
    }
    public sealed class GENERAL_ISAPI_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_ISAPI_HANDLER(Action<GENERAL_ISAPI_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_ISAPI_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_ISAPI_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_MAP_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_MAP_HANDLER(Action<GENERAL_MAP_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_MAP_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_MAP_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_MODULE_FACTORY_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal GENERAL_MODULE_FACTORY_FAILED(Action<GENERAL_MODULE_FACTORY_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_MODULE_FACTORY_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_MODULE_FACTORY_FAILED> m_target;
        #endregion
    }
    public sealed class GENERAL_NOT_SEND_CUSTOM_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public GENERAL_NOT_SEND_CUSTOM_ERRORReason Reason { get { return (GENERAL_NOT_SEND_CUSTOM_ERRORReason)GetInt32At(16); } }

        #region Private
        internal GENERAL_NOT_SEND_CUSTOM_ERROR(Action<GENERAL_NOT_SEND_CUSTOM_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_NOT_SEND_CUSTOM_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_NOT_SEND_CUSTOM_ERROR> m_target;
        #endregion
    }
    public sealed class GENERAL_OOP_ISAPI_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ProcessId { get { return GetInt32At(16); } }
        public int TotalReqs { get { return GetInt32At(20); } }
        public int CurrentReqs { get { return GetInt32At(24); } }

        #region Private
        internal GENERAL_OOP_ISAPI_HANDLER(Action<GENERAL_OOP_ISAPI_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version > 1 && EventDataLength < 28));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_OOP_ISAPI_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ProcessId", ProcessId);
             XmlAttrib(sb, "TotalReqs", TotalReqs);
             XmlAttrib(sb, "CurrentReqs", CurrentReqs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ProcessId", "TotalReqs", "CurrentReqs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ProcessId;
                case 2:
                    return TotalReqs;
                case 3:
                    return CurrentReqs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_OOP_ISAPI_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_OPTIONS_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_OPTIONS_HANDLER(Action<GENERAL_OPTIONS_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_OPTIONS_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_OPTIONS_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_READ_ENTITY_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesReceived { get { return GetInt32At(16); } }
        public int ErrorCode { get { return GetInt32At(20); } }

        #region Private
        internal GENERAL_READ_ENTITY_END(Action<GENERAL_READ_ENTITY_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_READ_ENTITY_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesReceived", BytesReceived);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesReceived", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesReceived;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_READ_ENTITY_END> m_target;
        #endregion
    }
    public sealed class GENERAL_READ_ENTITY_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_READ_ENTITY_START(Action<GENERAL_READ_ENTITY_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_READ_ENTITY_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_READ_ENTITY_START> m_target;
        #endregion
    }
    public sealed class GENERAL_REDIRECTION_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RedirectedURL { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal GENERAL_REDIRECTION_HANDLER(Action<GENERAL_REDIRECTION_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_REDIRECTION_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "RedirectedURL", RedirectedURL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RedirectedURL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RedirectedURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_REDIRECTION_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_REQUEST_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int BytesReceived { get { return GetInt32At(20); } }
        public int HttpStatus { get { return GetInt32At(24); } }
        public int HttpSubStatus { get { return GetInt16At(28); } }

        #region Private
        internal GENERAL_REQUEST_END(Action<GENERAL_REQUEST_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 30));
            Debug.Assert(!(Version > 1 && EventDataLength < 30));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_REQUEST_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             XmlAttrib(sb, "BytesReceived", BytesReceived);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "BytesReceived", "HttpStatus", "HttpSubStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return BytesReceived;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpSubStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_REQUEST_END> m_target;
        #endregion
    }
    public sealed class GENERAL_REQUEST_ENTITY : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public byte[] Buffer { get { return GetByteArrayAt(16, EventDataLength-16); } }

        #region Private
        internal GENERAL_REQUEST_ENTITY(Action<GENERAL_REQUEST_ENTITY> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 0+ (EventDataLength-16*1)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < 0+ (EventDataLength-16*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_REQUEST_ENTITY>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Buffer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_REQUEST_ENTITY> m_target;
        #endregion
    }
    public sealed class GENERAL_REQUEST_HEADERS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal GENERAL_REQUEST_HEADERS(Action<GENERAL_REQUEST_HEADERS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_REQUEST_HEADERS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Headers", Headers);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_REQUEST_HEADERS> m_target;
        #endregion
    }
    public sealed class GENERAL_REQUEST_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int SiteId { get { return GetInt32At(16); } }
        public string AppPoolId { get { return GetUnicodeStringAt(20); } }
        public long ConnId { get { return GetInt64At(SkipUnicodeString(20)); } }
        public long RawConnId { get { return GetInt64At(SkipUnicodeString(20)+8); } }
        public string RequestURL { get { return GetUnicodeStringAt(SkipUnicodeString(20)+16); } }
        public string RequestVerb { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(20)+16)); } }

        #region Private
        internal GENERAL_REQUEST_START(Action<GENERAL_REQUEST_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(20)+16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(SkipUnicodeString(20)+16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_REQUEST_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SiteId", SiteId);
             XmlAttrib(sb, "AppPoolId", AppPoolId);
             XmlAttrib(sb, "ConnId", ConnId);
             XmlAttrib(sb, "RawConnId", RawConnId);
             XmlAttrib(sb, "RequestURL", RequestURL);
             XmlAttrib(sb, "RequestVerb", RequestVerb);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SiteId", "AppPoolId", "ConnId", "RawConnId", "RequestURL", "RequestVerb"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SiteId;
                case 2:
                    return AppPoolId;
                case 3:
                    return ConnId;
                case 4:
                    return RawConnId;
                case 5:
                    return RequestURL;
                case 6:
                    return RequestVerb;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_REQUEST_START> m_target;
        #endregion
    }
    public sealed class GENERAL_RESPONSE_ENTITY_BUFFER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public byte[] Buffer { get { return GetByteArrayAt(16, EventDataLength-16); } }

        #region Private
        internal GENERAL_RESPONSE_ENTITY_BUFFER(Action<GENERAL_RESPONSE_ENTITY_BUFFER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 0+ (EventDataLength-16*1)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < 0+ (EventDataLength-16*1)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_RESPONSE_ENTITY_BUFFER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Buffer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_RESPONSE_ENTITY_BUFFER> m_target;
        #endregion
    }
    public sealed class GENERAL_RESPONSE_ENTITY_FILE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public long Offset { get { return GetInt64At(SkipUnicodeString(16)); } }
        public long Size { get { return GetInt64At(SkipUnicodeString(16)+8); } }

        #region Private
        internal GENERAL_RESPONSE_ENTITY_FILE(Action<GENERAL_RESPONSE_ENTITY_FILE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_RESPONSE_ENTITY_FILE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "Offset", Offset);
             XmlAttrib(sb, "Size", Size);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "Offset", "Size"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return Offset;
                case 3:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_RESPONSE_ENTITY_FILE> m_target;
        #endregion
    }
    public sealed class GENERAL_RESPONSE_HEADERS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal GENERAL_RESPONSE_HEADERS(Action<GENERAL_RESPONSE_HEADERS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_RESPONSE_HEADERS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Headers", Headers);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_RESPONSE_HEADERS> m_target;
        #endregion
    }
    public sealed class GENERAL_SEND_CUSTOM_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int HttpStatus { get { return GetInt32At(16); } }
        public int HttpSubStatus { get { return GetInt16At(20); } }
        public string FileNameOrURL { get { return GetUnicodeStringAt(22); } }

        #region Private
        internal GENERAL_SEND_CUSTOM_ERROR(Action<GENERAL_SEND_CUSTOM_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(22)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(22)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_SEND_CUSTOM_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             XmlAttrib(sb, "FileNameOrURL", FileNameOrURL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpStatus", "HttpSubStatus", "FileNameOrURL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpStatus;
                case 2:
                    return HttpSubStatus;
                case 3:
                    return FileNameOrURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_SEND_CUSTOM_ERROR> m_target;
        #endregion
    }
    public sealed class GENERAL_SET_REQUEST_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public bool Replace { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))) != 0; } }

        #region Private
        internal GENERAL_SET_REQUEST_HEADER(Action<GENERAL_SET_REQUEST_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_SET_REQUEST_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             XmlAttrib(sb, "Replace", Replace);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue", "Replace"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                case 3:
                    return Replace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_SET_REQUEST_HEADER> m_target;
        #endregion
    }
    public sealed class GENERAL_SET_RESPONSE_HEADER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public bool Replace { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))) != 0; } }

        #region Private
        internal GENERAL_SET_RESPONSE_HEADER(Action<GENERAL_SET_RESPONSE_HEADER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_SET_RESPONSE_HEADER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HeaderName", HeaderName);
             XmlAttrib(sb, "HeaderValue", HeaderValue);
             XmlAttrib(sb, "Replace", Replace);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue", "Replace"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                case 3:
                    return Replace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_SET_RESPONSE_HEADER> m_target;
        #endregion
    }
    public sealed class GENERAL_STATIC_FILE_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal GENERAL_STATIC_FILE_HANDLER(Action<GENERAL_STATIC_FILE_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_STATIC_FILE_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_STATIC_FILE_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_TRACE_HANDLER : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal GENERAL_TRACE_HANDLER(Action<GENERAL_TRACE_HANDLER> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_TRACE_HANDLER>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_TRACE_HANDLER> m_target;
        #endregion
    }
    public sealed class GENERAL_URL_CHANGED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OldUrl { get { return GetUnicodeStringAt(16); } }
        public string NewUrl { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal GENERAL_URL_CHANGED(Action<GENERAL_URL_CHANGED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_URL_CHANGED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OldUrl", OldUrl);
             XmlAttrib(sb, "NewUrl", NewUrl);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OldUrl", "NewUrl"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OldUrl;
                case 2:
                    return NewUrl;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_URL_CHANGED> m_target;
        #endregion
    }
    public sealed class GENERAL_VIRTUAL_MODULE_UNRESOLVED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Type { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal GENERAL_VIRTUAL_MODULE_UNRESOLVED(Action<GENERAL_VIRTUAL_MODULE_UNRESOLVED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<GENERAL_VIRTUAL_MODULE_UNRESOLVED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GENERAL_VIRTUAL_MODULE_UNRESOLVED> m_target;
        #endregion
    }
    public sealed class HANDLER_CHANGED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OldHandlerName { get { return GetUnicodeStringAt(16); } }
        public string NewHandlerName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string NewHandlerModules { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public string NewHandlerScriptProcessor { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }
        public string NewHandlerType { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))))); } }

        #region Private
        internal HANDLER_CHANGED(Action<HANDLER_CHANGED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HANDLER_CHANGED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "OldHandlerName", OldHandlerName);
             XmlAttrib(sb, "NewHandlerName", NewHandlerName);
             XmlAttrib(sb, "NewHandlerModules", NewHandlerModules);
             XmlAttrib(sb, "NewHandlerScriptProcessor", NewHandlerScriptProcessor);
             XmlAttrib(sb, "NewHandlerType", NewHandlerType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OldHandlerName", "NewHandlerName", "NewHandlerModules", "NewHandlerScriptProcessor", "NewHandlerType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OldHandlerName;
                case 2:
                    return NewHandlerName;
                case 3:
                    return NewHandlerModules;
                case 4:
                    return NewHandlerScriptProcessor;
                case 5:
                    return NewHandlerType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HANDLER_CHANGED> m_target;
        #endregion
    }
    public sealed class HANDLER_PRECONDITION_NOT_MATCH : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Precondition { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal HANDLER_PRECONDITION_NOT_MATCH(Action<HANDLER_PRECONDITION_NOT_MATCH> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<HANDLER_PRECONDITION_NOT_MATCH>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Precondition", Precondition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Precondition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Precondition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HANDLER_PRECONDITION_NOT_MATCH> m_target;
        #endregion
    }
    public sealed class MODULE_PRECONDITION_NOT_MATCH : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Precondition { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal MODULE_PRECONDITION_NOT_MATCH(Action<MODULE_PRECONDITION_NOT_MATCH> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_PRECONDITION_NOT_MATCH>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Name", Name);
             XmlAttrib(sb, "Precondition", Precondition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Precondition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Precondition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_PRECONDITION_NOT_MATCH> m_target;
        #endregion
    }
    public sealed class USER_SET : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string AuthType { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public bool SupportsIsInRole { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16))) != 0; } }

        #region Private
        internal USER_SET(Action<USER_SET> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<USER_SET>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "AuthType", AuthType);
             XmlAttrib(sb, "UserName", UserName);
             XmlAttrib(sb, "SupportsIsInRole", SupportsIsInRole);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthType", "UserName", "SupportsIsInRole"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthType;
                case 2:
                    return UserName;
                case 3:
                    return SupportsIsInRole;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<USER_SET> m_target;
        #endregion
    }
    public sealed class ISAPI_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ISAPI_END(Action<ISAPI_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ISAPI_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ISAPI_END> m_target;
        #endregion
    }
    public sealed class ISAPI_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ISAPI_START(Action<ISAPI_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ISAPI_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ISAPI_START> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_CRITICAL_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_CRITICAL_ERROR(Action<MODULE_EVENTS_MODULE_CRITICAL_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_CRITICAL_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_CRITICAL_ERROR> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_END(Action<MODULE_EVENTS_MODULE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_END> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_ERROR(Action<MODULE_EVENTS_MODULE_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_ERROR> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_INFORMATION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_INFORMATION(Action<MODULE_EVENTS_MODULE_INFORMATION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_INFORMATION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_INFORMATION> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_START(Action<MODULE_EVENTS_MODULE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_START> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_VERBOSE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_VERBOSE(Action<MODULE_EVENTS_MODULE_VERBOSE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_VERBOSE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_VERBOSE> m_target;
        #endregion
    }
    public sealed class MODULE_EVENTS_MODULE_WARNING : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal MODULE_EVENTS_MODULE_WARNING(Action<MODULE_EVENTS_MODULE_WARNING> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_EVENTS_MODULE_WARNING>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Data1", Data1);
             XmlAttrib(sb, "Data2", Data2);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_EVENTS_MODULE_WARNING> m_target;
        #endregion
    }
    public sealed class SEC_DENIED_BY_ACCESS_FLAGS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int CurrentFlags { get { return GetInt32At(16); } }
        public int NeededFlags { get { return GetInt32At(20); } }

        #region Private
        internal SEC_DENIED_BY_ACCESS_FLAGS(Action<SEC_DENIED_BY_ACCESS_FLAGS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_DENIED_BY_ACCESS_FLAGS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "CurrentFlags", CurrentFlags);
             XmlAttrib(sb, "NeededFlags", NeededFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CurrentFlags", "NeededFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CurrentFlags;
                case 2:
                    return NeededFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_DENIED_BY_ACCESS_FLAGS> m_target;
        #endregion
    }
    public sealed class SEC_DENIED_BY_CGI_RESTRICTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ImageName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal SEC_DENIED_BY_CGI_RESTRICTION(Action<SEC_DENIED_BY_CGI_RESTRICTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_DENIED_BY_CGI_RESTRICTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ImageName", ImageName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ImageName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ImageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_DENIED_BY_CGI_RESTRICTION> m_target;
        #endregion
    }
    public sealed class SEC_DENIED_BY_ISAPI_RESTRICTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ImageName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal SEC_DENIED_BY_ISAPI_RESTRICTION(Action<SEC_DENIED_BY_ISAPI_RESTRICTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_DENIED_BY_ISAPI_RESTRICTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ImageName", ImageName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ImageName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ImageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_DENIED_BY_ISAPI_RESTRICTION> m_target;
        #endregion
    }
    public sealed class SEC_DENIED_BY_MIMEMAP : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal SEC_DENIED_BY_MIMEMAP(Action<SEC_DENIED_BY_MIMEMAP> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_DENIED_BY_MIMEMAP>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_DENIED_BY_MIMEMAP> m_target;
        #endregion
    }
    public sealed class SEC_FILE_ACCESS_DENIED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public string AccountName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string DomainName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal SEC_FILE_ACCESS_DENIED(Action<SEC_FILE_ACCESS_DENIED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_FILE_ACCESS_DENIED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             XmlAttrib(sb, "AccountName", AccountName);
             XmlAttrib(sb, "DomainName", DomainName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "AccountName", "DomainName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return AccountName;
                case 3:
                    return DomainName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_FILE_ACCESS_DENIED> m_target;
        #endregion
    }
    public sealed class SEC_ILLEGAL_SHORT_FILENAME : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal SEC_ILLEGAL_SHORT_FILENAME(Action<SEC_ILLEGAL_SHORT_FILENAME> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_ILLEGAL_SHORT_FILENAME>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FileName", FileName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_ILLEGAL_SHORT_FILENAME> m_target;
        #endregion
    }
    public sealed class SEC_REJECTED_HOSTNAME : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HostName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal SEC_REJECTED_HOSTNAME(Action<SEC_REJECTED_HOSTNAME> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_REJECTED_HOSTNAME>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "HostName", HostName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HostName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HostName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_REJECTED_HOSTNAME> m_target;
        #endregion
    }
    public sealed class SEC_REJECTED_IP : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string IPAddress { get { return GetUTF8StringAt(16); } }

        #region Private
        internal SEC_REJECTED_IP(Action<SEC_REJECTED_IP> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_REJECTED_IP>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "IPAddress", IPAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "IPAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return IPAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_REJECTED_IP> m_target;
        #endregion
    }
    public sealed class SEC_REQUIRE_SSL_128 : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal SEC_REQUIRE_SSL_128(Action<SEC_REQUIRE_SSL_128> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<SEC_REQUIRE_SSL_128>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SEC_REQUIRE_SSL_128> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_APPLICATION_CLOSE_CONNECTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal WEBSOCKET_APPLICATION_CLOSE_CONNECTION(Action<WEBSOCKET_APPLICATION_CLOSE_CONNECTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_APPLICATION_CLOSE_CONNECTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_APPLICATION_CLOSE_CONNECTION> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_CLOSE_RECEIVED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Status { get { return GetInt32At(16); } }
        public string Reason { get { return GetUnicodeStringAt(20); } }

        #region Private
        internal WEBSOCKET_CLOSE_RECEIVED(Action<WEBSOCKET_CLOSE_RECEIVED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(20)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(20)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_CLOSE_RECEIVED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Status", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Status;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_CLOSE_RECEIVED> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_CLOSE_SEND_FAILURE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_CLOSE_SEND_FAILURE(Action<WEBSOCKET_CLOSE_SEND_FAILURE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_CLOSE_SEND_FAILURE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_CLOSE_SEND_FAILURE> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_CLOSE_SEND_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Status { get { return GetInt32At(16); } }
        public string Reason { get { return GetUnicodeStringAt(20); } }

        #region Private
        internal WEBSOCKET_CLOSE_SEND_START(Action<WEBSOCKET_CLOSE_SEND_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(20)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(20)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_CLOSE_SEND_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Status", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Status;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_CLOSE_SEND_START> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_CLOSE_SEND_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal WEBSOCKET_CLOSE_SEND_SUCCESS(Action<WEBSOCKET_CLOSE_SEND_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_CLOSE_SEND_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_CLOSE_SEND_SUCCESS> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_END_FAILURE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_END_FAILURE(Action<WEBSOCKET_END_FAILURE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_END_FAILURE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_END_FAILURE> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_END_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal WEBSOCKET_END_SUCCESS(Action<WEBSOCKET_END_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_END_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_END_SUCCESS> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_INITIALIZE_NOT_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_INITIALIZE_NOT_SUCCESS(Action<WEBSOCKET_INITIALIZE_NOT_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_INITIALIZE_NOT_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_INITIALIZE_NOT_SUCCESS> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_MODULE_CLOSE_CONNECTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Reason { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_MODULE_CLOSE_CONNECTION(Action<WEBSOCKET_MODULE_CLOSE_CONNECTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_MODULE_CLOSE_CONNECTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_MODULE_CLOSE_CONNECTION> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_READ_FRAGMENT_END_FAILURE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_READ_FRAGMENT_END_FAILURE(Action<WEBSOCKET_READ_FRAGMENT_END_FAILURE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_READ_FRAGMENT_END_FAILURE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_READ_FRAGMENT_END_FAILURE> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_READ_FRAGMENT_END_PENDING : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal WEBSOCKET_READ_FRAGMENT_END_PENDING(Action<WEBSOCKET_READ_FRAGMENT_END_PENDING> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_READ_FRAGMENT_END_PENDING>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_READ_FRAGMENT_END_PENDING> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_READ_FRAGMENT_END_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesReceived { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_READ_FRAGMENT_END_SUCCESS(Action<WEBSOCKET_READ_FRAGMENT_END_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_READ_FRAGMENT_END_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesReceived", BytesReceived);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesReceived"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesReceived;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_READ_FRAGMENT_END_SUCCESS> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_READ_FRAGMENT_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BufferSize { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_READ_FRAGMENT_START(Action<WEBSOCKET_READ_FRAGMENT_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_READ_FRAGMENT_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BufferSize", BufferSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BufferSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BufferSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_READ_FRAGMENT_START> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_READ_IO_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_READ_IO_FAILED(Action<WEBSOCKET_READ_IO_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_READ_IO_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_READ_IO_FAILED> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal WEBSOCKET_START(Action<WEBSOCKET_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_START> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_WRITE_FRAGMENT_END_FAILURE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_WRITE_FRAGMENT_END_FAILURE(Action<WEBSOCKET_WRITE_FRAGMENT_END_FAILURE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_WRITE_FRAGMENT_END_FAILURE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_WRITE_FRAGMENT_END_FAILURE> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_WRITE_FRAGMENT_END_PENDING : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal WEBSOCKET_WRITE_FRAGMENT_END_PENDING(Action<WEBSOCKET_WRITE_FRAGMENT_END_PENDING> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_WRITE_FRAGMENT_END_PENDING>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_WRITE_FRAGMENT_END_PENDING> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS(Action<WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "BytesSent", BytesSent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_WRITE_FRAGMENT_END_SUCCESS> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_WRITE_FRAGMENT_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int DataType { get { return GetInt32At(16); } }
        public int DataSize { get { return GetInt32At(20); } }

        #region Private
        internal WEBSOCKET_WRITE_FRAGMENT_START(Action<WEBSOCKET_WRITE_FRAGMENT_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_WRITE_FRAGMENT_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "DataType", DataType);
             XmlAttrib(sb, "DataSize", DataSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "DataType", "DataSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return DataType;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_WRITE_FRAGMENT_START> m_target;
        #endregion
    }
    public sealed class WEBSOCKET_WRITE_IO_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal WEBSOCKET_WRITE_IO_FAILED(Action<WEBSOCKET_WRITE_IO_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<WEBSOCKET_WRITE_IO_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WEBSOCKET_WRITE_IO_FAILED> m_target;
        #endregion
    }
    public sealed class MODULE_SET_RESPONSE_ERROR_STATUS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public MODULE_SET_RESPONSE_ERROR_STATUSNotification Notification { get { return (MODULE_SET_RESPONSE_ERROR_STATUSNotification)GetInt32At(SkipUnicodeString(16)); } }
        public int HttpStatus { get { return GetInt32At(SkipUnicodeString(16)+4); } }
        public string HttpReason { get { return GetUTF8StringAt(SkipUnicodeString(16)+8); } }
        public int HttpSubStatus { get { return GetInt16At(SkipUTF8String(SkipUnicodeString(16)+8)); } }
        public int ErrorCode { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(16)+8)+2); } }
        public string ConfigExceptionInfo { get { return GetUnicodeStringAt(SkipUTF8String(SkipUnicodeString(16)+8)+6); } }

        #region Private
        internal MODULE_SET_RESPONSE_ERROR_STATUS(Action<MODULE_SET_RESPONSE_ERROR_STATUS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUTF8String(SkipUnicodeString(16)+8)+6)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUTF8String(SkipUnicodeString(16)+8)+6)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<MODULE_SET_RESPONSE_ERROR_STATUS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Notification", Notification);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpReason", HttpReason);
             XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "ConfigExceptionInfo", ConfigExceptionInfo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "HttpStatus", "HttpReason", "HttpSubStatus", "ErrorCode", "ConfigExceptionInfo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpReason;
                case 5:
                    return HttpSubStatus;
                case 6:
                    return ErrorCode;
                case 7:
                    return ConfigExceptionInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MODULE_SET_RESPONSE_ERROR_STATUS> m_target;
        #endregion
    }
    public sealed class NOTIFY_MODULE_COMPLETION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public NOTIFY_MODULE_COMPLETIONNotification Notification { get { return (NOTIFY_MODULE_COMPLETIONNotification)GetInt32At(SkipUnicodeString(16)); } }
        public bool fIsPostNotificationEvent { get { return GetInt32At(SkipUnicodeString(16)+4) != 0; } }
        public int CompletionBytes { get { return GetInt32At(SkipUnicodeString(16)+8); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)+12); } }

        #region Private
        internal NOTIFY_MODULE_COMPLETION(Action<NOTIFY_MODULE_COMPLETION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+16));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NOTIFY_MODULE_COMPLETION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Notification", Notification);
             XmlAttrib(sb, "fIsPostNotificationEvent", fIsPostNotificationEvent);
             XmlAttrib(sb, "CompletionBytes", CompletionBytes);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "fIsPostNotificationEvent", "CompletionBytes", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return fIsPostNotificationEvent;
                case 4:
                    return CompletionBytes;
                case 5:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NOTIFY_MODULE_COMPLETION> m_target;
        #endregion
    }
    public sealed class NOTIFY_MODULE_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public NOTIFY_MODULE_ENDNotification Notification { get { return (NOTIFY_MODULE_ENDNotification)GetInt32At(SkipUnicodeString(16)); } }
        public bool fIsPostNotificationEvent { get { return GetInt32At(SkipUnicodeString(16)+4) != 0; } }
        public NOTIFY_MODULE_ENDNotificationStatus NotificationStatus { get { return (NOTIFY_MODULE_ENDNotificationStatus)GetInt32At(SkipUnicodeString(16)+8); } }

        #region Private
        internal NOTIFY_MODULE_END(Action<NOTIFY_MODULE_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NOTIFY_MODULE_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Notification", Notification);
             XmlAttrib(sb, "fIsPostNotificationEvent", fIsPostNotificationEvent);
             XmlAttrib(sb, "NotificationStatus", NotificationStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "fIsPostNotificationEvent", "NotificationStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return fIsPostNotificationEvent;
                case 4:
                    return NotificationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NOTIFY_MODULE_END> m_target;
        #endregion
    }
    public sealed class NOTIFY_MODULE_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public NOTIFY_MODULE_STARTNotification Notification { get { return (NOTIFY_MODULE_STARTNotification)GetInt32At(SkipUnicodeString(16)); } }
        public bool fIsPostNotification { get { return GetInt32At(SkipUnicodeString(16)+4) != 0; } }

        #region Private
        internal NOTIFY_MODULE_START(Action<NOTIFY_MODULE_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<NOTIFY_MODULE_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Notification", Notification);
             XmlAttrib(sb, "fIsPostNotification", fIsPostNotification);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "fIsPostNotification"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return fIsPostNotification;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NOTIFY_MODULE_START> m_target;
        #endregion
    }
    public sealed class PRE_BEGIN_REQUEST_END : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public PRE_BEGIN_REQUEST_ENDNotificationStatus NotificationStatus { get { return (PRE_BEGIN_REQUEST_ENDNotificationStatus)GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal PRE_BEGIN_REQUEST_END(Action<PRE_BEGIN_REQUEST_END> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PRE_BEGIN_REQUEST_END>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "NotificationStatus", NotificationStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "NotificationStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return NotificationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PRE_BEGIN_REQUEST_END> m_target;
        #endregion
    }
    public sealed class PRE_BEGIN_REQUEST_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal PRE_BEGIN_REQUEST_START(Action<PRE_BEGIN_REQUEST_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<PRE_BEGIN_REQUEST_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PRE_BEGIN_REQUEST_START> m_target;
        #endregion
    }
    public sealed class REQUEST_NOTIFICATION_EVENTS_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public REQUEST_NOTIFICATION_EVENTS_ERRORNotification Notification { get { return (REQUEST_NOTIFICATION_EVENTS_ERRORNotification)GetInt32At(SkipUnicodeString(16)); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)+4); } }

        #region Private
        internal REQUEST_NOTIFICATION_EVENTS_ERROR(Action<REQUEST_NOTIFICATION_EVENTS_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<REQUEST_NOTIFICATION_EVENTS_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Notification", Notification);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<REQUEST_NOTIFICATION_EVENTS_ERROR> m_target;
        #endregion
    }
    public sealed class REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ErrorDescription { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION(Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorDescription", ErrorDescription);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorDescription"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorDescription;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_ERROR_DESCRIPTION> m_target;
        #endregion
    }
    public sealed class REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUSNotification Notification { get { return (REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUSNotification)GetInt32At(SkipUnicodeString(16)); } }
        public int HttpStatus { get { return GetInt32At(SkipUnicodeString(16)+4); } }
        public string HttpReason { get { return GetUTF8StringAt(SkipUnicodeString(16)+8); } }

        #region Private
        internal REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS(Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(16)+8)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(16)+8)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ModuleName", ModuleName);
             XmlAttrib(sb, "Notification", Notification);
             XmlAttrib(sb, "HttpStatus", HttpStatus);
             XmlAttrib(sb, "HttpReason", HttpReason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "HttpStatus", "HttpReason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUS> m_target;
        #endregion
    }
    public enum AUTH_REQUEST_AUTH_TYPERequestAuthType
    {
        Anonymous = 0x1,
        Basic = 0x2,
        NT = 0x4,
        Digest = 0x10,
        Passport = 0x40,
        CertMap = 0x80,
    }
    public enum AUTH_STARTAuthTypeSupported
    {
        Anonymous = 0x1,
        Basic = 0x2,
        NT = 0x4,
        Digest = 0x10,
        Passport = 0x40,
        MapCliCert = 0x80,
    }
    public enum AUTH_SUCCEEDEDAuthType
    {
        Anonymous = 0x1,
        Basic = 0x2,
        NT = 0x4,
        Digest = 0x10,
        Passport = 0x40,
        CertMap = 0x80,
    }
    public enum AUTH_SUCCEEDEDTokenImpersonationLevel
    {
        ImpersonationAnonymous = 0x0,
        ImpersonationIdentify = 0x1,
        ImpersonationImpersonate = 0x2,
        ImpersonationDelegate = 0x3,
        ImpersonationUnknown = 0x4,
    }
    public enum DYNAMIC_COMPRESSION_NOT_SUCCESSReason
    {
        NO_ACCEPT_ENCODING = 0x1,
        COMPRESSION_DISABLED = 0x2,
        NO_COMPRESSION_10 = 0x3,
        NO_COMPRESSION_PROXY = 0x4,
        NO_MATCHING_SCHEME = 0x5,
        UNKNOWN_ERROR = 0x6,
        HEADERS_SENT_TWICE = 0x7,
        NO_HEADER_SENT = 0x8,
        NOT_SUCCESS_STATUS = 0x9,
        ALREADY_CONTENT_ENCODING = 0xa,
        NO_COMPRESSION_RANGE = 0xb,
        NO_MATCHING_CONTENT_TYPE = 0xc,
    }
    public enum FILTER_ENDNotificationStatus
    {
        SF_STATUS_REQ_FINISHED = 0x8000000,
        SF_STATUS_REQ_FINISHED_KEEP_CONN = 0x8000001,
        SF_STATUS_REQ_NEXT_NOTIFICATION = 0x8000002,
        SF_STATUS_REQ_HANDLED_NOTIFICATION = 0x8000003,
        SF_STATUS_REQ_ERROR = 0x8000004,
        SF_STATUS_REQ_READ_NEXT = 0x8000005,
    }
    public enum GENERAL_GET_URL_METADATAAccessPerms
    {
        Read = 0x1,
        Write = 0x2,
        Exec = 0x4,
        SSL = 0x8,
        Source = 0x10,
        CliCert = 0x20,
        ReqCliCert = 0x40,
        MapCliCert = 0x80,
        SSL128 = 0x100,
        Script = 0x200,
        NoRemoteWrite = 0x400,
        NoRemoteRead = 0x1000,
        NoRemoteExec = 0x2000,
        NoRemoteScript = 0x4000,
        NoPhysicalDir = 0x8000,
    }
    public enum GENERAL_NOT_SEND_CUSTOM_ERRORReason
    {
        UNKNOWN = 0x0,
        SETSTATUS_SUCCESS = 0x1,
        SETSTATUS_TRYSKIP = 0x2,
        EXISTINGRESPONSE_PASSTHROUGH = 0x3,
        EXISTINGRESPONSE_AUTO = 0x4,
    }
    public enum HTTPSYS_CACHEABLECachePolicy
    {
        NO_CACHE = 0x0,
        USER_INVALIDATES = 0x1,
        TIME_TO_LIVE = 0x2,
    }
    public enum HTTPSYS_CACHEABLEReason
    {
        OK = 0x0,
        NO_METADATA = 0x1,
        HTTPSYS_CACHE_DISABLED = 0x2,
        FILE_COMPRESSIBLE = 0x3,
        FOOTER_ENABLED = 0x4,
        SUPRESSING_ENTITY = 0x5,
        URL_CHANGE_BY_FILTER = 0x6,
        HTTP_STATUS_NOT_OK = 0x7,
        CHILD_REQUEST = 0x8,
        HANDLER_HTTPSYS_UNFRIENDLY = 0x9,
        FILTER_CACHE_UNAWARE = 0xa,
        NON_ANONYMOUS_ACCESS = 0xb,
        IP_RESTRICTION_SET = 0xc,
        CUSTOM_LOGGING = 0xd,
        SSL_RESTRICTION = 0xe,
        ISAPI_NOT_CACHING = 0xf,
        STATIC_REQUEST_QUERYSTRING = 0x10,
        RESPONSE_MORE_DATA = 0x11,
        FILE_NOT_CACHED = 0x12,
        RESPONSE_SENDING_RAW_HEADERS = 0x13,
        DYNAMIC_COMPRESSION_ENABLED = 0x14,
        NO_PIPELINE_ENABLE = 0x15,
        VERB_NOT_GET = 0x16,
        NO_CACHE_INVALIDATOR = 0x17,
        HANDLER_CHANGED = 0x18,
        REQUEST_FILTER_RULE = 0x19,
    }
    public enum MODULE_SET_RESPONSE_ERROR_STATUSNotification
    {
        MAP_PATH = unchecked((int)0x80000000),
        PRE_BEGIN_REQUEST = 0x0,
        BEGIN_REQUEST = 0x1,
        AUTHENTICATE_REQUEST = 0x2,
        AUTHORIZE_REQUEST = 0x4,
        RESOLVE_REQUEST_CACHE = 0x8,
        MAP_REQUEST_HANDLER = 0x10,
        REQUEST_ACQUIRE_STATE = 0x20,
        PRE_EXECUTE_REQUEST_HANDLER = 0x40,
        EXECUTE_REQUEST_HANDLER = 0x80,
        RELEASE_REQUEST_STATE = 0x100,
        UPDATE_REQUEST_CACHE = 0x200,
        LOG_REQUEST = 0x400,
        END_REQUEST = 0x800,
        CUSTOM_NOTIFICATION = 0x10000000,
        SEND_RESPONSE = 0x20000000,
        READ_ENTITY = 0x40000000,
    }
    public enum NOTIFY_MODULE_COMPLETIONNotification
    {
        MAP_PATH = unchecked((int)0x80000000),
        BEGIN_REQUEST = 0x1,
        AUTHENTICATE_REQUEST = 0x2,
        AUTHORIZE_REQUEST = 0x4,
        RESOLVE_REQUEST_CACHE = 0x8,
        MAP_REQUEST_HANDLER = 0x10,
        REQUEST_ACQUIRE_STATE = 0x20,
        PRE_EXECUTE_REQUEST_HANDLER = 0x40,
        EXECUTE_REQUEST_HANDLER = 0x80,
        RELEASE_REQUEST_STATE = 0x100,
        UPDATE_REQUEST_CACHE = 0x200,
        LOG_REQUEST = 0x400,
        END_REQUEST = 0x800,
        CUSTOM_NOTIFICATION = 0x10000000,
        SEND_RESPONSE = 0x20000000,
        READ_ENTITY = 0x40000000,
    }
    public enum NOTIFY_MODULE_ENDNotification
    {
        MAP_PATH = unchecked((int)0x80000000),
        BEGIN_REQUEST = 0x1,
        AUTHENTICATE_REQUEST = 0x2,
        AUTHORIZE_REQUEST = 0x4,
        RESOLVE_REQUEST_CACHE = 0x8,
        MAP_REQUEST_HANDLER = 0x10,
        REQUEST_ACQUIRE_STATE = 0x20,
        PRE_EXECUTE_REQUEST_HANDLER = 0x40,
        EXECUTE_REQUEST_HANDLER = 0x80,
        RELEASE_REQUEST_STATE = 0x100,
        UPDATE_REQUEST_CACHE = 0x200,
        LOG_REQUEST = 0x400,
        END_REQUEST = 0x800,
        CUSTOM_NOTIFICATION = 0x10000000,
        SEND_RESPONSE = 0x20000000,
        READ_ENTITY = 0x40000000,
    }
    public enum NOTIFY_MODULE_ENDNotificationStatus
    {
        NOTIFICATION_CONTINUE = 0x0,
        NOTIFICATION_FINISH_REQUEST = 0x2,
    }
    public enum NOTIFY_MODULE_STARTNotification
    {
        MAP_PATH = unchecked((int)0x80000000),
        BEGIN_REQUEST = 0x1,
        AUTHENTICATE_REQUEST = 0x2,
        AUTHORIZE_REQUEST = 0x4,
        RESOLVE_REQUEST_CACHE = 0x8,
        MAP_REQUEST_HANDLER = 0x10,
        REQUEST_ACQUIRE_STATE = 0x20,
        PRE_EXECUTE_REQUEST_HANDLER = 0x40,
        EXECUTE_REQUEST_HANDLER = 0x80,
        RELEASE_REQUEST_STATE = 0x100,
        UPDATE_REQUEST_CACHE = 0x200,
        LOG_REQUEST = 0x400,
        END_REQUEST = 0x800,
        CUSTOM_NOTIFICATION = 0x10000000,
        SEND_RESPONSE = 0x20000000,
        READ_ENTITY = 0x40000000,
    }
    public enum OUTPUT_CACHE_LOOKUP_ENDResult
    {
        NOT_FOUND = 0x0,
        FOUND = 0x1,
        ACCEPT_NOT_MATCH = 0x2,
        ACCEPT_ENCODING_NOT_MATCH = 0x3,
        CACHING_DISABLED = 0x4,
        CONDITIONAL_HEADERS_PRESENT = 0x5,
    }
    public enum OUTPUT_CACHE_UPDATE_ENDResult
    {
        ADDED = 0x0,
        UNKNOWN_ERROR = 0x1,
        NOT_FREQUENTLY_HIT = 0x2,
        HEADERS_FLUSHED = 0x3,
        HEADERS_SUPPRESSED = 0x4,
        VERB_NOT_GET = 0x5,
        STATUS_NOT_OK = 0x6,
        CACHING_DISABLED = 0x7,
        RESPONSE_TOO_BIG = 0x8,
        CACHE_FULL = 0x9,
        VARY_BY_NOT_MATCH = 0xa,
        ENTRY_EXISTS = 0xb,
        ALREADY_CACHED = 0xc,
    }
    public enum OUTPUT_CACHE_UPDATE_STARTCachePolicy
    {
        NO_CACHE = 0x0,
        USER_INVALIDATES = 0x1,
        TIME_TO_LIVE = 0x2,
    }
    public enum PRE_BEGIN_REQUEST_ENDNotificationStatus
    {
        NOTIFICATION_CONTINUE = 0x0,
        NOTIFICATION_HANDLED = 0x1,
    }
    public enum REQUEST_NOTIFICATION_EVENTS_ERRORNotification
    {
        MAP_PATH = unchecked((int)0x80000000),
        BEGIN_REQUEST = 0x1,
        AUTHENTICATE_REQUEST = 0x2,
        AUTHORIZE_REQUEST = 0x4,
        RESOLVE_REQUEST_CACHE = 0x8,
        MAP_REQUEST_HANDLER = 0x10,
        REQUEST_ACQUIRE_STATE = 0x20,
        PRE_EXECUTE_REQUEST_HANDLER = 0x40,
        EXECUTE_REQUEST_HANDLER = 0x80,
        RELEASE_REQUEST_STATE = 0x100,
        UPDATE_REQUEST_CACHE = 0x200,
        LOG_REQUEST = 0x400,
        END_REQUEST = 0x800,
        CUSTOM_NOTIFICATION = 0x10000000,
        SEND_RESPONSE = 0x20000000,
        READ_ENTITY = 0x40000000,
    }
    public enum REQUEST_NOTIFICATION_EVENTS_RESPONSE_SUCCESS_STATUSNotification
    {
        MAP_PATH = unchecked((int)0x80000000),
        BEGIN_REQUEST = 0x1,
        AUTHENTICATE_REQUEST = 0x2,
        AUTHORIZE_REQUEST = 0x4,
        RESOLVE_REQUEST_CACHE = 0x8,
        MAP_REQUEST_HANDLER = 0x10,
        REQUEST_ACQUIRE_STATE = 0x20,
        PRE_EXECUTE_REQUEST_HANDLER = 0x40,
        EXECUTE_REQUEST_HANDLER = 0x80,
        RELEASE_REQUEST_STATE = 0x100,
        UPDATE_REQUEST_CACHE = 0x200,
        LOG_REQUEST = 0x400,
        END_REQUEST = 0x800,
        CUSTOM_NOTIFICATION = 0x10000000,
        SEND_RESPONSE = 0x20000000,
        READ_ENTITY = 0x40000000,
    }
    public enum STATIC_COMPRESSION_NOT_SUCCESSReason
    {
        NO_ACCEPT_ENCODING = 0x1,
        COMPRESSION_DISABLED = 0x2,
        NO_COMPRESSION_10 = 0x3,
        NO_COMPRESSION_PROXY = 0x4,
        NO_MATCHING_SCHEME = 0x5,
        UNKNOWN_ERROR = 0x6,
        NO_COMPRESSION_RANGE = 0x7,
        FILE_TOO_SMALL = 0x8,
        FILE_ENCRYPTED = 0x9,
        COMPRESS_FILE_NOT_FOUND = 0xa,
        COMPRESS_FILE_STALE = 0xb,
        NO_MATCHING_CONTENT_TYPE = 0xc,
        FOOTER_ENABLED = 0xd,
        NOT_FREQUENTLY_HIT = 0xe,
        FAIL_TO_COMPRESS = 0xf,
    }
}
