using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.ASP_Trace;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class ASP_TraceTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "ASP_Trace";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x06b94d9a), unchecked((short) 0xb15e), unchecked((short) 0x456e), 0xa4, 0xef, 0x37, 0xc9, 0x84, 0xa2, 0xcb, 0x4b);
        public enum Keywords : long
        {
        };

        public ASP_TraceTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<AspReqASP_APPLICATION_ONSTART_ERRORArgs> AspReqASP_APPLICATION_ONSTART_ERROR
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_APPLICATION_ONSTART_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<AspReqASP_APPLICATION_ONSTART_SUCCESSArgs> AspReqASP_APPLICATION_ONSTART_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_APPLICATION_ONSTART_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<AspReqASP_CLIENT_DISCONNECTEDArgs> AspReqASP_CLIENT_DISCONNECTED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_CLIENT_DISCONNECTEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<AspReqASP_COMPILE_FAILEDArgs> AspReqASP_COMPILE_FAILED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_COMPILE_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<AspReqASP_CURRENT_SESSIONArgs> AspReqASP_CURRENT_SESSION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_CURRENT_SESSIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
            }
        }
        public event Action<AspReqASP_DEQUEUE_REQUESTArgs> AspReqASP_DEQUEUE_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_DEQUEUE_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<AspReqASP_DONE_PROCESSINGArgs> AspReqASP_DONE_PROCESSING
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_DONE_PROCESSINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_APPLICATION_ONSTARTArgs> AspReqASP_END_APPLICATION_ONSTART
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_APPLICATION_ONSTARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_CACHE_ACCESSArgs> AspReqASP_END_CACHE_ACCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_CACHE_ACCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_COMPILEArgs> AspReqASP_END_COMPILE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_COMPILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_GLOBAL_ASA_CHECKArgs> AspReqASP_END_GLOBAL_ASA_CHECK
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_GLOBAL_ASA_CHECKTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_REQUESTArgs> AspReqASP_END_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_SCRIPT_EXECUTIONArgs> AspReqASP_END_SCRIPT_EXECUTION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_SCRIPT_EXECUTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_SCRIPTLESS_SENDArgs> AspReqASP_END_SCRIPTLESS_SEND
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_SCRIPTLESS_SENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<AspReqASP_END_SESSION_ONSTARTArgs> AspReqASP_END_SESSION_ONSTART
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_SESSION_ONSTARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<AspReqASP_FILE_ACCESS_DENIEDArgs> AspReqASP_FILE_ACCESS_DENIED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FILE_ACCESS_DENIEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<AspReqASP_FILE_NOT_FOUNDArgs> AspReqASP_FILE_NOT_FOUND
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FILE_NOT_FOUNDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs> AspReqASP_FIRST_REQUEST_FOR_APPLICATION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FIRST_REQUEST_FOR_APPLICATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<AspReqASP_FIRST_REQUEST_FOR_ASPArgs> AspReqASP_FIRST_REQUEST_FOR_ASP
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FIRST_REQUEST_FOR_ASPTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs> AspReqASP_GLOBAL_ASA_ACCESS_DENIED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_GLOBAL_ASA_ACCESS_DENIEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs> AspReqASP_GLOBAL_ASA_ACCESS_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs> AspReqASP_GLOBAL_ASA_DOES_NOT_EXIST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<AspReqASP_INIT_FAILUREArgs> AspReqASP_INIT_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_INIT_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<AspReqASP_LOG_ERRORArgs> AspReqASP_LOG_ERROR
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_LOG_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
            }
        }
        public event Action<AspReqASP_NEW_SESSION_CREATEDArgs> AspReqASP_NEW_SESSION_CREATED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_NEW_SESSION_CREATEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<AspReqASP_QUEUE_REQUESTArgs> AspReqASP_QUEUE_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_QUEUE_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<AspReqASP_QUEUE_REQUEST_FAILEDArgs> AspReqASP_QUEUE_REQUEST_FAILED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_QUEUE_REQUEST_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<AspReqASP_READ_FILEArgs> AspReqASP_READ_FILE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_READ_FILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<AspReqASP_REQUEST_TIMEOUTArgs> AspReqASP_REQUEST_TIMEOUT
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_REQUEST_TIMEOUTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs> AspReqASP_SCRIPT_TRACE_COM_CALL_END
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_COM_CALL_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs> AspReqASP_SCRIPT_TRACE_COM_CALL_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_COM_CALL_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs> AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_END
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs> AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_ENDArgs> AspReqASP_SCRIPT_TRACE_END
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs> AspReqASP_SCRIPT_TRACE_GET_OBJECT_END
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs> AspReqASP_SCRIPT_TRACE_GET_OBJECT_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SCRIPT_TRACE_STARTArgs> AspReqASP_SCRIPT_TRACE_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SECURE_SESSION_ID_SETArgs> AspReqASP_SECURE_SESSION_ID_SET
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SECURE_SESSION_ID_SETTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs> AspReqASP_SERVER_TOO_BUSY_TO_QUEUE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SERVER_TOO_BUSY_TO_QUEUETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SESSION_ONSTART_ERRORArgs> AspReqASP_SESSION_ONSTART_ERROR
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SESSION_ONSTART_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<AspReqASP_SESSION_ONSTART_SUCCESSArgs> AspReqASP_SESSION_ONSTART_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SESSION_ONSTART_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_APPLICATION_ONSTARTArgs> AspReqASP_START_APPLICATION_ONSTART
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_APPLICATION_ONSTARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_CACHE_ACCESSArgs> AspReqASP_START_CACHE_ACCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_CACHE_ACCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_COMPILEArgs> AspReqASP_START_COMPILE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_COMPILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_GLOBAL_ASA_CHECKArgs> AspReqASP_START_GLOBAL_ASA_CHECK
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_GLOBAL_ASA_CHECKTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_REQUESTArgs> AspReqASP_START_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_SCRIPT_EXECUTIONArgs> AspReqASP_START_SCRIPT_EXECUTION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SCRIPT_EXECUTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_SCRIPTLESS_SENDArgs> AspReqASP_START_SCRIPTLESS_SEND
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SCRIPTLESS_SENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<AspReqASP_START_SESSION_ONSTARTArgs> AspReqASP_START_SESSION_ONSTART
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SESSION_ONSTARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<AspReqASP_TRANSACTION_ABORTEDArgs> AspReqASP_TRANSACTION_ABORTED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_TRANSACTION_ABORTEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<AspReqASP_TRANSACTION_COMMITEDArgs> AspReqASP_TRANSACTION_COMMITED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_TRANSACTION_COMMITEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<AspReqASP_UNHEALTHY_FAILUREArgs> AspReqASP_UNHEALTHY_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_UNHEALTHY_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private AspReqASP_APPLICATION_ONSTART_ERRORArgs AspReqASP_APPLICATION_ONSTART_ERRORTemplate(Action<AspReqASP_APPLICATION_ONSTART_ERRORArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_APPLICATION_ONSTART_ERRORArgs(action, 28, 1, "AspReq", Guid.Empty, 38, "ASP_APPLICATION_ONSTART_ERROR", ProviderGuid, ProviderName );
        }
        static private AspReqASP_APPLICATION_ONSTART_SUCCESSArgs AspReqASP_APPLICATION_ONSTART_SUCCESSTemplate(Action<AspReqASP_APPLICATION_ONSTART_SUCCESSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_APPLICATION_ONSTART_SUCCESSArgs(action, 27, 1, "AspReq", Guid.Empty, 37, "ASP_APPLICATION_ONSTART_SUCCESS", ProviderGuid, ProviderName );
        }
        static private AspReqASP_CLIENT_DISCONNECTEDArgs AspReqASP_CLIENT_DISCONNECTEDTemplate(Action<AspReqASP_CLIENT_DISCONNECTEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_CLIENT_DISCONNECTEDArgs(action, 19, 1, "AspReq", Guid.Empty, 29, "ASP_CLIENT_DISCONNECTED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_COMPILE_FAILEDArgs AspReqASP_COMPILE_FAILEDTemplate(Action<AspReqASP_COMPILE_FAILEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_COMPILE_FAILEDArgs(action, 24, 1, "AspReq", Guid.Empty, 34, "ASP_COMPILE_FAILED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_CURRENT_SESSIONArgs AspReqASP_CURRENT_SESSIONTemplate(Action<AspReqASP_CURRENT_SESSIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_CURRENT_SESSIONArgs(action, 41, 1, "AspReq", Guid.Empty, 51, "ASP_CURRENT_SESSION", ProviderGuid, ProviderName );
        }
        static private AspReqASP_DEQUEUE_REQUESTArgs AspReqASP_DEQUEUE_REQUESTTemplate(Action<AspReqASP_DEQUEUE_REQUESTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_DEQUEUE_REQUESTArgs(action, 17, 1, "AspReq", Guid.Empty, 27, "ASP_DEQUEUE_REQUEST", ProviderGuid, ProviderName );
        }
        static private AspReqASP_DONE_PROCESSINGArgs AspReqASP_DONE_PROCESSINGTemplate(Action<AspReqASP_DONE_PROCESSINGArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_DONE_PROCESSINGArgs(action, 42, 1, "AspReq", Guid.Empty, 52, "ASP_DONE_PROCESSING", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_APPLICATION_ONSTARTArgs AspReqASP_END_APPLICATION_ONSTARTTemplate(Action<AspReqASP_END_APPLICATION_ONSTARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_APPLICATION_ONSTARTArgs(action, 26, 1, "AspReq", Guid.Empty, 36, "ASP_END_APPLICATION_ONSTART", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_CACHE_ACCESSArgs AspReqASP_END_CACHE_ACCESSTemplate(Action<AspReqASP_END_CACHE_ACCESSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_CACHE_ACCESSArgs(action, 40, 1, "AspReq", Guid.Empty, 50, "ASP_END_CACHE_ACCESS", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_COMPILEArgs AspReqASP_END_COMPILETemplate(Action<AspReqASP_END_COMPILEArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_COMPILEArgs(action, 38, 1, "AspReq", Guid.Empty, 48, "ASP_END_COMPILE", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_GLOBAL_ASA_CHECKArgs AspReqASP_END_GLOBAL_ASA_CHECKTemplate(Action<AspReqASP_END_GLOBAL_ASA_CHECKArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_GLOBAL_ASA_CHECKArgs(action, 7, 1, "AspReq", Guid.Empty, 17, "ASP_END_GLOBAL_ASA_CHECK", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_REQUESTArgs AspReqASP_END_REQUESTTemplate(Action<AspReqASP_END_REQUESTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_REQUESTArgs(action, 1, 1, "AspReq", Guid.Empty, 11, "ASP_END_REQUEST", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_SCRIPT_EXECUTIONArgs AspReqASP_END_SCRIPT_EXECUTIONTemplate(Action<AspReqASP_END_SCRIPT_EXECUTIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_SCRIPT_EXECUTIONArgs(action, 34, 1, "AspReq", Guid.Empty, 44, "ASP_END_SCRIPT_EXECUTION", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_SCRIPTLESS_SENDArgs AspReqASP_END_SCRIPTLESS_SENDTemplate(Action<AspReqASP_END_SCRIPTLESS_SENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_SCRIPTLESS_SENDArgs(action, 14, 1, "AspReq", Guid.Empty, 24, "ASP_END_SCRIPTLESS_SEND", ProviderGuid, ProviderName );
        }
        static private AspReqASP_END_SESSION_ONSTARTArgs AspReqASP_END_SESSION_ONSTARTTemplate(Action<AspReqASP_END_SESSION_ONSTARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_END_SESSION_ONSTARTArgs(action, 30, 1, "AspReq", Guid.Empty, 40, "ASP_END_SESSION_ONSTART", ProviderGuid, ProviderName );
        }
        static private AspReqASP_FILE_ACCESS_DENIEDArgs AspReqASP_FILE_ACCESS_DENIEDTemplate(Action<AspReqASP_FILE_ACCESS_DENIEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_FILE_ACCESS_DENIEDArgs(action, 21, 1, "AspReq", Guid.Empty, 31, "ASP_FILE_ACCESS_DENIED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_FILE_NOT_FOUNDArgs AspReqASP_FILE_NOT_FOUNDTemplate(Action<AspReqASP_FILE_NOT_FOUNDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_FILE_NOT_FOUNDArgs(action, 22, 1, "AspReq", Guid.Empty, 32, "ASP_FILE_NOT_FOUND", ProviderGuid, ProviderName );
        }
        static private AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs AspReqASP_FIRST_REQUEST_FOR_APPLICATIONTemplate(Action<AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs(action, 5, 1, "AspReq", Guid.Empty, 15, "ASP_FIRST_REQUEST_FOR_APPLICATION", ProviderGuid, ProviderName );
        }
        static private AspReqASP_FIRST_REQUEST_FOR_ASPArgs AspReqASP_FIRST_REQUEST_FOR_ASPTemplate(Action<AspReqASP_FIRST_REQUEST_FOR_ASPArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_FIRST_REQUEST_FOR_ASPArgs(action, 2, 1, "AspReq", Guid.Empty, 12, "ASP_FIRST_REQUEST_FOR_ASP", ProviderGuid, ProviderName );
        }
        static private AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs AspReqASP_GLOBAL_ASA_ACCESS_DENIEDTemplate(Action<AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs(action, 9, 1, "AspReq", Guid.Empty, 19, "ASP_GLOBAL_ASA_ACCESS_DENIED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSTemplate(Action<AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs(action, 10, 1, "AspReq", Guid.Empty, 20, "ASP_GLOBAL_ASA_ACCESS_SUCCESS", ProviderGuid, ProviderName );
        }
        static private AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTTemplate(Action<AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs(action, 8, 1, "AspReq", Guid.Empty, 18, "ASP_GLOBAL_ASA_DOES_NOT_EXIST", ProviderGuid, ProviderName );
        }
        static private AspReqASP_INIT_FAILUREArgs AspReqASP_INIT_FAILURETemplate(Action<AspReqASP_INIT_FAILUREArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_INIT_FAILUREArgs(action, 3, 1, "AspReq", Guid.Empty, 13, "ASP_INIT_FAILURE", ProviderGuid, ProviderName );
        }
        static private AspReqASP_LOG_ERRORArgs AspReqASP_LOG_ERRORTemplate(Action<AspReqASP_LOG_ERRORArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_LOG_ERRORArgs(action, 51, 1, "AspReq", Guid.Empty, 61, "ASP_LOG_ERROR", ProviderGuid, ProviderName );
        }
        static private AspReqASP_NEW_SESSION_CREATEDArgs AspReqASP_NEW_SESSION_CREATEDTemplate(Action<AspReqASP_NEW_SESSION_CREATEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_NEW_SESSION_CREATEDArgs(action, 11, 1, "AspReq", Guid.Empty, 21, "ASP_NEW_SESSION_CREATED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_QUEUE_REQUESTArgs AspReqASP_QUEUE_REQUESTTemplate(Action<AspReqASP_QUEUE_REQUESTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_QUEUE_REQUESTArgs(action, 16, 1, "AspReq", Guid.Empty, 26, "ASP_QUEUE_REQUEST", ProviderGuid, ProviderName );
        }
        static private AspReqASP_QUEUE_REQUEST_FAILEDArgs AspReqASP_QUEUE_REQUEST_FAILEDTemplate(Action<AspReqASP_QUEUE_REQUEST_FAILEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_QUEUE_REQUEST_FAILEDArgs(action, 18, 1, "AspReq", Guid.Empty, 28, "ASP_QUEUE_REQUEST_FAILED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_READ_FILEArgs AspReqASP_READ_FILETemplate(Action<AspReqASP_READ_FILEArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_READ_FILEArgs(action, 23, 1, "AspReq", Guid.Empty, 33, "ASP_READ_FILE", ProviderGuid, ProviderName );
        }
        static private AspReqASP_REQUEST_TIMEOUTArgs AspReqASP_REQUEST_TIMEOUTTemplate(Action<AspReqASP_REQUEST_TIMEOUTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_REQUEST_TIMEOUTArgs(action, 20, 1, "AspReq", Guid.Empty, 30, "ASP_REQUEST_TIMEOUT", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs AspReqASP_SCRIPT_TRACE_COM_CALL_ENDTemplate(Action<AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs(action, 46, 1, "AspReq", Guid.Empty, 56, "ASP_SCRIPT_TRACE_COM_CALL_END", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs AspReqASP_SCRIPT_TRACE_COM_CALL_STARTTemplate(Action<AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs(action, 45, 1, "AspReq", Guid.Empty, 55, "ASP_SCRIPT_TRACE_COM_CALL_START", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDTemplate(Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs(action, 48, 1, "AspReq", Guid.Empty, 58, "ASP_SCRIPT_TRACE_CREATE_OBJECT_END", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTTemplate(Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs(action, 47, 1, "AspReq", Guid.Empty, 57, "ASP_SCRIPT_TRACE_CREATE_OBJECT_START", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_ENDArgs AspReqASP_SCRIPT_TRACE_ENDTemplate(Action<AspReqASP_SCRIPT_TRACE_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_ENDArgs(action, 44, 1, "AspReq", Guid.Empty, 54, "ASP_SCRIPT_TRACE_END", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDTemplate(Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs(action, 50, 1, "AspReq", Guid.Empty, 60, "ASP_SCRIPT_TRACE_GET_OBJECT_END", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTTemplate(Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs(action, 49, 1, "AspReq", Guid.Empty, 59, "ASP_SCRIPT_TRACE_GET_OBJECT_START", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SCRIPT_TRACE_STARTArgs AspReqASP_SCRIPT_TRACE_STARTTemplate(Action<AspReqASP_SCRIPT_TRACE_STARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SCRIPT_TRACE_STARTArgs(action, 43, 1, "AspReq", Guid.Empty, 53, "ASP_SCRIPT_TRACE_START", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SECURE_SESSION_ID_SETArgs AspReqASP_SECURE_SESSION_ID_SETTemplate(Action<AspReqASP_SECURE_SESSION_ID_SETArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SECURE_SESSION_ID_SETArgs(action, 12, 1, "AspReq", Guid.Empty, 22, "ASP_SECURE_SESSION_ID_SET", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs AspReqASP_SERVER_TOO_BUSY_TO_QUEUETemplate(Action<AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs(action, 15, 1, "AspReq", Guid.Empty, 25, "ASP_SERVER_TOO_BUSY_TO_QUEUE", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SESSION_ONSTART_ERRORArgs AspReqASP_SESSION_ONSTART_ERRORTemplate(Action<AspReqASP_SESSION_ONSTART_ERRORArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SESSION_ONSTART_ERRORArgs(action, 32, 1, "AspReq", Guid.Empty, 42, "ASP_SESSION_ONSTART_ERROR", ProviderGuid, ProviderName );
        }
        static private AspReqASP_SESSION_ONSTART_SUCCESSArgs AspReqASP_SESSION_ONSTART_SUCCESSTemplate(Action<AspReqASP_SESSION_ONSTART_SUCCESSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_SESSION_ONSTART_SUCCESSArgs(action, 31, 1, "AspReq", Guid.Empty, 41, "ASP_SESSION_ONSTART_SUCCESS", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_APPLICATION_ONSTARTArgs AspReqASP_START_APPLICATION_ONSTARTTemplate(Action<AspReqASP_START_APPLICATION_ONSTARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_APPLICATION_ONSTARTArgs(action, 25, 1, "AspReq", Guid.Empty, 35, "ASP_START_APPLICATION_ONSTART", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_CACHE_ACCESSArgs AspReqASP_START_CACHE_ACCESSTemplate(Action<AspReqASP_START_CACHE_ACCESSArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_CACHE_ACCESSArgs(action, 39, 1, "AspReq", Guid.Empty, 49, "ASP_START_CACHE_ACCESS", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_COMPILEArgs AspReqASP_START_COMPILETemplate(Action<AspReqASP_START_COMPILEArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_COMPILEArgs(action, 37, 1, "AspReq", Guid.Empty, 47, "ASP_START_COMPILE", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_GLOBAL_ASA_CHECKArgs AspReqASP_START_GLOBAL_ASA_CHECKTemplate(Action<AspReqASP_START_GLOBAL_ASA_CHECKArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_GLOBAL_ASA_CHECKArgs(action, 6, 1, "AspReq", Guid.Empty, 16, "ASP_START_GLOBAL_ASA_CHECK", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_REQUESTArgs AspReqASP_START_REQUESTTemplate(Action<AspReqASP_START_REQUESTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_REQUESTArgs(action, 0, 1, "AspReq", Guid.Empty, 10, "ASP_START_REQUEST", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_SCRIPT_EXECUTIONArgs AspReqASP_START_SCRIPT_EXECUTIONTemplate(Action<AspReqASP_START_SCRIPT_EXECUTIONArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_SCRIPT_EXECUTIONArgs(action, 33, 1, "AspReq", Guid.Empty, 43, "ASP_START_SCRIPT_EXECUTION", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_SCRIPTLESS_SENDArgs AspReqASP_START_SCRIPTLESS_SENDTemplate(Action<AspReqASP_START_SCRIPTLESS_SENDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_SCRIPTLESS_SENDArgs(action, 13, 1, "AspReq", Guid.Empty, 23, "ASP_START_SCRIPTLESS_SEND", ProviderGuid, ProviderName );
        }
        static private AspReqASP_START_SESSION_ONSTARTArgs AspReqASP_START_SESSION_ONSTARTTemplate(Action<AspReqASP_START_SESSION_ONSTARTArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_START_SESSION_ONSTARTArgs(action, 29, 1, "AspReq", Guid.Empty, 39, "ASP_START_SESSION_ONSTART", ProviderGuid, ProviderName );
        }
        static private AspReqASP_TRANSACTION_ABORTEDArgs AspReqASP_TRANSACTION_ABORTEDTemplate(Action<AspReqASP_TRANSACTION_ABORTEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_TRANSACTION_ABORTEDArgs(action, 35, 1, "AspReq", Guid.Empty, 45, "ASP_TRANSACTION_ABORTED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_TRANSACTION_COMMITEDArgs AspReqASP_TRANSACTION_COMMITEDTemplate(Action<AspReqASP_TRANSACTION_COMMITEDArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_TRANSACTION_COMMITEDArgs(action, 36, 1, "AspReq", Guid.Empty, 46, "ASP_TRANSACTION_COMMITED", ProviderGuid, ProviderName );
        }
        static private AspReqASP_UNHEALTHY_FAILUREArgs AspReqASP_UNHEALTHY_FAILURETemplate(Action<AspReqASP_UNHEALTHY_FAILUREArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new AspReqASP_UNHEALTHY_FAILUREArgs(action, 4, 1, "AspReq", Guid.Empty, 14, "ASP_UNHEALTHY_FAILURE", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[52];
                templates[0] = AspReqASP_START_REQUESTTemplate(null);
                templates[1] = AspReqASP_END_REQUESTTemplate(null);
                templates[2] = AspReqASP_FIRST_REQUEST_FOR_ASPTemplate(null);
                templates[3] = AspReqASP_INIT_FAILURETemplate(null);
                templates[4] = AspReqASP_UNHEALTHY_FAILURETemplate(null);
                templates[5] = AspReqASP_FIRST_REQUEST_FOR_APPLICATIONTemplate(null);
                templates[6] = AspReqASP_START_GLOBAL_ASA_CHECKTemplate(null);
                templates[7] = AspReqASP_END_GLOBAL_ASA_CHECKTemplate(null);
                templates[8] = AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTTemplate(null);
                templates[9] = AspReqASP_GLOBAL_ASA_ACCESS_DENIEDTemplate(null);
                templates[10] = AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSTemplate(null);
                templates[11] = AspReqASP_NEW_SESSION_CREATEDTemplate(null);
                templates[12] = AspReqASP_SECURE_SESSION_ID_SETTemplate(null);
                templates[13] = AspReqASP_START_SCRIPTLESS_SENDTemplate(null);
                templates[14] = AspReqASP_END_SCRIPTLESS_SENDTemplate(null);
                templates[15] = AspReqASP_SERVER_TOO_BUSY_TO_QUEUETemplate(null);
                templates[16] = AspReqASP_QUEUE_REQUESTTemplate(null);
                templates[17] = AspReqASP_DEQUEUE_REQUESTTemplate(null);
                templates[18] = AspReqASP_QUEUE_REQUEST_FAILEDTemplate(null);
                templates[19] = AspReqASP_CLIENT_DISCONNECTEDTemplate(null);
                templates[20] = AspReqASP_REQUEST_TIMEOUTTemplate(null);
                templates[21] = AspReqASP_FILE_ACCESS_DENIEDTemplate(null);
                templates[22] = AspReqASP_FILE_NOT_FOUNDTemplate(null);
                templates[23] = AspReqASP_READ_FILETemplate(null);
                templates[24] = AspReqASP_COMPILE_FAILEDTemplate(null);
                templates[25] = AspReqASP_START_APPLICATION_ONSTARTTemplate(null);
                templates[26] = AspReqASP_END_APPLICATION_ONSTARTTemplate(null);
                templates[27] = AspReqASP_APPLICATION_ONSTART_SUCCESSTemplate(null);
                templates[28] = AspReqASP_APPLICATION_ONSTART_ERRORTemplate(null);
                templates[29] = AspReqASP_START_SESSION_ONSTARTTemplate(null);
                templates[30] = AspReqASP_END_SESSION_ONSTARTTemplate(null);
                templates[31] = AspReqASP_SESSION_ONSTART_SUCCESSTemplate(null);
                templates[32] = AspReqASP_SESSION_ONSTART_ERRORTemplate(null);
                templates[33] = AspReqASP_START_SCRIPT_EXECUTIONTemplate(null);
                templates[34] = AspReqASP_END_SCRIPT_EXECUTIONTemplate(null);
                templates[35] = AspReqASP_TRANSACTION_ABORTEDTemplate(null);
                templates[36] = AspReqASP_TRANSACTION_COMMITEDTemplate(null);
                templates[37] = AspReqASP_START_COMPILETemplate(null);
                templates[38] = AspReqASP_END_COMPILETemplate(null);
                templates[39] = AspReqASP_START_CACHE_ACCESSTemplate(null);
                templates[40] = AspReqASP_END_CACHE_ACCESSTemplate(null);
                templates[41] = AspReqASP_CURRENT_SESSIONTemplate(null);
                templates[42] = AspReqASP_DONE_PROCESSINGTemplate(null);
                templates[43] = AspReqASP_SCRIPT_TRACE_STARTTemplate(null);
                templates[44] = AspReqASP_SCRIPT_TRACE_ENDTemplate(null);
                templates[45] = AspReqASP_SCRIPT_TRACE_COM_CALL_STARTTemplate(null);
                templates[46] = AspReqASP_SCRIPT_TRACE_COM_CALL_ENDTemplate(null);
                templates[47] = AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTTemplate(null);
                templates[48] = AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDTemplate(null);
                templates[49] = AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTTemplate(null);
                templates[50] = AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDTemplate(null);
                templates[51] = AspReqASP_LOG_ERRORTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.ASP_Trace
{
    public sealed class AspReqASP_APPLICATION_ONSTART_ERRORArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AspReqASP_APPLICATION_ONSTART_ERRORArgs(Action<AspReqASP_APPLICATION_ONSTART_ERRORArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_APPLICATION_ONSTART_ERRORArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_APPLICATION_ONSTART_ERRORArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_APPLICATION_ONSTART_SUCCESSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_APPLICATION_ONSTART_SUCCESSArgs(Action<AspReqASP_APPLICATION_ONSTART_SUCCESSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_APPLICATION_ONSTART_SUCCESSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_APPLICATION_ONSTART_SUCCESSArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_CLIENT_DISCONNECTEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_CLIENT_DISCONNECTEDArgs(Action<AspReqASP_CLIENT_DISCONNECTEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_CLIENT_DISCONNECTEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_CLIENT_DISCONNECTEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_COMPILE_FAILEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal AspReqASP_COMPILE_FAILEDArgs(Action<AspReqASP_COMPILE_FAILEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_COMPILE_FAILEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_COMPILE_FAILEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_CURRENT_SESSIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string SessionID { get { return GetUTF8StringAt(16); } }

        #region Private
        internal AspReqASP_CURRENT_SESSIONArgs(Action<AspReqASP_CURRENT_SESSIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_CURRENT_SESSIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_CURRENT_SESSIONArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_DEQUEUE_REQUESTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_DEQUEUE_REQUESTArgs(Action<AspReqASP_DEQUEUE_REQUESTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_DEQUEUE_REQUESTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_DEQUEUE_REQUESTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_DONE_PROCESSINGArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_DONE_PROCESSINGArgs(Action<AspReqASP_DONE_PROCESSINGArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_DONE_PROCESSINGArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_DONE_PROCESSINGArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_APPLICATION_ONSTARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_APPLICATION_ONSTARTArgs(Action<AspReqASP_END_APPLICATION_ONSTARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_APPLICATION_ONSTARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_APPLICATION_ONSTARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_CACHE_ACCESSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }
        public AspEndCacheAccessAccessResult AccessResult { get { return (AspEndCacheAccessAccessResult)GetInt32At(20); } }

        #region Private
        internal AspReqASP_END_CACHE_ACCESSArgs(Action<AspReqASP_END_CACHE_ACCESSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_CACHE_ACCESSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "AccessResult", AccessResult);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode", "AccessResult"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                case 2:
                    return AccessResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_CACHE_ACCESSArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_COMPILEArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_COMPILEArgs(Action<AspReqASP_END_COMPILEArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_COMPILEArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_COMPILEArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_GLOBAL_ASA_CHECKArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_GLOBAL_ASA_CHECKArgs(Action<AspReqASP_END_GLOBAL_ASA_CHECKArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_GLOBAL_ASA_CHECKArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_GLOBAL_ASA_CHECKArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_REQUESTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_REQUESTArgs(Action<AspReqASP_END_REQUESTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_REQUESTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_REQUESTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_SCRIPT_EXECUTIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_SCRIPT_EXECUTIONArgs(Action<AspReqASP_END_SCRIPT_EXECUTIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_SCRIPT_EXECUTIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_SCRIPT_EXECUTIONArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_SCRIPTLESS_SENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_SCRIPTLESS_SENDArgs(Action<AspReqASP_END_SCRIPTLESS_SENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_SCRIPTLESS_SENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_SCRIPTLESS_SENDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_END_SESSION_ONSTARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_END_SESSION_ONSTARTArgs(Action<AspReqASP_END_SESSION_ONSTARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_END_SESSION_ONSTARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_END_SESSION_ONSTARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_FILE_ACCESS_DENIEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_FILE_ACCESS_DENIEDArgs(Action<AspReqASP_FILE_ACCESS_DENIEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_FILE_ACCESS_DENIEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_FILE_ACCESS_DENIEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_FILE_NOT_FOUNDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_FILE_NOT_FOUNDArgs(Action<AspReqASP_FILE_NOT_FOUNDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_FILE_NOT_FOUNDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_FILE_NOT_FOUNDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ApplicationPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs(Action<AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ApplicationPath", ApplicationPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ApplicationPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ApplicationPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_FIRST_REQUEST_FOR_APPLICATIONArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_FIRST_REQUEST_FOR_ASPArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_FIRST_REQUEST_FOR_ASPArgs(Action<AspReqASP_FIRST_REQUEST_FOR_ASPArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_FIRST_REQUEST_FOR_ASPArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_FIRST_REQUEST_FOR_ASPArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs(Action<AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_GLOBAL_ASA_ACCESS_DENIEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs(Action<AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_GLOBAL_ASA_ACCESS_SUCCESSArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs(Action<AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_GLOBAL_ASA_DOES_NOT_EXISTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_INIT_FAILUREArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public AspInitFailureReason Reason { get { return (AspInitFailureReason)GetInt32At(16); } }

        #region Private
        internal AspReqASP_INIT_FAILUREArgs(Action<AspReqASP_INIT_FAILUREArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_INIT_FAILUREArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_INIT_FAILUREArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_LOG_ERRORArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string LineNumber { get { return GetUTF8StringAt(16); } }
        public string ErrorCode { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string Description { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }

        #region Private
        internal AspReqASP_LOG_ERRORArgs(Action<AspReqASP_LOG_ERRORArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_LOG_ERRORArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "Description", Description);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "LineNumber", "ErrorCode", "Description"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return LineNumber;
                case 2:
                    return ErrorCode;
                case 3:
                    return Description;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_LOG_ERRORArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_NEW_SESSION_CREATEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string SessionId { get { return GetUTF8StringAt(16); } }

        #region Private
        internal AspReqASP_NEW_SESSION_CREATEDArgs(Action<AspReqASP_NEW_SESSION_CREATEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_NEW_SESSION_CREATEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_NEW_SESSION_CREATEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_QUEUE_REQUESTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_QUEUE_REQUESTArgs(Action<AspReqASP_QUEUE_REQUESTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_QUEUE_REQUESTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_QUEUE_REQUESTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_QUEUE_REQUEST_FAILEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AspReqASP_QUEUE_REQUEST_FAILEDArgs(Action<AspReqASP_QUEUE_REQUEST_FAILEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_QUEUE_REQUEST_FAILEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_QUEUE_REQUEST_FAILEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_READ_FILEArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_READ_FILEArgs(Action<AspReqASP_READ_FILEArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_READ_FILEArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_READ_FILEArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_REQUEST_TIMEOUTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_REQUEST_TIMEOUTArgs(Action<AspReqASP_REQUEST_TIMEOUTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_REQUEST_TIMEOUTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_REQUEST_TIMEOUTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs(Action<AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_COM_CALL_ENDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs(Action<AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_COM_CALL_STARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs(Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_ENDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs(Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_CREATE_OBJECT_STARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_ENDArgs(Action<AspReqASP_SCRIPT_TRACE_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_ENDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs(Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_ENDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs(Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_GET_OBJECT_STARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SCRIPT_TRACE_STARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_SCRIPT_TRACE_STARTArgs(Action<AspReqASP_SCRIPT_TRACE_STARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SCRIPT_TRACE_STARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SCRIPT_TRACE_STARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SECURE_SESSION_ID_SETArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string SessionId { get { return GetUTF8StringAt(16); } }

        #region Private
        internal AspReqASP_SECURE_SESSION_ID_SETArgs(Action<AspReqASP_SECURE_SESSION_ID_SETArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SECURE_SESSION_ID_SETArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SECURE_SESSION_ID_SETArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs(Action<AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SERVER_TOO_BUSY_TO_QUEUEArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SESSION_ONSTART_ERRORArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal AspReqASP_SESSION_ONSTART_ERRORArgs(Action<AspReqASP_SESSION_ONSTART_ERRORArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SESSION_ONSTART_ERRORArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SESSION_ONSTART_ERRORArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_SESSION_ONSTART_SUCCESSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_SESSION_ONSTART_SUCCESSArgs(Action<AspReqASP_SESSION_ONSTART_SUCCESSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_SESSION_ONSTART_SUCCESSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_SESSION_ONSTART_SUCCESSArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_APPLICATION_ONSTARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_START_APPLICATION_ONSTARTArgs(Action<AspReqASP_START_APPLICATION_ONSTARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_APPLICATION_ONSTARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_APPLICATION_ONSTARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_CACHE_ACCESSArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_START_CACHE_ACCESSArgs(Action<AspReqASP_START_CACHE_ACCESSArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_CACHE_ACCESSArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_CACHE_ACCESSArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_COMPILEArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_START_COMPILEArgs(Action<AspReqASP_START_COMPILEArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_COMPILEArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_COMPILEArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_GLOBAL_ASA_CHECKArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string GlobalASAPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal AspReqASP_START_GLOBAL_ASA_CHECKArgs(Action<AspReqASP_START_GLOBAL_ASA_CHECKArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_GLOBAL_ASA_CHECKArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "GlobalASAPath", GlobalASAPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "GlobalASAPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return GlobalASAPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_GLOBAL_ASA_CHECKArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_REQUESTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUTF8StringAt(16); } }

        #region Private
        internal AspReqASP_START_REQUESTArgs(Action<AspReqASP_START_REQUESTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_REQUESTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PhysicalPath", PhysicalPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_REQUESTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_SCRIPT_EXECUTIONArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_START_SCRIPT_EXECUTIONArgs(Action<AspReqASP_START_SCRIPT_EXECUTIONArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_SCRIPT_EXECUTIONArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_SCRIPT_EXECUTIONArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_SCRIPTLESS_SENDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_START_SCRIPTLESS_SENDArgs(Action<AspReqASP_START_SCRIPTLESS_SENDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_SCRIPTLESS_SENDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_SCRIPTLESS_SENDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_START_SESSION_ONSTARTArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_START_SESSION_ONSTARTArgs(Action<AspReqASP_START_SESSION_ONSTARTArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_START_SESSION_ONSTARTArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_START_SESSION_ONSTARTArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_TRANSACTION_ABORTEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_TRANSACTION_ABORTEDArgs(Action<AspReqASP_TRANSACTION_ABORTEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_TRANSACTION_ABORTEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_TRANSACTION_ABORTEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_TRANSACTION_COMMITEDArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal AspReqASP_TRANSACTION_COMMITEDArgs(Action<AspReqASP_TRANSACTION_COMMITEDArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_TRANSACTION_COMMITEDArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_TRANSACTION_COMMITEDArgs> m_target;
        #endregion
    }
    public sealed class AspReqASP_UNHEALTHY_FAILUREArgs : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public AspUnhealthyFailureReason Reason { get { return (AspUnhealthyFailureReason)GetInt32At(16); } }

        #region Private
        internal AspReqASP_UNHEALTHY_FAILUREArgs(Action<AspReqASP_UNHEALTHY_FAILUREArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<AspReqASP_UNHEALTHY_FAILUREArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AspReqASP_UNHEALTHY_FAILUREArgs> m_target;
        #endregion
    }
    public enum AspEndCacheAccessAccessResult
    {
        NOT_SERVED = 0x0,
        SERVED_CACHE_MISS = 0x1,
        SERVED_CACHE_HIT_CHANGENOTIF = 0x2,
        SERVED_CACHE_HIT_LASTMOD = 0x3,
        SERVED_CACHE_HIT_LASTMOD_NOACCESS = 0x4,
    }
    public enum AspInitFailureReason
    {
        METABASE_READ_FAILURE = 0x1,
        PERSISTED_CACHE_INIT_FAILURE = 0x2,
        COM_INIT_FAILURE = 0x4,
        METABASE_CHANGE_NOTIF_LISTENER_INIT_FAILURE = 0x8,
    }
    public enum AspUnhealthyFailureReason
    {
        DEADLOCK_DETECTED = 0x10,
        OUT_OF_MEMORY = 0x20,
    }
}
