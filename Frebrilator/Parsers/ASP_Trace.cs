using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.ASP_Trace;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class ASP_TraceTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "ASP_Trace";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x06b94d9a), unchecked((short) 0xb15e), unchecked((short) 0x456e), 0xa4, 0xef, 0x37, 0xc9, 0x84, 0xa2, 0xcb, 0x4b);
        public enum Keywords : long
        {
        };

        public ASP_TraceTraceEventParser(TraceEventSource source) : base(source) {}

        private static Guid AspReqTaskGuid = new Guid("{1fc299fa-3fc4-4c37-910d-de5b911d0270}");

        public event Action<ASP_APPLICATION_ON_START_ERROR> AspReqASP_APPLICATION_ON_START_ERROR
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_APPLICATION_ON_START_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_APPLICATION_ON_START_SUCCESS> AspReqASP_APPLICATION_ON_START_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_APPLICATION_ON_START_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_CLIENT_CONNECTION_DISCONNECTION> AspReqASP_CLIENT_CONNECTION_DISCONNECTION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_CLIENT_CONNECTION_DISCONNECTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_COMPILED_FAILED> AspReqASP_COMPILED_FAILED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_COMPILED_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_CURRENT_SESSION> AspReqASP_CURRENT_SESSION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_CURRENT_SESSIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_DEQUEUE_REQUEST> AspReqASP_DEQUEUE_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_DEQUEUE_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_DONE_PROCESSING> AspReqASP_DONE_PROCESSING
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_DONE_PROCESSINGTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_APPLICATION_ON_START> AspReqASP_END_APPLICATION_ON_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_APPLICATION_ON_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_CACHE_ACCESS> AspReqASP_END_CACHE_ACCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_CACHE_ACCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_COMPILE> AspReqASP_END_COMPILE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_COMPILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_GLOBALASA_CHECK> AspReqASP_END_GLOBALASA_CHECK
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_GLOBALASA_CHECKTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_REQUEST> AspReqASP_END_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_SCRIPT_EXECUTION> AspReqASP_END_SCRIPT_EXECUTION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_SCRIPT_EXECUTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_SCRIPTLESS_SEND> AspReqASP_END_SCRIPTLESS_SEND
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_SCRIPTLESS_SENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_END_SESSION_ON_START> AspReqASP_END_SESSION_ON_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_END_SESSION_ON_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_FILE_ACCESS_DENIED> AspReqASP_FILE_ACCESS_DENIED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FILE_ACCESS_DENIEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_FILE_NOT_FOUND> AspReqASP_FILE_NOT_FOUND
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FILE_NOT_FOUNDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_FIRST_REQUEST> AspReqASP_FIRST_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FIRST_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_FIRST_REQUEST_FOR_APPLICATION> AspReqASP_FIRST_REQUEST_FOR_APPLICATION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_FIRST_REQUEST_FOR_APPLICATIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_GLOBALASA_ACCESS_DENIED> AspReqASP_GLOBALASA_ACCESS_DENIED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_GLOBALASA_ACCESS_DENIEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_GLOBALASA_ACCESS_SUCCESS> AspReqASP_GLOBALASA_ACCESS_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_GLOBALASA_ACCESS_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_GLOBALASA_DOES_NOT_EXIST> AspReqASP_GLOBALASA_DOES_NOT_EXIST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_GLOBALASA_DOES_NOT_EXISTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_INIT_FAILURE> AspReqASP_INIT_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_INIT_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_LOG_ERROR> AspReqASP_LOG_ERROR
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_LOG_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_NEW_SESSION> AspReqASP_NEW_SESSION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_NEW_SESSIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_QUEUE_REQUEST> AspReqASP_QUEUE_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_QUEUE_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_QUEUE_REQUEST_FAILED> AspReqASP_QUEUE_REQUEST_FAILED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_QUEUE_REQUEST_FAILEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_READ_FILE> AspReqASP_READ_FILE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_READ_FILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_REQUEST_TIMEOUT> AspReqASP_REQUEST_TIMEOUT
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_REQUEST_TIMEOUTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_SCRIPT_OBJECT_TRACE_INFO> AspReqASP_SCRIPT_OBJECT_TRACE_INFO
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_SCRIPT_TRACE_INFO> AspReqASP_SCRIPT_TRACE_INFO
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SCRIPT_TRACE_INFOTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_SECURE_SESSIONID> AspReqASP_SECURE_SESSIONID
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SECURE_SESSIONIDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_SERVER_TOO_BUSY> AspReqASP_SERVER_TOO_BUSY
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_SERVER_TOO_BUSYTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_APPLICATION_ON_START> AspReqASP_START_APPLICATION_ON_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_APPLICATION_ON_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_CACHE_ACCESS> AspReqASP_START_CACHE_ACCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_CACHE_ACCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_COMPILE> AspReqASP_START_COMPILE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_COMPILETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_GLOBALASA_CHECK> AspReqASP_START_GLOBALASA_CHECK
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_GLOBALASA_CHECKTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_REQUEST> AspReqASP_START_REQUEST
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_REQUESTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_SCRIPT_EXECUTION> AspReqASP_START_SCRIPT_EXECUTION
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SCRIPT_EXECUTIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_SCRIPTLESS_SEND> AspReqASP_START_SCRIPTLESS_SEND
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SCRIPTLESS_SENDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_SESSION_ON_START> AspReqASP_START_SESSION_ON_START
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SESSION_ON_STARTTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_SESSION_ON_START_ERROR> AspReqASP_START_SESSION_ON_START_ERROR
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SESSION_ON_START_ERRORTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_START_SESSION_ON_START_SUCCESS> AspReqASP_START_SESSION_ON_START_SUCCESS
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_START_SESSION_ON_START_SUCCESSTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_TRANSACTION_ABORTED> AspReqASP_TRANSACTION_ABORTED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_TRANSACTION_ABORTEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_TRANSACTION_COMMITED> AspReqASP_TRANSACTION_COMMITED
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_TRANSACTION_COMMITEDTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ASP_UNHEALTHY_FAILURE> AspReqASP_UNHEALTHY_FAILURE
        {
            add
            {
                source.RegisterEventTemplate(AspReqASP_UNHEALTHY_FAILURETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private ASP_APPLICATION_ON_START_ERROR AspReqASP_APPLICATION_ON_START_ERRORTemplate(Action<ASP_APPLICATION_ON_START_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_APPLICATION_ON_START_ERROR(action, 65535, 0, "AspReq", AspReqTaskGuid, 37, "ASP_APPLICATION_ON_START_ERROR", ProviderGuid, ProviderName );
        }
        static private ASP_APPLICATION_ON_START_SUCCESS AspReqASP_APPLICATION_ON_START_SUCCESSTemplate(Action<ASP_APPLICATION_ON_START_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_APPLICATION_ON_START_SUCCESS(action, 65535, 0, "AspReq", AspReqTaskGuid, 38, "ASP_APPLICATION_ON_START_SUCCESS", ProviderGuid, ProviderName );
        }
        static private ASP_CLIENT_CONNECTION_DISCONNECTION AspReqASP_CLIENT_CONNECTION_DISCONNECTIONTemplate(Action<ASP_CLIENT_CONNECTION_DISCONNECTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_CLIENT_CONNECTION_DISCONNECTION(action, 65535, 0, "AspReq", AspReqTaskGuid, 29, "ASP_CLIENT_CONNECTION_DISCONNECTION", ProviderGuid, ProviderName );
        }
        static private ASP_COMPILED_FAILED AspReqASP_COMPILED_FAILEDTemplate(Action<ASP_COMPILED_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_COMPILED_FAILED(action, 65535, 0, "AspReq", AspReqTaskGuid, 34, "ASP_COMPILED_FAILED", ProviderGuid, ProviderName );
        }
        static private ASP_CURRENT_SESSION AspReqASP_CURRENT_SESSIONTemplate(Action<ASP_CURRENT_SESSION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_CURRENT_SESSION(action, 65535, 0, "AspReq", AspReqTaskGuid, 51, "ASP_CURRENT_SESSION", ProviderGuid, ProviderName );
        }
        static private ASP_DEQUEUE_REQUEST AspReqASP_DEQUEUE_REQUESTTemplate(Action<ASP_DEQUEUE_REQUEST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_DEQUEUE_REQUEST(action, 65535, 0, "AspReq", AspReqTaskGuid, 1, "ASP_DEQUEUE_REQUEST", ProviderGuid, ProviderName );
        }
        static private ASP_DONE_PROCESSING AspReqASP_DONE_PROCESSINGTemplate(Action<ASP_DONE_PROCESSING> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_DONE_PROCESSING(action, 65535, 0, "AspReq", AspReqTaskGuid, 2, "ASP_DONE_PROCESSING", ProviderGuid, ProviderName );
        }
        static private ASP_END_APPLICATION_ON_START AspReqASP_END_APPLICATION_ON_STARTTemplate(Action<ASP_END_APPLICATION_ON_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_APPLICATION_ON_START(action, 65535, 0, "AspReq", AspReqTaskGuid, 36, "ASP_END_APPLICATION_ON_START", ProviderGuid, ProviderName );
        }
        static private ASP_END_CACHE_ACCESS AspReqASP_END_CACHE_ACCESSTemplate(Action<ASP_END_CACHE_ACCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_CACHE_ACCESS(action, 65535, 0, "AspReq", AspReqTaskGuid, 50, "ASP_END_CACHE_ACCESS", ProviderGuid, ProviderName );
        }
        static private ASP_END_COMPILE AspReqASP_END_COMPILETemplate(Action<ASP_END_COMPILE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_COMPILE(action, 65535, 0, "AspReq", AspReqTaskGuid, 48, "ASP_END_COMPILE", ProviderGuid, ProviderName );
        }
        static private ASP_END_GLOBALASA_CHECK AspReqASP_END_GLOBALASA_CHECKTemplate(Action<ASP_END_GLOBALASA_CHECK> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_GLOBALASA_CHECK(action, 65535, 0, "AspReq", AspReqTaskGuid, 17, "ASP_END_GLOBALASA_CHECK", ProviderGuid, ProviderName );
        }
        static private ASP_END_REQUEST AspReqASP_END_REQUESTTemplate(Action<ASP_END_REQUEST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_REQUEST(action, 65535, 0, "AspReq", AspReqTaskGuid, 11, "ASP_END_REQUEST", ProviderGuid, ProviderName );
        }
        static private ASP_END_SCRIPT_EXECUTION AspReqASP_END_SCRIPT_EXECUTIONTemplate(Action<ASP_END_SCRIPT_EXECUTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_SCRIPT_EXECUTION(action, 65535, 0, "AspReq", AspReqTaskGuid, 44, "ASP_END_SCRIPT_EXECUTION", ProviderGuid, ProviderName );
        }
        static private ASP_END_SCRIPTLESS_SEND AspReqASP_END_SCRIPTLESS_SENDTemplate(Action<ASP_END_SCRIPTLESS_SEND> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_SCRIPTLESS_SEND(action, 65535, 0, "AspReq", AspReqTaskGuid, 24, "ASP_END_SCRIPTLESS_SEND", ProviderGuid, ProviderName );
        }
        static private ASP_END_SESSION_ON_START AspReqASP_END_SESSION_ON_STARTTemplate(Action<ASP_END_SESSION_ON_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_END_SESSION_ON_START(action, 65535, 0, "AspReq", AspReqTaskGuid, 40, "ASP_END_SESSION_ON_START", ProviderGuid, ProviderName );
        }
        static private ASP_FILE_ACCESS_DENIED AspReqASP_FILE_ACCESS_DENIEDTemplate(Action<ASP_FILE_ACCESS_DENIED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_FILE_ACCESS_DENIED(action, 65535, 0, "AspReq", AspReqTaskGuid, 31, "ASP_FILE_ACCESS_DENIED", ProviderGuid, ProviderName );
        }
        static private ASP_FILE_NOT_FOUND AspReqASP_FILE_NOT_FOUNDTemplate(Action<ASP_FILE_NOT_FOUND> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_FILE_NOT_FOUND(action, 65535, 0, "AspReq", AspReqTaskGuid, 32, "ASP_FILE_NOT_FOUND", ProviderGuid, ProviderName );
        }
        static private ASP_FIRST_REQUEST AspReqASP_FIRST_REQUESTTemplate(Action<ASP_FIRST_REQUEST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_FIRST_REQUEST(action, 65535, 0, "AspReq", AspReqTaskGuid, 12, "ASP_FIRST_REQUEST", ProviderGuid, ProviderName );
        }
        static private ASP_FIRST_REQUEST_FOR_APPLICATION AspReqASP_FIRST_REQUEST_FOR_APPLICATIONTemplate(Action<ASP_FIRST_REQUEST_FOR_APPLICATION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_FIRST_REQUEST_FOR_APPLICATION(action, 65535, 0, "AspReq", AspReqTaskGuid, 15, "ASP_FIRST_REQUEST_FOR_APPLICATION", ProviderGuid, ProviderName );
        }
        static private ASP_GLOBALASA_ACCESS_DENIED AspReqASP_GLOBALASA_ACCESS_DENIEDTemplate(Action<ASP_GLOBALASA_ACCESS_DENIED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_GLOBALASA_ACCESS_DENIED(action, 65535, 0, "AspReq", AspReqTaskGuid, 19, "ASP_GLOBALASA_ACCESS_DENIED", ProviderGuid, ProviderName );
        }
        static private ASP_GLOBALASA_ACCESS_SUCCESS AspReqASP_GLOBALASA_ACCESS_SUCCESSTemplate(Action<ASP_GLOBALASA_ACCESS_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_GLOBALASA_ACCESS_SUCCESS(action, 65535, 0, "AspReq", AspReqTaskGuid, 20, "ASP_GLOBALASA_ACCESS_SUCCESS", ProviderGuid, ProviderName );
        }
        static private ASP_GLOBALASA_DOES_NOT_EXIST AspReqASP_GLOBALASA_DOES_NOT_EXISTTemplate(Action<ASP_GLOBALASA_DOES_NOT_EXIST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_GLOBALASA_DOES_NOT_EXIST(action, 65535, 0, "AspReq", AspReqTaskGuid, 18, "ASP_GLOBALASA_DOES_NOT_EXIST", ProviderGuid, ProviderName );
        }
        static private ASP_INIT_FAILURE AspReqASP_INIT_FAILURETemplate(Action<ASP_INIT_FAILURE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_INIT_FAILURE(action, 65535, 0, "AspReq", AspReqTaskGuid, 13, "ASP_INIT_FAILURE", ProviderGuid, ProviderName );
        }
        static private ASP_LOG_ERROR AspReqASP_LOG_ERRORTemplate(Action<ASP_LOG_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_LOG_ERROR(action, 65535, 0, "AspReq", AspReqTaskGuid, 60, "ASP_LOG_ERROR", ProviderGuid, ProviderName );
        }
        static private ASP_NEW_SESSION AspReqASP_NEW_SESSIONTemplate(Action<ASP_NEW_SESSION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_NEW_SESSION(action, 65535, 0, "AspReq", AspReqTaskGuid, 21, "ASP_NEW_SESSION", ProviderGuid, ProviderName );
        }
        static private ASP_QUEUE_REQUEST AspReqASP_QUEUE_REQUESTTemplate(Action<ASP_QUEUE_REQUEST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_QUEUE_REQUEST(action, 65535, 0, "AspReq", AspReqTaskGuid, 26, "ASP_QUEUE_REQUEST", ProviderGuid, ProviderName );
        }
        static private ASP_QUEUE_REQUEST_FAILED AspReqASP_QUEUE_REQUEST_FAILEDTemplate(Action<ASP_QUEUE_REQUEST_FAILED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_QUEUE_REQUEST_FAILED(action, 65535, 0, "AspReq", AspReqTaskGuid, 28, "ASP_QUEUE_REQUEST_FAILED", ProviderGuid, ProviderName );
        }
        static private ASP_READ_FILE AspReqASP_READ_FILETemplate(Action<ASP_READ_FILE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_READ_FILE(action, 65535, 0, "AspReq", AspReqTaskGuid, 33, "ASP_READ_FILE", ProviderGuid, ProviderName );
        }
        static private ASP_REQUEST_TIMEOUT AspReqASP_REQUEST_TIMEOUTTemplate(Action<ASP_REQUEST_TIMEOUT> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_REQUEST_TIMEOUT(action, 65535, 0, "AspReq", AspReqTaskGuid, 30, "ASP_REQUEST_TIMEOUT", ProviderGuid, ProviderName );
        }
        static private ASP_SCRIPT_OBJECT_TRACE_INFO AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(Action<ASP_SCRIPT_OBJECT_TRACE_INFO> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_SCRIPT_OBJECT_TRACE_INFO(action, 65535, 0, "AspReq", AspReqTaskGuid, 54, "ASP_SCRIPT_OBJECT_TRACE_INFO", ProviderGuid, ProviderName );
        }
        static private ASP_SCRIPT_TRACE_INFO AspReqASP_SCRIPT_TRACE_INFOTemplate(Action<ASP_SCRIPT_TRACE_INFO> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_SCRIPT_TRACE_INFO(action, 65535, 0, "AspReq", AspReqTaskGuid, 52, "ASP_SCRIPT_TRACE_INFO", ProviderGuid, ProviderName );
        }
        static private ASP_SECURE_SESSIONID AspReqASP_SECURE_SESSIONIDTemplate(Action<ASP_SECURE_SESSIONID> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_SECURE_SESSIONID(action, 65535, 0, "AspReq", AspReqTaskGuid, 22, "ASP_SECURE_SESSIONID", ProviderGuid, ProviderName );
        }
        static private ASP_SERVER_TOO_BUSY AspReqASP_SERVER_TOO_BUSYTemplate(Action<ASP_SERVER_TOO_BUSY> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_SERVER_TOO_BUSY(action, 65535, 0, "AspReq", AspReqTaskGuid, 25, "ASP_SERVER_TOO_BUSY", ProviderGuid, ProviderName );
        }
        static private ASP_START_APPLICATION_ON_START AspReqASP_START_APPLICATION_ON_STARTTemplate(Action<ASP_START_APPLICATION_ON_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_APPLICATION_ON_START(action, 65535, 0, "AspReq", AspReqTaskGuid, 35, "ASP_START_APPLICATION_ON_START", ProviderGuid, ProviderName );
        }
        static private ASP_START_CACHE_ACCESS AspReqASP_START_CACHE_ACCESSTemplate(Action<ASP_START_CACHE_ACCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_CACHE_ACCESS(action, 65535, 0, "AspReq", AspReqTaskGuid, 49, "ASP_START_CACHE_ACCESS", ProviderGuid, ProviderName );
        }
        static private ASP_START_COMPILE AspReqASP_START_COMPILETemplate(Action<ASP_START_COMPILE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_COMPILE(action, 65535, 0, "AspReq", AspReqTaskGuid, 47, "ASP_START_COMPILE", ProviderGuid, ProviderName );
        }
        static private ASP_START_GLOBALASA_CHECK AspReqASP_START_GLOBALASA_CHECKTemplate(Action<ASP_START_GLOBALASA_CHECK> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_GLOBALASA_CHECK(action, 65535, 0, "AspReq", AspReqTaskGuid, 16, "ASP_START_GLOBALASA_CHECK", ProviderGuid, ProviderName );
        }
        static private ASP_START_REQUEST AspReqASP_START_REQUESTTemplate(Action<ASP_START_REQUEST> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_REQUEST(action, 65535, 0, "AspReq", AspReqTaskGuid, 10, "ASP_START_REQUEST", ProviderGuid, ProviderName );
        }
        static private ASP_START_SCRIPT_EXECUTION AspReqASP_START_SCRIPT_EXECUTIONTemplate(Action<ASP_START_SCRIPT_EXECUTION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_SCRIPT_EXECUTION(action, 65535, 0, "AspReq", AspReqTaskGuid, 43, "ASP_START_SCRIPT_EXECUTION", ProviderGuid, ProviderName );
        }
        static private ASP_START_SCRIPTLESS_SEND AspReqASP_START_SCRIPTLESS_SENDTemplate(Action<ASP_START_SCRIPTLESS_SEND> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_SCRIPTLESS_SEND(action, 65535, 0, "AspReq", AspReqTaskGuid, 23, "ASP_START_SCRIPTLESS_SEND", ProviderGuid, ProviderName );
        }
        static private ASP_START_SESSION_ON_START AspReqASP_START_SESSION_ON_STARTTemplate(Action<ASP_START_SESSION_ON_START> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_SESSION_ON_START(action, 65535, 0, "AspReq", AspReqTaskGuid, 39, "ASP_START_SESSION_ON_START", ProviderGuid, ProviderName );
        }
        static private ASP_START_SESSION_ON_START_ERROR AspReqASP_START_SESSION_ON_START_ERRORTemplate(Action<ASP_START_SESSION_ON_START_ERROR> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_SESSION_ON_START_ERROR(action, 65535, 0, "AspReq", AspReqTaskGuid, 41, "ASP_START_SESSION_ON_START_ERROR", ProviderGuid, ProviderName );
        }
        static private ASP_START_SESSION_ON_START_SUCCESS AspReqASP_START_SESSION_ON_START_SUCCESSTemplate(Action<ASP_START_SESSION_ON_START_SUCCESS> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_START_SESSION_ON_START_SUCCESS(action, 65535, 0, "AspReq", AspReqTaskGuid, 42, "ASP_START_SESSION_ON_START_SUCCESS", ProviderGuid, ProviderName );
        }
        static private ASP_TRANSACTION_ABORTED AspReqASP_TRANSACTION_ABORTEDTemplate(Action<ASP_TRANSACTION_ABORTED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_TRANSACTION_ABORTED(action, 65535, 0, "AspReq", AspReqTaskGuid, 45, "ASP_TRANSACTION_ABORTED", ProviderGuid, ProviderName );
        }
        static private ASP_TRANSACTION_COMMITED AspReqASP_TRANSACTION_COMMITEDTemplate(Action<ASP_TRANSACTION_COMMITED> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_TRANSACTION_COMMITED(action, 65535, 0, "AspReq", AspReqTaskGuid, 46, "ASP_TRANSACTION_COMMITED", ProviderGuid, ProviderName );
        }
        static private ASP_UNHEALTHY_FAILURE AspReqASP_UNHEALTHY_FAILURETemplate(Action<ASP_UNHEALTHY_FAILURE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ASP_UNHEALTHY_FAILURE(action, 65535, 0, "AspReq", AspReqTaskGuid, 14, "ASP_UNHEALTHY_FAILURE", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[52];
                templates[0] = AspReqASP_START_REQUESTTemplate(null);
                templates[1] = AspReqASP_END_REQUESTTemplate(null);
                templates[2] = AspReqASP_FIRST_REQUESTTemplate(null);
                templates[3] = AspReqASP_INIT_FAILURETemplate(null);
                templates[4] = AspReqASP_UNHEALTHY_FAILURETemplate(null);
                templates[5] = AspReqASP_FIRST_REQUEST_FOR_APPLICATIONTemplate(null);
                templates[6] = AspReqASP_START_GLOBALASA_CHECKTemplate(null);
                templates[7] = AspReqASP_END_GLOBALASA_CHECKTemplate(null);
                templates[8] = AspReqASP_GLOBALASA_DOES_NOT_EXISTTemplate(null);
                templates[9] = AspReqASP_GLOBALASA_ACCESS_DENIEDTemplate(null);
                templates[10] = AspReqASP_GLOBALASA_ACCESS_SUCCESSTemplate(null);
                templates[11] = AspReqASP_NEW_SESSIONTemplate(null);
                templates[12] = AspReqASP_SECURE_SESSIONIDTemplate(null);
                templates[13] = AspReqASP_START_SCRIPTLESS_SENDTemplate(null);
                templates[14] = AspReqASP_END_SCRIPTLESS_SENDTemplate(null);
                templates[15] = AspReqASP_SERVER_TOO_BUSYTemplate(null);
                templates[16] = AspReqASP_QUEUE_REQUESTTemplate(null);
                templates[17] = AspReqASP_DEQUEUE_REQUESTTemplate(null);
                templates[18] = AspReqASP_QUEUE_REQUEST_FAILEDTemplate(null);
                templates[19] = AspReqASP_CLIENT_CONNECTION_DISCONNECTIONTemplate(null);
                templates[20] = AspReqASP_REQUEST_TIMEOUTTemplate(null);
                templates[21] = AspReqASP_FILE_ACCESS_DENIEDTemplate(null);
                templates[22] = AspReqASP_FILE_NOT_FOUNDTemplate(null);
                templates[23] = AspReqASP_READ_FILETemplate(null);
                templates[24] = AspReqASP_COMPILED_FAILEDTemplate(null);
                templates[25] = AspReqASP_START_APPLICATION_ON_STARTTemplate(null);
                templates[26] = AspReqASP_END_APPLICATION_ON_STARTTemplate(null);
                templates[27] = AspReqASP_APPLICATION_ON_START_SUCCESSTemplate(null);
                templates[28] = AspReqASP_APPLICATION_ON_START_ERRORTemplate(null);
                templates[29] = AspReqASP_START_SESSION_ON_STARTTemplate(null);
                templates[30] = AspReqASP_END_SESSION_ON_STARTTemplate(null);
                templates[31] = AspReqASP_START_SESSION_ON_START_SUCCESSTemplate(null);
                templates[32] = AspReqASP_START_SESSION_ON_START_ERRORTemplate(null);
                templates[33] = AspReqASP_START_SCRIPT_EXECUTIONTemplate(null);
                templates[34] = AspReqASP_END_SCRIPT_EXECUTIONTemplate(null);
                templates[35] = AspReqASP_TRANSACTION_ABORTEDTemplate(null);
                templates[36] = AspReqASP_TRANSACTION_COMMITEDTemplate(null);
                templates[37] = AspReqASP_START_COMPILETemplate(null);
                templates[38] = AspReqASP_END_COMPILETemplate(null);
                templates[39] = AspReqASP_START_CACHE_ACCESSTemplate(null);
                templates[40] = AspReqASP_END_CACHE_ACCESSTemplate(null);
                templates[41] = AspReqASP_CURRENT_SESSIONTemplate(null);
                templates[42] = AspReqASP_DONE_PROCESSINGTemplate(null);
                templates[43] = AspReqASP_SCRIPT_TRACE_INFOTemplate(null);
                templates[44] = AspReqASP_SCRIPT_TRACE_INFOTemplate(null);
                templates[45] = AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(null);
                templates[46] = AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(null);
                templates[47] = AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(null);
                templates[48] = AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(null);
                templates[49] = AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(null);
                templates[50] = AspReqASP_SCRIPT_OBJECT_TRACE_INFOTemplate(null);
                templates[51] = AspReqASP_LOG_ERRORTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.ASP_Trace
{
    public sealed class ASP_APPLICATION_ON_START_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal ASP_APPLICATION_ON_START_ERROR(Action<ASP_APPLICATION_ON_START_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_APPLICATION_ON_START_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_APPLICATION_ON_START_ERROR> m_target;
        #endregion
    }
    public sealed class ASP_APPLICATION_ON_START_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_APPLICATION_ON_START_SUCCESS(Action<ASP_APPLICATION_ON_START_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_APPLICATION_ON_START_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_APPLICATION_ON_START_SUCCESS> m_target;
        #endregion
    }
    public sealed class ASP_CLIENT_CONNECTION_DISCONNECTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_CLIENT_CONNECTION_DISCONNECTION(Action<ASP_CLIENT_CONNECTION_DISCONNECTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_CLIENT_CONNECTION_DISCONNECTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_CLIENT_CONNECTION_DISCONNECTION> m_target;
        #endregion
    }
    public sealed class ASP_COMPILED_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal ASP_COMPILED_FAILED(Action<ASP_COMPILED_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_COMPILED_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_COMPILED_FAILED> m_target;
        #endregion
    }
    public sealed class ASP_CURRENT_SESSION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string SessionID { get { return GetUTF8StringAt(16); } }

        #region Private
        internal ASP_CURRENT_SESSION(Action<ASP_CURRENT_SESSION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_CURRENT_SESSION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_CURRENT_SESSION> m_target;
        #endregion
    }
    public sealed class ASP_DEQUEUE_REQUEST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_DEQUEUE_REQUEST(Action<ASP_DEQUEUE_REQUEST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_DEQUEUE_REQUEST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_DEQUEUE_REQUEST> m_target;
        #endregion
    }
    public sealed class ASP_DONE_PROCESSING : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_DONE_PROCESSING(Action<ASP_DONE_PROCESSING> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_DONE_PROCESSING>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_DONE_PROCESSING> m_target;
        #endregion
    }
    public sealed class ASP_END_APPLICATION_ON_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_APPLICATION_ON_START(Action<ASP_END_APPLICATION_ON_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_APPLICATION_ON_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_APPLICATION_ON_START> m_target;
        #endregion
    }
    public sealed class ASP_END_CACHE_ACCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }
        public ASP_END_CACHE_ACCESSAccessResult AccessResult { get { return (ASP_END_CACHE_ACCESSAccessResult)GetInt32At(20); } }

        #region Private
        internal ASP_END_CACHE_ACCESS(Action<ASP_END_CACHE_ACCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_CACHE_ACCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "AccessResult", AccessResult);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode", "AccessResult"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                case 2:
                    return AccessResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_CACHE_ACCESS> m_target;
        #endregion
    }
    public sealed class ASP_END_COMPILE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_COMPILE(Action<ASP_END_COMPILE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_COMPILE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_COMPILE> m_target;
        #endregion
    }
    public sealed class ASP_END_GLOBALASA_CHECK : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_GLOBALASA_CHECK(Action<ASP_END_GLOBALASA_CHECK> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_GLOBALASA_CHECK>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_GLOBALASA_CHECK> m_target;
        #endregion
    }
    public sealed class ASP_END_REQUEST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_REQUEST(Action<ASP_END_REQUEST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_REQUEST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_REQUEST> m_target;
        #endregion
    }
    public sealed class ASP_END_SCRIPT_EXECUTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_SCRIPT_EXECUTION(Action<ASP_END_SCRIPT_EXECUTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_SCRIPT_EXECUTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_SCRIPT_EXECUTION> m_target;
        #endregion
    }
    public sealed class ASP_END_SCRIPTLESS_SEND : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_SCRIPTLESS_SEND(Action<ASP_END_SCRIPTLESS_SEND> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_SCRIPTLESS_SEND>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_SCRIPTLESS_SEND> m_target;
        #endregion
    }
    public sealed class ASP_END_SESSION_ON_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_END_SESSION_ON_START(Action<ASP_END_SESSION_ON_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_END_SESSION_ON_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_END_SESSION_ON_START> m_target;
        #endregion
    }
    public sealed class ASP_FILE_ACCESS_DENIED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_FILE_ACCESS_DENIED(Action<ASP_FILE_ACCESS_DENIED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_FILE_ACCESS_DENIED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_FILE_ACCESS_DENIED> m_target;
        #endregion
    }
    public sealed class ASP_FILE_NOT_FOUND : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_FILE_NOT_FOUND(Action<ASP_FILE_NOT_FOUND> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_FILE_NOT_FOUND>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_FILE_NOT_FOUND> m_target;
        #endregion
    }
    public sealed class ASP_FIRST_REQUEST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_FIRST_REQUEST(Action<ASP_FIRST_REQUEST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_FIRST_REQUEST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_FIRST_REQUEST> m_target;
        #endregion
    }
    public sealed class ASP_FIRST_REQUEST_FOR_APPLICATION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ApplicationPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_FIRST_REQUEST_FOR_APPLICATION(Action<ASP_FIRST_REQUEST_FOR_APPLICATION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_FIRST_REQUEST_FOR_APPLICATION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ApplicationPath", ApplicationPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ApplicationPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ApplicationPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_FIRST_REQUEST_FOR_APPLICATION> m_target;
        #endregion
    }
    public sealed class ASP_GLOBALASA_ACCESS_DENIED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_GLOBALASA_ACCESS_DENIED(Action<ASP_GLOBALASA_ACCESS_DENIED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_GLOBALASA_ACCESS_DENIED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_GLOBALASA_ACCESS_DENIED> m_target;
        #endregion
    }
    public sealed class ASP_GLOBALASA_ACCESS_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_GLOBALASA_ACCESS_SUCCESS(Action<ASP_GLOBALASA_ACCESS_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_GLOBALASA_ACCESS_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_GLOBALASA_ACCESS_SUCCESS> m_target;
        #endregion
    }
    public sealed class ASP_GLOBALASA_DOES_NOT_EXIST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_GLOBALASA_DOES_NOT_EXIST(Action<ASP_GLOBALASA_DOES_NOT_EXIST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_GLOBALASA_DOES_NOT_EXIST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_GLOBALASA_DOES_NOT_EXIST> m_target;
        #endregion
    }
    public sealed class ASP_INIT_FAILURE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public ASP_INIT_FAILUREReason Reason { get { return (ASP_INIT_FAILUREReason)GetInt32At(16); } }

        #region Private
        internal ASP_INIT_FAILURE(Action<ASP_INIT_FAILURE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_INIT_FAILURE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_INIT_FAILURE> m_target;
        #endregion
    }
    public sealed class ASP_LOG_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string LineNumber { get { return GetUTF8StringAt(16); } }
        public string ErrorCode { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string Description { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }

        #region Private
        internal ASP_LOG_ERROR(Action<ASP_LOG_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_LOG_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "Description", Description);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "LineNumber", "ErrorCode", "Description"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return LineNumber;
                case 2:
                    return ErrorCode;
                case 3:
                    return Description;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_LOG_ERROR> m_target;
        #endregion
    }
    public sealed class ASP_NEW_SESSION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string SessionId { get { return GetUTF8StringAt(16); } }

        #region Private
        internal ASP_NEW_SESSION(Action<ASP_NEW_SESSION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_NEW_SESSION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_NEW_SESSION> m_target;
        #endregion
    }
    public sealed class ASP_QUEUE_REQUEST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_QUEUE_REQUEST(Action<ASP_QUEUE_REQUEST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_QUEUE_REQUEST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_QUEUE_REQUEST> m_target;
        #endregion
    }
    public sealed class ASP_QUEUE_REQUEST_FAILED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal ASP_QUEUE_REQUEST_FAILED(Action<ASP_QUEUE_REQUEST_FAILED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_QUEUE_REQUEST_FAILED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_QUEUE_REQUEST_FAILED> m_target;
        #endregion
    }
    public sealed class ASP_READ_FILE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_READ_FILE(Action<ASP_READ_FILE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_READ_FILE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_READ_FILE> m_target;
        #endregion
    }
    public sealed class ASP_REQUEST_TIMEOUT : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_REQUEST_TIMEOUT(Action<ASP_REQUEST_TIMEOUT> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_REQUEST_TIMEOUT>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_REQUEST_TIMEOUT> m_target;
        #endregion
    }
    public sealed class ASP_SCRIPT_OBJECT_TRACE_INFO : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }
        public int LineNumber { get { return GetInt32At(SkipUnicodeString(16)); } }
        public string CurrentStatement { get { return GetUnicodeStringAt(SkipUnicodeString(16)+4); } }
        public int SizeOfStatement { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16)+4)); } }

        #region Private
        internal ASP_SCRIPT_OBJECT_TRACE_INFO(Action<ASP_SCRIPT_OBJECT_TRACE_INFO> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)+4)+4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)+4)+4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_SCRIPT_OBJECT_TRACE_INFO>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "CurrentStatement", CurrentStatement);
             XmlAttrib(sb, "SizeOfStatement", SizeOfStatement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath", "LineNumber", "CurrentStatement", "SizeOfStatement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                case 2:
                    return LineNumber;
                case 3:
                    return CurrentStatement;
                case 4:
                    return SizeOfStatement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_SCRIPT_OBJECT_TRACE_INFO> m_target;
        #endregion
    }
    public sealed class ASP_SCRIPT_TRACE_INFO : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_SCRIPT_TRACE_INFO(Action<ASP_SCRIPT_TRACE_INFO> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_SCRIPT_TRACE_INFO>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_SCRIPT_TRACE_INFO> m_target;
        #endregion
    }
    public sealed class ASP_SECURE_SESSIONID : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string SessionId { get { return GetUTF8StringAt(16); } }

        #region Private
        internal ASP_SECURE_SESSIONID(Action<ASP_SECURE_SESSIONID> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_SECURE_SESSIONID>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_SECURE_SESSIONID> m_target;
        #endregion
    }
    public sealed class ASP_SERVER_TOO_BUSY : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_SERVER_TOO_BUSY(Action<ASP_SERVER_TOO_BUSY> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_SERVER_TOO_BUSY>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_SERVER_TOO_BUSY> m_target;
        #endregion
    }
    public sealed class ASP_START_APPLICATION_ON_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_START_APPLICATION_ON_START(Action<ASP_START_APPLICATION_ON_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_APPLICATION_ON_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_APPLICATION_ON_START> m_target;
        #endregion
    }
    public sealed class ASP_START_CACHE_ACCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_START_CACHE_ACCESS(Action<ASP_START_CACHE_ACCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_CACHE_ACCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_CACHE_ACCESS> m_target;
        #endregion
    }
    public sealed class ASP_START_COMPILE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_START_COMPILE(Action<ASP_START_COMPILE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_COMPILE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_COMPILE> m_target;
        #endregion
    }
    public sealed class ASP_START_GLOBALASA_CHECK : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string GlobalASAPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ASP_START_GLOBALASA_CHECK(Action<ASP_START_GLOBALASA_CHECK> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_GLOBALASA_CHECK>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "GlobalASAPath", GlobalASAPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "GlobalASAPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return GlobalASAPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_GLOBALASA_CHECK> m_target;
        #endregion
    }
    public sealed class ASP_START_REQUEST : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUTF8StringAt(16); } }

        #region Private
        internal ASP_START_REQUEST(Action<ASP_START_REQUEST> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_REQUEST>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "PhysicalPath", PhysicalPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_REQUEST> m_target;
        #endregion
    }
    public sealed class ASP_START_SCRIPT_EXECUTION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_START_SCRIPT_EXECUTION(Action<ASP_START_SCRIPT_EXECUTION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_SCRIPT_EXECUTION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_SCRIPT_EXECUTION> m_target;
        #endregion
    }
    public sealed class ASP_START_SCRIPTLESS_SEND : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_START_SCRIPTLESS_SEND(Action<ASP_START_SCRIPTLESS_SEND> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_SCRIPTLESS_SEND>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_SCRIPTLESS_SEND> m_target;
        #endregion
    }
    public sealed class ASP_START_SESSION_ON_START : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_START_SESSION_ON_START(Action<ASP_START_SESSION_ON_START> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_SESSION_ON_START>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_SESSION_ON_START> m_target;
        #endregion
    }
    public sealed class ASP_START_SESSION_ON_START_ERROR : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal ASP_START_SESSION_ON_START_ERROR(Action<ASP_START_SESSION_ON_START_ERROR> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_SESSION_ON_START_ERROR>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_SESSION_ON_START_ERROR> m_target;
        #endregion
    }
    public sealed class ASP_START_SESSION_ON_START_SUCCESS : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_START_SESSION_ON_START_SUCCESS(Action<ASP_START_SESSION_ON_START_SUCCESS> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_START_SESSION_ON_START_SUCCESS>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_START_SESSION_ON_START_SUCCESS> m_target;
        #endregion
    }
    public sealed class ASP_TRANSACTION_ABORTED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_TRANSACTION_ABORTED(Action<ASP_TRANSACTION_ABORTED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_TRANSACTION_ABORTED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_TRANSACTION_ABORTED> m_target;
        #endregion
    }
    public sealed class ASP_TRANSACTION_COMMITED : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ASP_TRANSACTION_COMMITED(Action<ASP_TRANSACTION_COMMITED> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_TRANSACTION_COMMITED>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_TRANSACTION_COMMITED> m_target;
        #endregion
    }
    public sealed class ASP_UNHEALTHY_FAILURE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public ASP_UNHEALTHY_FAILUREReason Reason { get { return (ASP_UNHEALTHY_FAILUREReason)GetInt32At(16); } }

        #region Private
        internal ASP_UNHEALTHY_FAILURE(Action<ASP_UNHEALTHY_FAILURE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ASP_UNHEALTHY_FAILURE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ASP_UNHEALTHY_FAILURE> m_target;
        #endregion
    }
    public enum ASP_END_CACHE_ACCESSAccessResult
    {
        NOT_SERVED = 0x0,
        SERVED_CACHE_MISS = 0x1,
        SERVED_CACHE_HIT_CHANGENOTIF = 0x2,
        SERVED_CACHE_HIT_LASTMOD = 0x3,
        SERVED_CACHE_HIT_LASTMOD_NOACCESS = 0x4,
    }
    public enum ASP_INIT_FAILUREReason
    {
        METABASE_READ_FAILURE = 0x1,
        PERSISTED_CACHE_INIT_FAILURE = 0x2,
        COM_INIT_FAILURE = 0x4,
        METABASE_CHANGE_NOTIF_LISTENER_INIT_FAILURE = 0x8,
    }
    public enum ASP_UNHEALTHY_FAILUREReason
    {
        DEADLOCK_DETECTED = 0x10,
        OUT_OF_MEMORY = 0x20,
    }
}
