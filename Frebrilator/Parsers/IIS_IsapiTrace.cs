using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IIS_IsapiTrace;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IIS_IsapiTraceTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "IIS_IsapiTrace";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xa1c2040e), unchecked((short) 0x8840), unchecked((short) 0x4c31), 0xba, 0x11, 0x98, 0x71, 0x03, 0x1a, 0x19, 0xea);
        public enum Keywords : long
        {
        };

        public IIS_IsapiTraceTraceEventParser(TraceEventSource source) : base(source) {}

        private static Guid W3IsapiTaskGuid = new Guid("{ACADE3B2-B7D7-4339-956C-811B4EDB1B24}");

        public event Action<ISAPI_CALL_EXTENSION> W3IsapiISAPI_CALL_EXTENSION
        {
            add
            {
                source.RegisterEventTemplate(W3IsapiISAPI_CALL_EXTENSIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ISAPI_EXTENSION_DONE> W3IsapiISAPI_EXTENSION_DONE
        {
            add
            {
                source.RegisterEventTemplate(W3IsapiISAPI_EXTENSION_DONETemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }
        public event Action<ISAPI_NOTIFY_COMPLETION> W3IsapiISAPI_NOTIFY_COMPLETION
        {
            add
            {
                source.RegisterEventTemplate(W3IsapiISAPI_NOTIFY_COMPLETIONTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65535, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private ISAPI_CALL_EXTENSION W3IsapiISAPI_CALL_EXTENSIONTemplate(Action<ISAPI_CALL_EXTENSION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ISAPI_CALL_EXTENSION(action, 65535, 0, "W3Isapi", W3IsapiTaskGuid, 1, "ISAPI_CALL_EXTENSION", ProviderGuid, ProviderName );
        }
        static private ISAPI_EXTENSION_DONE W3IsapiISAPI_EXTENSION_DONETemplate(Action<ISAPI_EXTENSION_DONE> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ISAPI_EXTENSION_DONE(action, 65535, 0, "W3Isapi", W3IsapiTaskGuid, 2, "ISAPI_EXTENSION_DONE", ProviderGuid, ProviderName );
        }
        static private ISAPI_NOTIFY_COMPLETION W3IsapiISAPI_NOTIFY_COMPLETIONTemplate(Action<ISAPI_NOTIFY_COMPLETION> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ISAPI_NOTIFY_COMPLETION(action, 65535, 0, "W3Isapi", W3IsapiTaskGuid, 3, "ISAPI_NOTIFY_COMPLETION", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[3];
                templates[0] = W3IsapiISAPI_CALL_EXTENSIONTemplate(null);
                templates[1] = W3IsapiISAPI_NOTIFY_COMPLETIONTemplate(null);
                templates[2] = W3IsapiISAPI_EXTENSION_DONETemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IIS_IsapiTrace
{
    public sealed class ISAPI_CALL_EXTENSION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string DllName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ISAPI_CALL_EXTENSION(Action<ISAPI_CALL_EXTENSION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ISAPI_CALL_EXTENSION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             XmlAttrib(sb, "DllName", DllName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "DllName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return DllName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ISAPI_CALL_EXTENSION> m_target;
        #endregion
    }
    public sealed class ISAPI_EXTENSION_DONE : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ISAPI_EXTENSION_DONE(Action<ISAPI_EXTENSION_DONE> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ISAPI_EXTENSION_DONE>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ISAPI_EXTENSION_DONE> m_target;
        #endregion
    }
    public sealed class ISAPI_NOTIFY_COMPLETION : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal ISAPI_NOTIFY_COMPLETION(Action<ISAPI_NOTIFY_COMPLETION> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<ISAPI_NOTIFY_COMPLETION>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextId", ContextId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ISAPI_NOTIFY_COMPLETION> m_target;
        #endregion
    }
}
